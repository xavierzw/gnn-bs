/* Generated by Cython 0.29.13 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "extra_compile_args": [
            "-fopenmp",
            "-std=c++11"
        ],
        "extra_link_args": [
            "-fopenmp"
        ],
        "language": "c++",
        "name": "cython_sampler",
        "sources": [
            "cython_sampler/cython_sampler.pyx"
        ]
    },
    "module_name": "cython_sampler"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_13"
#define CYTHON_HEX_VERSION 0x001D0DF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__cython_sampler
#define __PYX_HAVE_API__cython_sampler
/* Early includes */
#include <string.h>
#include <stdio.h>
#include "pythread.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <algorithm>
#include <utility>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include <math.h>
#include <stdlib.h>
#include "stdlib.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "cython_sampler/cython_sampler.pyx",
  "stringsource",
  "__init__.pxd",
  "cython_sampler/cython_utils.pxd",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};
/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif


/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":776
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":777
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":778
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":779
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":783
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":784
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":785
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":786
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":790
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":791
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":800
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":804
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":805
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":806
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":808
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":809
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":811
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":812
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_12cython_utils_array_wrapper_float;
struct __pyx_obj_12cython_utils_array_wrapper_int;
struct __pyx_obj_12cython_utils_array_wrapper_long;
struct __pyx_obj_14cython_sampler_Sampler;
struct __pyx_obj_14cython_sampler_BanditSampler;
struct __pyx_obj_14cython_sampler_BanditLinearSampler;
struct __pyx_obj_14cython_sampler_BanditMPSampler;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":815
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":816
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":817
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":819
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "cython_utils.pxd":16
 * 
 * 
 * cdef class array_wrapper_float:             # <<<<<<<<<<<<<<
 *     cdef vector[float] vec
 *     cdef Py_ssize_t shape[1]
 */
struct __pyx_obj_12cython_utils_array_wrapper_float {
  PyObject_HEAD
  struct __pyx_vtabstruct_12cython_utils_array_wrapper_float *__pyx_vtab;
  std::vector<float>  vec;
  Py_ssize_t shape[1];
  Py_ssize_t strides[1];
};


/* "cython_utils.pxd":22
 *     cdef void set_data(self,vector[float]& data)
 * 
 * cdef class array_wrapper_int:             # <<<<<<<<<<<<<<
 *     cdef vector[int] vec
 *     cdef Py_ssize_t shape[1]
 */
struct __pyx_obj_12cython_utils_array_wrapper_int {
  PyObject_HEAD
  struct __pyx_vtabstruct_12cython_utils_array_wrapper_int *__pyx_vtab;
  std::vector<int>  vec;
  Py_ssize_t shape[1];
  Py_ssize_t strides[1];
};


/* "cython_utils.pxd":28
 *     cdef void set_data(self,vector[int]& data)
 * 
 * cdef class array_wrapper_long:             # <<<<<<<<<<<<<<
 *     cdef vector[long] vec
 *     cdef Py_ssize_t shape[1]
 */
struct __pyx_obj_12cython_utils_array_wrapper_long {
  PyObject_HEAD
  struct __pyx_vtabstruct_12cython_utils_array_wrapper_long *__pyx_vtab;
  std::vector<long>  vec;
  Py_ssize_t shape[1];
  Py_ssize_t strides[1];
};


/* "cython_sampler.pyx":42
 * #srand48(123)
 * 
 * cdef class Sampler:             # <<<<<<<<<<<<<<
 *     # hyper parameters
 *     cdef int num_proc
 */
struct __pyx_obj_14cython_sampler_Sampler {
  PyObject_HEAD
  struct __pyx_vtabstruct_14cython_sampler_Sampler *__pyx_vtab;
  int num_proc;
  int neighbor_limit;
  float max_reward;
  int num_node;
  std::unordered_map<int,std::vector<double> >  sample_weights;
  std::unordered_map<int,std::vector<double> >  sample_probs;
  std::unordered_map<int,std::unordered_map<int,int> >  sample_index;
  std::unordered_map<int,std::vector<int> >  sample_set0;
  std::vector<int>  degree;
  std::unordered_map<int,std::vector<int> >  adj;
};


/* "cython_sampler.pyx":125
 * 
 * 
 * cdef class BanditSampler(Sampler):             # <<<<<<<<<<<<<<
 *     def __cinit__(self):
 *         pass
 */
struct __pyx_obj_14cython_sampler_BanditSampler {
  struct __pyx_obj_14cython_sampler_Sampler __pyx_base;
};


/* "cython_sampler.pyx":414
 * 
 * 
 * cdef class BanditLinearSampler(Sampler):             # <<<<<<<<<<<<<<
 *     def __cinit__(self):
 *         pass
 */
struct __pyx_obj_14cython_sampler_BanditLinearSampler {
  struct __pyx_obj_14cython_sampler_Sampler __pyx_base;
};


/* "cython_sampler.pyx":703
 * 
 * 
 * cdef class BanditMPSampler(Sampler):             # <<<<<<<<<<<<<<
 *     def __cinit__(self):
 *         pass
 */
struct __pyx_obj_14cython_sampler_BanditMPSampler {
  struct __pyx_obj_14cython_sampler_Sampler __pyx_base;
};



/* "cython_utils.pxd":16
 * 
 * 
 * cdef class array_wrapper_float:             # <<<<<<<<<<<<<<
 *     cdef vector[float] vec
 *     cdef Py_ssize_t shape[1]
 */

struct __pyx_vtabstruct_12cython_utils_array_wrapper_float {
  void (*set_data)(struct __pyx_obj_12cython_utils_array_wrapper_float *, std::vector<float>  &);
};
static struct __pyx_vtabstruct_12cython_utils_array_wrapper_float *__pyx_vtabptr_12cython_utils_array_wrapper_float;


/* "cython_utils.pxd":22
 *     cdef void set_data(self,vector[float]& data)
 * 
 * cdef class array_wrapper_int:             # <<<<<<<<<<<<<<
 *     cdef vector[int] vec
 *     cdef Py_ssize_t shape[1]
 */

struct __pyx_vtabstruct_12cython_utils_array_wrapper_int {
  void (*set_data)(struct __pyx_obj_12cython_utils_array_wrapper_int *, std::vector<int>  &);
};
static struct __pyx_vtabstruct_12cython_utils_array_wrapper_int *__pyx_vtabptr_12cython_utils_array_wrapper_int;


/* "cython_utils.pxd":28
 *     cdef void set_data(self,vector[int]& data)
 * 
 * cdef class array_wrapper_long:             # <<<<<<<<<<<<<<
 *     cdef vector[long] vec
 *     cdef Py_ssize_t shape[1]
 */

struct __pyx_vtabstruct_12cython_utils_array_wrapper_long {
  void (*set_data)(struct __pyx_obj_12cython_utils_array_wrapper_long *, std::vector<long>  &);
};
static struct __pyx_vtabstruct_12cython_utils_array_wrapper_long *__pyx_vtabptr_12cython_utils_array_wrapper_long;


/* "cython_sampler.pyx":42
 * #srand48(123)
 * 
 * cdef class Sampler:             # <<<<<<<<<<<<<<
 *     # hyper parameters
 *     cdef int num_proc
 */

struct __pyx_vtabstruct_14cython_sampler_Sampler {
  void (*c_init)(struct __pyx_obj_14cython_sampler_Sampler *, int, PyArrayObject *);
};
static struct __pyx_vtabstruct_14cython_sampler_Sampler *__pyx_vtabptr_14cython_sampler_Sampler;


/* "cython_sampler.pyx":125
 * 
 * 
 * cdef class BanditSampler(Sampler):             # <<<<<<<<<<<<<<
 *     def __cinit__(self):
 *         pass
 */

struct __pyx_vtabstruct_14cython_sampler_BanditSampler {
  struct __pyx_vtabstruct_14cython_sampler_Sampler __pyx_base;
  void (*update_sample_weights)(struct __pyx_obj_14cython_sampler_BanditSampler *, std::unordered_map<int,std::unordered_map<int,int> >  &, int, int, std::vector<int>  &, std::vector<int>  &, std::vector<float>  &, int, float);
  void (*update_sample_probs)(struct __pyx_obj_14cython_sampler_BanditSampler *, int, int, std::vector<int> , float);
  void (*c_sample_graph_v1)(struct __pyx_obj_14cython_sampler_BanditSampler *, int, int, std::vector<int>  &, std::vector<int>  &, std::unordered_set<int>  &);
  void (*c_sample_graph_v2)(struct __pyx_obj_14cython_sampler_BanditSampler *, int, int, std::vector<int>  &, std::vector<int>  &);
  int (*sample_neighbors_v1)(struct __pyx_obj_14cython_sampler_BanditSampler *, int, std::vector<int>  &, std::unordered_set<int>  &);
  void (*sample_neighbors_v2)(struct __pyx_obj_14cython_sampler_BanditSampler *, int, std::vector<int>  &);
};
static struct __pyx_vtabstruct_14cython_sampler_BanditSampler *__pyx_vtabptr_14cython_sampler_BanditSampler;


/* "cython_sampler.pyx":414
 * 
 * 
 * cdef class BanditLinearSampler(Sampler):             # <<<<<<<<<<<<<<
 *     def __cinit__(self):
 *         pass
 */

struct __pyx_vtabstruct_14cython_sampler_BanditLinearSampler {
  struct __pyx_vtabstruct_14cython_sampler_Sampler __pyx_base;
  void (*update_sample_weights)(struct __pyx_obj_14cython_sampler_BanditLinearSampler *, std::unordered_map<int,std::unordered_map<int,int> >  &, int, int, std::vector<int>  &, std::vector<int>  &, std::vector<float>  &, int, float);
  void (*update_sample_probs)(struct __pyx_obj_14cython_sampler_BanditLinearSampler *, int, int, std::vector<int> , float);
  void (*c_sample_graph_v1)(struct __pyx_obj_14cython_sampler_BanditLinearSampler *, int, int, std::vector<int>  &, std::vector<int>  &, std::unordered_set<int>  &);
  void (*c_sample_graph_v2)(struct __pyx_obj_14cython_sampler_BanditLinearSampler *, int, int, std::vector<int>  &, std::vector<int>  &);
  int (*sample_neighbors_v1)(struct __pyx_obj_14cython_sampler_BanditLinearSampler *, int, std::vector<int>  &, std::unordered_set<int>  &);
  void (*sample_neighbors_v2)(struct __pyx_obj_14cython_sampler_BanditLinearSampler *, int, std::vector<int>  &);
};
static struct __pyx_vtabstruct_14cython_sampler_BanditLinearSampler *__pyx_vtabptr_14cython_sampler_BanditLinearSampler;


/* "cython_sampler.pyx":703
 * 
 * 
 * cdef class BanditMPSampler(Sampler):             # <<<<<<<<<<<<<<
 *     def __cinit__(self):
 *         pass
 */

struct __pyx_vtabstruct_14cython_sampler_BanditMPSampler {
  struct __pyx_vtabstruct_14cython_sampler_Sampler __pyx_base;
  void (*update_sample_weights)(struct __pyx_obj_14cython_sampler_BanditMPSampler *, std::unordered_map<int,std::unordered_map<int,int> >  &, std::unordered_map<int,int>  &, std::unordered_map<int,int>  &, int, int, std::vector<int>  &, std::vector<int>  &, std::vector<int>  &, std::vector<float>  &, int, float, float);
  void (*c_sample_graph_v1)(struct __pyx_obj_14cython_sampler_BanditMPSampler *, int, int, std::vector<int>  &, std::vector<int>  &, std::unordered_set<int>  &);
  void (*c_sample_graph_v2)(struct __pyx_obj_14cython_sampler_BanditMPSampler *, int, int, std::vector<int>  &, std::vector<int>  &);
  int (*sample_neighbors_v1)(struct __pyx_obj_14cython_sampler_BanditMPSampler *, int, std::vector<int>  &, std::unordered_set<int>  &);
  void (*sample_neighbors_v2)(struct __pyx_obj_14cython_sampler_BanditMPSampler *, int, std::vector<int>  &);
};
static struct __pyx_vtabstruct_14cython_sampler_BanditMPSampler *__pyx_vtabptr_14cython_sampler_BanditMPSampler;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* BufferGetAndValidate.proto */
#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
    ((obj == Py_None || obj == NULL) ?\
    (__Pyx_ZeroBuffer(buf), 0) :\
    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static void __Pyx_ZeroBuffer(Py_buffer* buf);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* None.proto */
static CYTHON_INLINE int __Pyx_mod_int(int, int);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* None.proto */
static CYTHON_INLINE long __Pyx_mod_long(long, long);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* BufferIndexError.proto */
static void __Pyx_RaiseBufferIndexError(int axis);

#define __Pyx_BufPtrCContig1d(type, buf, i0, s0) ((type)buf + i0)
/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* None.proto */
static CYTHON_INLINE long __Pyx_pow_long(long, long);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static void __pyx_f_14cython_sampler_7Sampler_c_init(struct __pyx_obj_14cython_sampler_Sampler *__pyx_v_self, int __pyx_v_src, PyArrayObject *__pyx_v_dst_list); /* proto*/
static void __pyx_f_14cython_sampler_13BanditSampler_update_sample_weights(struct __pyx_obj_14cython_sampler_BanditSampler *__pyx_v_self, std::unordered_map<int,std::unordered_map<int,int> >  &__pyx_v_att_map, int __pyx_v_p, int __pyx_v_num_data, std::vector<int>  &__pyx_v_src_list, std::vector<int>  &__pyx_v_dst_list, std::vector<float>  &__pyx_v_att_list, int __pyx_v_neighbor_limit, float __pyx_v_delta); /* proto*/
static void __pyx_f_14cython_sampler_13BanditSampler_update_sample_probs(struct __pyx_obj_14cython_sampler_BanditSampler *__pyx_v_self, int __pyx_v_p, int __pyx_v_num_data, std::vector<int>  __pyx_v_src_list, float __pyx_v_eta); /* proto*/
static void __pyx_f_14cython_sampler_13BanditSampler_c_sample_graph_v1(struct __pyx_obj_14cython_sampler_BanditSampler *__pyx_v_self, int __pyx_v_p, int __pyx_v_num_data, std::vector<int>  &__pyx_v_roots, std::vector<int>  &__pyx_v_edges, std::unordered_set<int>  &__pyx_v_n_depth); /* proto*/
static void __pyx_f_14cython_sampler_13BanditSampler_c_sample_graph_v2(struct __pyx_obj_14cython_sampler_BanditSampler *__pyx_v_self, int __pyx_v_p, int __pyx_v_num_data, std::vector<int>  &__pyx_v_roots, std::vector<int>  &__pyx_v_edges); /* proto*/
static int __pyx_f_14cython_sampler_13BanditSampler_sample_neighbors_v1(struct __pyx_obj_14cython_sampler_BanditSampler *__pyx_v_self, int __pyx_v_node, std::vector<int>  &__pyx_v_edges, std::unordered_set<int>  &__pyx_v_n_depth); /* proto*/
static void __pyx_f_14cython_sampler_13BanditSampler_sample_neighbors_v2(struct __pyx_obj_14cython_sampler_BanditSampler *__pyx_v_self, int __pyx_v_node, std::vector<int>  &__pyx_v_edges); /* proto*/
static void __pyx_f_14cython_sampler_19BanditLinearSampler_update_sample_weights(struct __pyx_obj_14cython_sampler_BanditLinearSampler *__pyx_v_self, std::unordered_map<int,std::unordered_map<int,int> >  &__pyx_v_att_map, int __pyx_v_p, int __pyx_v_num_data, std::vector<int>  &__pyx_v_src_list, std::vector<int>  &__pyx_v_dst_list, std::vector<float>  &__pyx_v_att_list, int __pyx_v_neighbor_limit, float __pyx_v_delta); /* proto*/
static void __pyx_f_14cython_sampler_19BanditLinearSampler_update_sample_probs(struct __pyx_obj_14cython_sampler_BanditLinearSampler *__pyx_v_self, int __pyx_v_p, int __pyx_v_num_data, std::vector<int>  __pyx_v_src_list, float __pyx_v_eta); /* proto*/
static void __pyx_f_14cython_sampler_19BanditLinearSampler_c_sample_graph_v1(struct __pyx_obj_14cython_sampler_BanditLinearSampler *__pyx_v_self, int __pyx_v_p, int __pyx_v_num_data, std::vector<int>  &__pyx_v_roots, std::vector<int>  &__pyx_v_edges, std::unordered_set<int>  &__pyx_v_n_depth); /* proto*/
static void __pyx_f_14cython_sampler_19BanditLinearSampler_c_sample_graph_v2(struct __pyx_obj_14cython_sampler_BanditLinearSampler *__pyx_v_self, int __pyx_v_p, int __pyx_v_num_data, std::vector<int>  &__pyx_v_roots, std::vector<int>  &__pyx_v_edges); /* proto*/
static int __pyx_f_14cython_sampler_19BanditLinearSampler_sample_neighbors_v1(struct __pyx_obj_14cython_sampler_BanditLinearSampler *__pyx_v_self, int __pyx_v_node, std::vector<int>  &__pyx_v_edges, std::unordered_set<int>  &__pyx_v_n_depth); /* proto*/
static void __pyx_f_14cython_sampler_19BanditLinearSampler_sample_neighbors_v2(struct __pyx_obj_14cython_sampler_BanditLinearSampler *__pyx_v_self, int __pyx_v_node, std::vector<int>  &__pyx_v_edges); /* proto*/
static void __pyx_f_14cython_sampler_15BanditMPSampler_update_sample_weights(struct __pyx_obj_14cython_sampler_BanditMPSampler *__pyx_v_self, std::unordered_map<int,std::unordered_map<int,int> >  &__pyx_v_att_map, std::unordered_map<int,int>  &__pyx_v_src_start, std::unordered_map<int,int>  &__pyx_v_src_end, int __pyx_v_p, int __pyx_v_num_src, std::vector<int>  &__pyx_v_src_set, CYTHON_UNUSED std::vector<int>  &__pyx_v_src_list, std::vector<int>  &__pyx_v_dst_list, std::vector<float>  &__pyx_v_att_list, CYTHON_UNUSED int __pyx_v_neighbor_limit, CYTHON_UNUSED float __pyx_v_delta, float __pyx_v_eta); /* proto*/
static void __pyx_f_14cython_sampler_15BanditMPSampler_c_sample_graph_v1(struct __pyx_obj_14cython_sampler_BanditMPSampler *__pyx_v_self, int __pyx_v_p, int __pyx_v_num_data, std::vector<int>  &__pyx_v_roots, std::vector<int>  &__pyx_v_edges, std::unordered_set<int>  &__pyx_v_n_depth); /* proto*/
static void __pyx_f_14cython_sampler_15BanditMPSampler_c_sample_graph_v2(struct __pyx_obj_14cython_sampler_BanditMPSampler *__pyx_v_self, int __pyx_v_p, int __pyx_v_num_data, std::vector<int>  &__pyx_v_roots, std::vector<int>  &__pyx_v_edges); /* proto*/
static int __pyx_f_14cython_sampler_15BanditMPSampler_sample_neighbors_v1(struct __pyx_obj_14cython_sampler_BanditMPSampler *__pyx_v_self, int __pyx_v_node, std::vector<int>  &__pyx_v_edges, std::unordered_set<int>  &__pyx_v_n_depth); /* proto*/
static void __pyx_f_14cython_sampler_15BanditMPSampler_sample_neighbors_v2(struct __pyx_obj_14cython_sampler_BanditMPSampler *__pyx_v_self, int __pyx_v_node, std::vector<int>  &__pyx_v_edges); /* proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'cpython.version' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.algorithm' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp.unordered_map' */

/* Module declarations from 'libcpp.unordered_set' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'libc.math' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'cython_utils' */
static PyTypeObject *__pyx_ptype_12cython_utils_array_wrapper_float = 0;
static PyTypeObject *__pyx_ptype_12cython_utils_array_wrapper_int = 0;
static PyTypeObject *__pyx_ptype_12cython_utils_array_wrapper_long = 0;
static CYTHON_INLINE void __pyx_f_12cython_utils_npy2vec_int(PyArrayObject *, std::vector<int>  &); /*proto*/
static CYTHON_INLINE void __pyx_f_12cython_utils_npy2vec_float(PyArrayObject *, std::vector<float>  &); /*proto*/
static CYTHON_INLINE void __pyx_f_12cython_utils_npy2vec_double(PyArrayObject *, std::vector<double>  &); /*proto*/

/* Module declarations from 'cython_sampler' */
static PyTypeObject *__pyx_ptype_14cython_sampler_Sampler = 0;
static PyTypeObject *__pyx_ptype_14cython_sampler_BanditSampler = 0;
static PyTypeObject *__pyx_ptype_14cython_sampler_BanditLinearSampler = 0;
static PyTypeObject *__pyx_ptype_14cython_sampler_BanditMPSampler = 0;
static std::vector<int>  __pyx_f_14cython_sampler_random_choice(std::vector<int>  &, std::vector<double>  &, int); /*proto*/
static double __pyx_f_14cython_sampler_sum_double(std::vector<double>  &); /*proto*/
static std::vector<double>  __pyx_f_14cython_sampler_cumsum(std::vector<double>  &); /*proto*/
static int __pyx_f_14cython_sampler_searchsorted_one(std::vector<double>  &, double); /*proto*/
static std::vector<int>  __pyx_f_14cython_sampler_searchsorted(std::vector<double>  &, std::vector<double>  &); /*proto*/
static std::vector<int>  __pyx_f_14cython_sampler_unique_index(std::vector<int>  &); /*proto*/
static bool __pyx_f_14cython_sampler_vec_find(std::vector<int>  &, int); /*proto*/
static double __pyx_f_14cython_sampler_vec_max(std::vector<double>  &); /*proto*/
static double __pyx_f_14cython_sampler_double_abs(double); /*proto*/
static std::vector<int>  __pyx_f_14cython_sampler_depround(std::vector<int>  &, std::vector<double>  &, int); /*proto*/
static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_int = { "int", NULL, sizeof(int), { 0 }, 0, IS_UNSIGNED(int) ? 'U' : 'I', IS_UNSIGNED(int), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_float = { "float", NULL, sizeof(float), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_long = { "long", NULL, sizeof(long), { 0 }, 0, IS_UNSIGNED(long) ? 'U' : 'I', IS_UNSIGNED(long), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_double = { "double", NULL, sizeof(double), { 0 }, 0, 'R', 0, 0 };
#define __Pyx_MODULE_NAME "cython_sampler"
extern int __pyx_module_is_main_cython_sampler;
int __pyx_module_is_main_cython_sampler = 0;

/* Implementation of 'cython_sampler' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_p[] = "p";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_tf[] = "tf";
static const char __pyx_k_app[] = "app";
static const char __pyx_k_dst[] = "dst";
static const char __pyx_k_eta[] = "eta";
static const char __pyx_k_ids[] = "ids";
static const char __pyx_k_src[] = "src";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_math[] = "math";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_node[] = "node";
static const char __pyx_k_rows[] = "rows";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_FLAGS[] = "FLAGS";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_delta[] = "delta";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_int32[] = "int32";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_probs[] = "probs";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_choice[] = "choice";
static const char __pyx_k_cutils[] = "cutils";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_py_ids[] = "py_ids";
static const char __pyx_k_random[] = "random";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_Sampler[] = "Sampler";
static const char __pyx_k_replace[] = "replace";
static const char __pyx_k_reshape[] = "reshape";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_num_proc[] = "num_proc";
static const char __pyx_k_py_probs[] = "py_probs";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_frombuffer[] = "frombuffer";
static const char __pyx_k_lil_matrix[] = "lil_matrix";
static const char __pyx_k_max_reward[] = "max_reward";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_tensorflow[] = "tensorflow";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_np_att_list[] = "np_att_list";
static const char __pyx_k_np_dst_list[] = "np_dst_list";
static const char __pyx_k_np_src_list[] = "np_src_list";
static const char __pyx_k_sample_size[] = "sample_size";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_cython_utils[] = "cython_utils";
static const char __pyx_k_scipy_sparse[] = "scipy.sparse";
static const char __pyx_k_BanditSampler[] = "BanditSampler";
static const char __pyx_k_depround_test[] = "depround_test";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_cython_sampler[] = "cython_sampler";
static const char __pyx_k_neighbor_limit[] = "neighbor_limit";
static const char __pyx_k_BanditMPSampler[] = "BanditMPSampler";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_BanditLinearSampler[] = "BanditLinearSampler";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_cython_sampler_cython_sampler_py[] = "cython_sampler/cython_sampler.pyx";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_n_s_BanditLinearSampler;
static PyObject *__pyx_n_s_BanditMPSampler;
static PyObject *__pyx_n_s_BanditSampler;
static PyObject *__pyx_n_s_FLAGS;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_Sampler;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_app;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_choice;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_cutils;
static PyObject *__pyx_n_s_cython_sampler;
static PyObject *__pyx_kp_s_cython_sampler_cython_sampler_py;
static PyObject *__pyx_n_s_cython_utils;
static PyObject *__pyx_n_s_delta;
static PyObject *__pyx_n_s_depround_test;
static PyObject *__pyx_n_s_dst;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_eta;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_frombuffer;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_ids;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_int32;
static PyObject *__pyx_n_s_lil_matrix;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_math;
static PyObject *__pyx_n_s_max_reward;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_neighbor_limit;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_node;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_np_att_list;
static PyObject *__pyx_n_s_np_dst_list;
static PyObject *__pyx_n_s_np_src_list;
static PyObject *__pyx_n_s_num_proc;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_probs;
static PyObject *__pyx_n_s_py_ids;
static PyObject *__pyx_n_s_py_probs;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_random;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_replace;
static PyObject *__pyx_n_s_reshape;
static PyObject *__pyx_n_s_rows;
static PyObject *__pyx_n_s_sample_size;
static PyObject *__pyx_n_s_scipy_sparse;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_src;
static PyObject *__pyx_n_s_tensorflow;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_tf;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static int __pyx_pf_14cython_sampler_7Sampler___cinit__(struct __pyx_obj_14cython_sampler_Sampler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14cython_sampler_7Sampler_2init(struct __pyx_obj_14cython_sampler_Sampler *__pyx_v_self, PyObject *__pyx_v_adj); /* proto */
static PyObject *__pyx_pf_14cython_sampler_7Sampler_4get_degree(struct __pyx_obj_14cython_sampler_Sampler *__pyx_v_self, int __pyx_v_src); /* proto */
static PyObject *__pyx_pf_14cython_sampler_7Sampler_6get_sample_probs(struct __pyx_obj_14cython_sampler_Sampler *__pyx_v_self, int __pyx_v_src, int __pyx_v_dst); /* proto */
static PyObject *__pyx_pf_14cython_sampler_7Sampler_8get_sample_probs_list(struct __pyx_obj_14cython_sampler_Sampler *__pyx_v_self, int __pyx_v_src); /* proto */
static PyObject *__pyx_pf_14cython_sampler_7Sampler_10get_sample_weights(struct __pyx_obj_14cython_sampler_Sampler *__pyx_v_self, int __pyx_v_src); /* proto */
static PyObject *__pyx_pf_14cython_sampler_7Sampler_12update(CYTHON_UNUSED struct __pyx_obj_14cython_sampler_Sampler *__pyx_v_self, CYTHON_UNUSED PyArrayObject *__pyx_v_np_src_list, CYTHON_UNUSED PyArrayObject *__pyx_v_np_dst_list, CYTHON_UNUSED PyArrayObject *__pyx_v_np_att_list); /* proto */
static PyObject *__pyx_pf_14cython_sampler_7Sampler_14sample(struct __pyx_obj_14cython_sampler_Sampler *__pyx_v_self, int __pyx_v_node, int __pyx_v_sample_size); /* proto */
static PyObject *__pyx_pf_14cython_sampler_7Sampler_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14cython_sampler_Sampler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14cython_sampler_7Sampler_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14cython_sampler_Sampler *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_14cython_sampler_13BanditSampler___cinit__(CYTHON_UNUSED struct __pyx_obj_14cython_sampler_BanditSampler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14cython_sampler_13BanditSampler_2update(struct __pyx_obj_14cython_sampler_BanditSampler *__pyx_v_self, PyArrayObject *__pyx_v_np_src_list, PyArrayObject *__pyx_v_np_dst_list, PyArrayObject *__pyx_v_np_att_list); /* proto */
static PyObject *__pyx_pf_14cython_sampler_13BanditSampler_4sample_graph(struct __pyx_obj_14cython_sampler_BanditSampler *__pyx_v_self, PyObject *__pyx_v_py_roots); /* proto */
static PyObject *__pyx_pf_14cython_sampler_13BanditSampler_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14cython_sampler_BanditSampler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14cython_sampler_13BanditSampler_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14cython_sampler_BanditSampler *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_14cython_sampler_19BanditLinearSampler___cinit__(CYTHON_UNUSED struct __pyx_obj_14cython_sampler_BanditLinearSampler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14cython_sampler_19BanditLinearSampler_2update(struct __pyx_obj_14cython_sampler_BanditLinearSampler *__pyx_v_self, PyArrayObject *__pyx_v_np_src_list, PyArrayObject *__pyx_v_np_dst_list, PyArrayObject *__pyx_v_np_att_list); /* proto */
static PyObject *__pyx_pf_14cython_sampler_19BanditLinearSampler_4sample_graph(struct __pyx_obj_14cython_sampler_BanditLinearSampler *__pyx_v_self, PyObject *__pyx_v_py_roots); /* proto */
static PyObject *__pyx_pf_14cython_sampler_19BanditLinearSampler_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14cython_sampler_BanditLinearSampler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14cython_sampler_19BanditLinearSampler_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14cython_sampler_BanditLinearSampler *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_14cython_sampler_15BanditMPSampler___cinit__(CYTHON_UNUSED struct __pyx_obj_14cython_sampler_BanditMPSampler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14cython_sampler_15BanditMPSampler_2update(struct __pyx_obj_14cython_sampler_BanditMPSampler *__pyx_v_self, PyArrayObject *__pyx_v_np_src_list, PyArrayObject *__pyx_v_np_dst_list, PyArrayObject *__pyx_v_np_att_list); /* proto */
static PyObject *__pyx_pf_14cython_sampler_15BanditMPSampler_4sample_graph(struct __pyx_obj_14cython_sampler_BanditMPSampler *__pyx_v_self, PyObject *__pyx_v_py_roots); /* proto */
static PyObject *__pyx_pf_14cython_sampler_15BanditMPSampler_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14cython_sampler_BanditMPSampler *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14cython_sampler_15BanditMPSampler_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14cython_sampler_BanditMPSampler *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_14cython_sampler_depround_test(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_py_ids, PyObject *__pyx_v_py_probs, PyObject *__pyx_v_sample_size); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_14cython_sampler_Sampler(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14cython_sampler_BanditSampler(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14cython_sampler_BanditLinearSampler(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14cython_sampler_BanditMPSampler(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_codeobj__17;
/* Late includes */

/* "cython_sampler.pyx":57
 *     cdef unordered_map[int,vector[int]] adj
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.num_proc = FLAGS.num_proc
 *         self.neighbor_limit = FLAGS.neighbor_limit
 */

/* Python wrapper */
static int __pyx_pw_14cython_sampler_7Sampler_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14cython_sampler_7Sampler_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_14cython_sampler_7Sampler___cinit__(((struct __pyx_obj_14cython_sampler_Sampler *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14cython_sampler_7Sampler___cinit__(struct __pyx_obj_14cython_sampler_Sampler *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  float __pyx_t_4;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cython_sampler.pyx":58
 * 
 *     def __cinit__(self):
 *         self.num_proc = FLAGS.num_proc             # <<<<<<<<<<<<<<
 *         self.neighbor_limit = FLAGS.neighbor_limit
 *         self.max_reward = FLAGS.max_reward
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_FLAGS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_num_proc); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->num_proc = __pyx_t_3;

  /* "cython_sampler.pyx":59
 *     def __cinit__(self):
 *         self.num_proc = FLAGS.num_proc
 *         self.neighbor_limit = FLAGS.neighbor_limit             # <<<<<<<<<<<<<<
 *         self.max_reward = FLAGS.max_reward
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_FLAGS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_neighbor_limit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->neighbor_limit = __pyx_t_3;

  /* "cython_sampler.pyx":60
 *         self.num_proc = FLAGS.num_proc
 *         self.neighbor_limit = FLAGS.neighbor_limit
 *         self.max_reward = FLAGS.max_reward             # <<<<<<<<<<<<<<
 * 
 *     def init(self, adj):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_FLAGS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_max_reward); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->max_reward = __pyx_t_4;

  /* "cython_sampler.pyx":57
 *     cdef unordered_map[int,vector[int]] adj
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.num_proc = FLAGS.num_proc
 *         self.neighbor_limit = FLAGS.neighbor_limit
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cython_sampler.Sampler.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython_sampler.pyx":62
 *         self.max_reward = FLAGS.max_reward
 * 
 *     def init(self, adj):             # <<<<<<<<<<<<<<
 *         self.num_node = adj.shape[0]
 *         self.degree = vector[int](self.num_node)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14cython_sampler_7Sampler_3init(PyObject *__pyx_v_self, PyObject *__pyx_v_adj); /*proto*/
static PyObject *__pyx_pw_14cython_sampler_7Sampler_3init(PyObject *__pyx_v_self, PyObject *__pyx_v_adj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init (wrapper)", 0);
  __pyx_r = __pyx_pf_14cython_sampler_7Sampler_2init(((struct __pyx_obj_14cython_sampler_Sampler *)__pyx_v_self), ((PyObject *)__pyx_v_adj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14cython_sampler_7Sampler_2init(struct __pyx_obj_14cython_sampler_Sampler *__pyx_v_self, PyObject *__pyx_v_adj) {
  int __pyx_v_src;
  PyObject *__pyx_v_dst_list = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  std::vector<int>  __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("init", 0);

  /* "cython_sampler.pyx":63
 * 
 *     def init(self, adj):
 *         self.num_node = adj.shape[0]             # <<<<<<<<<<<<<<
 *         self.degree = vector[int](self.num_node)
 *         for src in range(self.num_node):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_adj, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->num_node = __pyx_t_3;

  /* "cython_sampler.pyx":64
 *     def init(self, adj):
 *         self.num_node = adj.shape[0]
 *         self.degree = vector[int](self.num_node)             # <<<<<<<<<<<<<<
 *         for src in range(self.num_node):
 *             if len(adj[src].rows[0]) == 0:
 */
  try {
    __pyx_t_4 = std::vector<int> (__pyx_v_self->num_node);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 64, __pyx_L1_error)
  }
  __pyx_v_self->degree = __pyx_t_4;

  /* "cython_sampler.pyx":65
 *         self.num_node = adj.shape[0]
 *         self.degree = vector[int](self.num_node)
 *         for src in range(self.num_node):             # <<<<<<<<<<<<<<
 *             if len(adj[src].rows[0]) == 0:
 *                 self.degree[src] = 0
 */
  __pyx_t_3 = __pyx_v_self->num_node;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_src = __pyx_t_6;

    /* "cython_sampler.pyx":66
 *         self.degree = vector[int](self.num_node)
 *         for src in range(self.num_node):
 *             if len(adj[src].rows[0]) == 0:             # <<<<<<<<<<<<<<
 *                 self.degree[src] = 0
 *                 continue
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_adj, __pyx_v_src, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_rows); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 66, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = ((__pyx_t_7 == 0) != 0);
    if (__pyx_t_8) {

      /* "cython_sampler.pyx":67
 *         for src in range(self.num_node):
 *             if len(adj[src].rows[0]) == 0:
 *                 self.degree[src] = 0             # <<<<<<<<<<<<<<
 *                 continue
 *             dst_list = np.array(adj[src].rows[0], dtype=np.int32)
 */
      (__pyx_v_self->degree[__pyx_v_src]) = 0;

      /* "cython_sampler.pyx":68
 *             if len(adj[src].rows[0]) == 0:
 *                 self.degree[src] = 0
 *                 continue             # <<<<<<<<<<<<<<
 *             dst_list = np.array(adj[src].rows[0], dtype=np.int32)
 *             self.c_init(src, dst_list)
 */
      goto __pyx_L3_continue;

      /* "cython_sampler.pyx":66
 *         self.degree = vector[int](self.num_node)
 *         for src in range(self.num_node):
 *             if len(adj[src].rows[0]) == 0:             # <<<<<<<<<<<<<<
 *                 self.degree[src] = 0
 *                 continue
 */
    }

    /* "cython_sampler.pyx":69
 *                 self.degree[src] = 0
 *                 continue
 *             dst_list = np.array(adj[src].rows[0], dtype=np.int32)             # <<<<<<<<<<<<<<
 *             self.c_init(src, dst_list)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_adj, __pyx_v_src, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_rows); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_9, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_int32); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_11) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, __pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_dst_list, __pyx_t_11);
    __pyx_t_11 = 0;

    /* "cython_sampler.pyx":70
 *                 continue
 *             dst_list = np.array(adj[src].rows[0], dtype=np.int32)
 *             self.c_init(src, dst_list)             # <<<<<<<<<<<<<<
 * 
 *     cdef void c_init(self, int src, np.ndarray[int,ndim=1,mode='c'] dst_list):
 */
    if (!(likely(((__pyx_v_dst_list) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst_list, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 70, __pyx_L1_error)
    ((struct __pyx_vtabstruct_14cython_sampler_Sampler *)__pyx_v_self->__pyx_vtab)->c_init(__pyx_v_self, __pyx_v_src, ((PyArrayObject *)__pyx_v_dst_list));
    __pyx_L3_continue:;
  }

  /* "cython_sampler.pyx":62
 *         self.max_reward = FLAGS.max_reward
 * 
 *     def init(self, adj):             # <<<<<<<<<<<<<<
 *         self.num_node = adj.shape[0]
 *         self.degree = vector[int](self.num_node)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("cython_sampler.Sampler.init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dst_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython_sampler.pyx":72
 *             self.c_init(src, dst_list)
 * 
 *     cdef void c_init(self, int src, np.ndarray[int,ndim=1,mode='c'] dst_list):             # <<<<<<<<<<<<<<
 *         cdef vector[int] dst_vec
 *         cutils.npy2vec_int(dst_list, dst_vec)
 */

static void __pyx_f_14cython_sampler_7Sampler_c_init(struct __pyx_obj_14cython_sampler_Sampler *__pyx_v_self, int __pyx_v_src, PyArrayObject *__pyx_v_dst_list) {
  std::vector<int>  __pyx_v_dst_vec;
  int __pyx_v_degree;
  int __pyx_v_dst;
  int __pyx_v_idx;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_dst_list;
  __Pyx_Buffer __pyx_pybuffer_dst_list;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("c_init", 0);
  __pyx_pybuffer_dst_list.pybuffer.buf = NULL;
  __pyx_pybuffer_dst_list.refcount = 0;
  __pyx_pybuffernd_dst_list.data = NULL;
  __pyx_pybuffernd_dst_list.rcbuffer = &__pyx_pybuffer_dst_list;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dst_list.rcbuffer->pybuffer, (PyObject*)__pyx_v_dst_list, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 72, __pyx_L1_error)
  }
  __pyx_pybuffernd_dst_list.diminfo[0].strides = __pyx_pybuffernd_dst_list.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_dst_list.diminfo[0].shape = __pyx_pybuffernd_dst_list.rcbuffer->pybuffer.shape[0];

  /* "cython_sampler.pyx":74
 *     cdef void c_init(self, int src, np.ndarray[int,ndim=1,mode='c'] dst_list):
 *         cdef vector[int] dst_vec
 *         cutils.npy2vec_int(dst_list, dst_vec)             # <<<<<<<<<<<<<<
 * 
 *         cdef int degree = dst_vec.size()
 */
  __pyx_f_12cython_utils_npy2vec_int(((PyArrayObject *)__pyx_v_dst_list), __pyx_v_dst_vec);

  /* "cython_sampler.pyx":76
 *         cutils.npy2vec_int(dst_list, dst_vec)
 * 
 *         cdef int degree = dst_vec.size()             # <<<<<<<<<<<<<<
 *         self.degree[src] = degree
 *         if degree == 0:
 */
  __pyx_v_degree = __pyx_v_dst_vec.size();

  /* "cython_sampler.pyx":77
 * 
 *         cdef int degree = dst_vec.size()
 *         self.degree[src] = degree             # <<<<<<<<<<<<<<
 *         if degree == 0:
 *             return
 */
  (__pyx_v_self->degree[__pyx_v_src]) = __pyx_v_degree;

  /* "cython_sampler.pyx":78
 *         cdef int degree = dst_vec.size()
 *         self.degree[src] = degree
 *         if degree == 0:             # <<<<<<<<<<<<<<
 *             return
 *         self.sample_weights[src].resize(degree)
 */
  __pyx_t_1 = ((__pyx_v_degree == 0) != 0);
  if (__pyx_t_1) {

    /* "cython_sampler.pyx":79
 *         self.degree[src] = degree
 *         if degree == 0:
 *             return             # <<<<<<<<<<<<<<
 *         self.sample_weights[src].resize(degree)
 *         self.sample_probs[src].resize(degree)
 */
    goto __pyx_L0;

    /* "cython_sampler.pyx":78
 *         cdef int degree = dst_vec.size()
 *         self.degree[src] = degree
 *         if degree == 0:             # <<<<<<<<<<<<<<
 *             return
 *         self.sample_weights[src].resize(degree)
 */
  }

  /* "cython_sampler.pyx":80
 *         if degree == 0:
 *             return
 *         self.sample_weights[src].resize(degree)             # <<<<<<<<<<<<<<
 *         self.sample_probs[src].resize(degree)
 *         self.adj[src].resize(degree)
 */
  try {
    (__pyx_v_self->sample_weights[__pyx_v_src]).resize(__pyx_v_degree);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 80, __pyx_L1_error)
  }

  /* "cython_sampler.pyx":81
 *             return
 *         self.sample_weights[src].resize(degree)
 *         self.sample_probs[src].resize(degree)             # <<<<<<<<<<<<<<
 *         self.adj[src].resize(degree)
 * 
 */
  try {
    (__pyx_v_self->sample_probs[__pyx_v_src]).resize(__pyx_v_degree);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 81, __pyx_L1_error)
  }

  /* "cython_sampler.pyx":82
 *         self.sample_weights[src].resize(degree)
 *         self.sample_probs[src].resize(degree)
 *         self.adj[src].resize(degree)             # <<<<<<<<<<<<<<
 * 
 *         cdef int dst
 */
  try {
    (__pyx_v_self->adj[__pyx_v_src]).resize(__pyx_v_degree);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 82, __pyx_L1_error)
  }

  /* "cython_sampler.pyx":86
 *         cdef int dst
 *         cdef int idx
 *         idx = 0             # <<<<<<<<<<<<<<
 *         while idx < degree:
 *             dst = dst_vec[idx]
 */
  __pyx_v_idx = 0;

  /* "cython_sampler.pyx":87
 *         cdef int idx
 *         idx = 0
 *         while idx < degree:             # <<<<<<<<<<<<<<
 *             dst = dst_vec[idx]
 *             self.adj[src][idx] = dst
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_idx < __pyx_v_degree) != 0);
    if (!__pyx_t_1) break;

    /* "cython_sampler.pyx":88
 *         idx = 0
 *         while idx < degree:
 *             dst = dst_vec[idx]             # <<<<<<<<<<<<<<
 *             self.adj[src][idx] = dst
 *             self.sample_weights[src][idx] = 1.
 */
    __pyx_v_dst = (__pyx_v_dst_vec[__pyx_v_idx]);

    /* "cython_sampler.pyx":89
 *         while idx < degree:
 *             dst = dst_vec[idx]
 *             self.adj[src][idx] = dst             # <<<<<<<<<<<<<<
 *             self.sample_weights[src][idx] = 1.
 *             self.sample_probs[src][idx] = 1./degree
 */
    ((__pyx_v_self->adj[__pyx_v_src])[__pyx_v_idx]) = __pyx_v_dst;

    /* "cython_sampler.pyx":90
 *             dst = dst_vec[idx]
 *             self.adj[src][idx] = dst
 *             self.sample_weights[src][idx] = 1.             # <<<<<<<<<<<<<<
 *             self.sample_probs[src][idx] = 1./degree
 *             self.sample_index[src][dst] = idx
 */
    ((__pyx_v_self->sample_weights[__pyx_v_src])[__pyx_v_idx]) = 1.;

    /* "cython_sampler.pyx":91
 *             self.adj[src][idx] = dst
 *             self.sample_weights[src][idx] = 1.
 *             self.sample_probs[src][idx] = 1./degree             # <<<<<<<<<<<<<<
 *             self.sample_index[src][dst] = idx
 *             idx += 1
 */
    if (unlikely(__pyx_v_degree == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 91, __pyx_L1_error)
    }
    ((__pyx_v_self->sample_probs[__pyx_v_src])[__pyx_v_idx]) = (1. / ((double)__pyx_v_degree));

    /* "cython_sampler.pyx":92
 *             self.sample_weights[src][idx] = 1.
 *             self.sample_probs[src][idx] = 1./degree
 *             self.sample_index[src][dst] = idx             # <<<<<<<<<<<<<<
 *             idx += 1
 * 
 */
    ((__pyx_v_self->sample_index[__pyx_v_src])[__pyx_v_dst]) = __pyx_v_idx;

    /* "cython_sampler.pyx":93
 *             self.sample_probs[src][idx] = 1./degree
 *             self.sample_index[src][dst] = idx
 *             idx += 1             # <<<<<<<<<<<<<<
 * 
 *     def get_degree(self, int src):
 */
    __pyx_v_idx = (__pyx_v_idx + 1);
  }

  /* "cython_sampler.pyx":72
 *             self.c_init(src, dst_list)
 * 
 *     cdef void c_init(self, int src, np.ndarray[int,ndim=1,mode='c'] dst_list):             # <<<<<<<<<<<<<<
 *         cdef vector[int] dst_vec
 *         cutils.npy2vec_int(dst_list, dst_vec)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dst_list.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("cython_sampler.Sampler.c_init", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dst_list.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
}

/* "cython_sampler.pyx":95
 *             idx += 1
 * 
 *     def get_degree(self, int src):             # <<<<<<<<<<<<<<
 *         return self.degree[src]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14cython_sampler_7Sampler_5get_degree(PyObject *__pyx_v_self, PyObject *__pyx_arg_src); /*proto*/
static PyObject *__pyx_pw_14cython_sampler_7Sampler_5get_degree(PyObject *__pyx_v_self, PyObject *__pyx_arg_src) {
  int __pyx_v_src;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_degree (wrapper)", 0);
  assert(__pyx_arg_src); {
    __pyx_v_src = __Pyx_PyInt_As_int(__pyx_arg_src); if (unlikely((__pyx_v_src == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 95, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cython_sampler.Sampler.get_degree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14cython_sampler_7Sampler_4get_degree(((struct __pyx_obj_14cython_sampler_Sampler *)__pyx_v_self), ((int)__pyx_v_src));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14cython_sampler_7Sampler_4get_degree(struct __pyx_obj_14cython_sampler_Sampler *__pyx_v_self, int __pyx_v_src) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_degree", 0);

  /* "cython_sampler.pyx":96
 * 
 *     def get_degree(self, int src):
 *         return self.degree[src]             # <<<<<<<<<<<<<<
 * 
 *     def get_sample_probs(self, int src, int dst):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_self->degree[__pyx_v_src])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython_sampler.pyx":95
 *             idx += 1
 * 
 *     def get_degree(self, int src):             # <<<<<<<<<<<<<<
 *         return self.degree[src]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cython_sampler.Sampler.get_degree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython_sampler.pyx":98
 *         return self.degree[src]
 * 
 *     def get_sample_probs(self, int src, int dst):             # <<<<<<<<<<<<<<
 *         cdef int idx = self.sample_index[src][dst]
 *         return self.sample_probs[src][idx]
 */

/* Python wrapper */
static PyObject *__pyx_pw_14cython_sampler_7Sampler_7get_sample_probs(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14cython_sampler_7Sampler_7get_sample_probs(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_src;
  int __pyx_v_dst;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_sample_probs (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_src,&__pyx_n_s_dst,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_src)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dst)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_sample_probs", 1, 2, 2, 1); __PYX_ERR(0, 98, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_sample_probs") < 0)) __PYX_ERR(0, 98, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_src = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_src == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 98, __pyx_L3_error)
    __pyx_v_dst = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_dst == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 98, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_sample_probs", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 98, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cython_sampler.Sampler.get_sample_probs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14cython_sampler_7Sampler_6get_sample_probs(((struct __pyx_obj_14cython_sampler_Sampler *)__pyx_v_self), __pyx_v_src, __pyx_v_dst);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14cython_sampler_7Sampler_6get_sample_probs(struct __pyx_obj_14cython_sampler_Sampler *__pyx_v_self, int __pyx_v_src, int __pyx_v_dst) {
  int __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_sample_probs", 0);

  /* "cython_sampler.pyx":99
 * 
 *     def get_sample_probs(self, int src, int dst):
 *         cdef int idx = self.sample_index[src][dst]             # <<<<<<<<<<<<<<
 *         return self.sample_probs[src][idx]
 * 
 */
  __pyx_v_idx = ((__pyx_v_self->sample_index[__pyx_v_src])[__pyx_v_dst]);

  /* "cython_sampler.pyx":100
 *     def get_sample_probs(self, int src, int dst):
 *         cdef int idx = self.sample_index[src][dst]
 *         return self.sample_probs[src][idx]             # <<<<<<<<<<<<<<
 * 
 *     def get_sample_probs_list(self, int src):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_self->sample_probs[__pyx_v_src])[__pyx_v_idx])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython_sampler.pyx":98
 *         return self.degree[src]
 * 
 *     def get_sample_probs(self, int src, int dst):             # <<<<<<<<<<<<<<
 *         cdef int idx = self.sample_index[src][dst]
 *         return self.sample_probs[src][idx]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cython_sampler.Sampler.get_sample_probs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython_sampler.pyx":102
 *         return self.sample_probs[src][idx]
 * 
 *     def get_sample_probs_list(self, int src):             # <<<<<<<<<<<<<<
 *         return self.sample_probs[src]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14cython_sampler_7Sampler_9get_sample_probs_list(PyObject *__pyx_v_self, PyObject *__pyx_arg_src); /*proto*/
static PyObject *__pyx_pw_14cython_sampler_7Sampler_9get_sample_probs_list(PyObject *__pyx_v_self, PyObject *__pyx_arg_src) {
  int __pyx_v_src;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_sample_probs_list (wrapper)", 0);
  assert(__pyx_arg_src); {
    __pyx_v_src = __Pyx_PyInt_As_int(__pyx_arg_src); if (unlikely((__pyx_v_src == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 102, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cython_sampler.Sampler.get_sample_probs_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14cython_sampler_7Sampler_8get_sample_probs_list(((struct __pyx_obj_14cython_sampler_Sampler *)__pyx_v_self), ((int)__pyx_v_src));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14cython_sampler_7Sampler_8get_sample_probs_list(struct __pyx_obj_14cython_sampler_Sampler *__pyx_v_self, int __pyx_v_src) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_sample_probs_list", 0);

  /* "cython_sampler.pyx":103
 * 
 *     def get_sample_probs_list(self, int src):
 *         return self.sample_probs[src]             # <<<<<<<<<<<<<<
 * 
 *     def get_sample_weights(self, int src):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_double((__pyx_v_self->sample_probs[__pyx_v_src])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython_sampler.pyx":102
 *         return self.sample_probs[src][idx]
 * 
 *     def get_sample_probs_list(self, int src):             # <<<<<<<<<<<<<<
 *         return self.sample_probs[src]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cython_sampler.Sampler.get_sample_probs_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython_sampler.pyx":105
 *         return self.sample_probs[src]
 * 
 *     def get_sample_weights(self, int src):             # <<<<<<<<<<<<<<
 *         return self.sample_weights[src]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14cython_sampler_7Sampler_11get_sample_weights(PyObject *__pyx_v_self, PyObject *__pyx_arg_src); /*proto*/
static PyObject *__pyx_pw_14cython_sampler_7Sampler_11get_sample_weights(PyObject *__pyx_v_self, PyObject *__pyx_arg_src) {
  int __pyx_v_src;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_sample_weights (wrapper)", 0);
  assert(__pyx_arg_src); {
    __pyx_v_src = __Pyx_PyInt_As_int(__pyx_arg_src); if (unlikely((__pyx_v_src == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 105, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cython_sampler.Sampler.get_sample_weights", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14cython_sampler_7Sampler_10get_sample_weights(((struct __pyx_obj_14cython_sampler_Sampler *)__pyx_v_self), ((int)__pyx_v_src));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14cython_sampler_7Sampler_10get_sample_weights(struct __pyx_obj_14cython_sampler_Sampler *__pyx_v_self, int __pyx_v_src) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_sample_weights", 0);

  /* "cython_sampler.pyx":106
 * 
 *     def get_sample_weights(self, int src):
 *         return self.sample_weights[src]             # <<<<<<<<<<<<<<
 * 
 *     def update(self, np.ndarray[int,ndim=1,mode='c'] np_src_list,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_double((__pyx_v_self->sample_weights[__pyx_v_src])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cython_sampler.pyx":105
 *         return self.sample_probs[src]
 * 
 *     def get_sample_weights(self, int src):             # <<<<<<<<<<<<<<
 *         return self.sample_weights[src]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cython_sampler.Sampler.get_sample_weights", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython_sampler.pyx":108
 *         return self.sample_weights[src]
 * 
 *     def update(self, np.ndarray[int,ndim=1,mode='c'] np_src_list,             # <<<<<<<<<<<<<<
 *                np.ndarray[int,ndim=1,mode='c'] np_dst_list,
 *                np.ndarray[float,ndim=1,mode='c'] np_att_list):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14cython_sampler_7Sampler_13update(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14cython_sampler_7Sampler_13update(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyArrayObject *__pyx_v_np_src_list = 0;
  CYTHON_UNUSED PyArrayObject *__pyx_v_np_dst_list = 0;
  CYTHON_UNUSED PyArrayObject *__pyx_v_np_att_list = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_np_src_list,&__pyx_n_s_np_dst_list,&__pyx_n_s_np_att_list,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_np_src_list)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_np_dst_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("update", 1, 3, 3, 1); __PYX_ERR(0, 108, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_np_att_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("update", 1, 3, 3, 2); __PYX_ERR(0, 108, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "update") < 0)) __PYX_ERR(0, 108, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_np_src_list = ((PyArrayObject *)values[0]);
    __pyx_v_np_dst_list = ((PyArrayObject *)values[1]);
    __pyx_v_np_att_list = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 108, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cython_sampler.Sampler.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_np_src_list), __pyx_ptype_5numpy_ndarray, 1, "np_src_list", 0))) __PYX_ERR(0, 108, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_np_dst_list), __pyx_ptype_5numpy_ndarray, 1, "np_dst_list", 0))) __PYX_ERR(0, 109, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_np_att_list), __pyx_ptype_5numpy_ndarray, 1, "np_att_list", 0))) __PYX_ERR(0, 110, __pyx_L1_error)
  __pyx_r = __pyx_pf_14cython_sampler_7Sampler_12update(((struct __pyx_obj_14cython_sampler_Sampler *)__pyx_v_self), __pyx_v_np_src_list, __pyx_v_np_dst_list, __pyx_v_np_att_list);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14cython_sampler_7Sampler_12update(CYTHON_UNUSED struct __pyx_obj_14cython_sampler_Sampler *__pyx_v_self, CYTHON_UNUSED PyArrayObject *__pyx_v_np_src_list, CYTHON_UNUSED PyArrayObject *__pyx_v_np_dst_list, CYTHON_UNUSED PyArrayObject *__pyx_v_np_att_list) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_np_att_list;
  __Pyx_Buffer __pyx_pybuffer_np_att_list;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_np_dst_list;
  __Pyx_Buffer __pyx_pybuffer_np_dst_list;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_np_src_list;
  __Pyx_Buffer __pyx_pybuffer_np_src_list;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update", 0);
  __pyx_pybuffer_np_src_list.pybuffer.buf = NULL;
  __pyx_pybuffer_np_src_list.refcount = 0;
  __pyx_pybuffernd_np_src_list.data = NULL;
  __pyx_pybuffernd_np_src_list.rcbuffer = &__pyx_pybuffer_np_src_list;
  __pyx_pybuffer_np_dst_list.pybuffer.buf = NULL;
  __pyx_pybuffer_np_dst_list.refcount = 0;
  __pyx_pybuffernd_np_dst_list.data = NULL;
  __pyx_pybuffernd_np_dst_list.rcbuffer = &__pyx_pybuffer_np_dst_list;
  __pyx_pybuffer_np_att_list.pybuffer.buf = NULL;
  __pyx_pybuffer_np_att_list.refcount = 0;
  __pyx_pybuffernd_np_att_list.data = NULL;
  __pyx_pybuffernd_np_att_list.rcbuffer = &__pyx_pybuffer_np_att_list;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_np_src_list.rcbuffer->pybuffer, (PyObject*)__pyx_v_np_src_list, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 108, __pyx_L1_error)
  }
  __pyx_pybuffernd_np_src_list.diminfo[0].strides = __pyx_pybuffernd_np_src_list.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_np_src_list.diminfo[0].shape = __pyx_pybuffernd_np_src_list.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_np_dst_list.rcbuffer->pybuffer, (PyObject*)__pyx_v_np_dst_list, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 108, __pyx_L1_error)
  }
  __pyx_pybuffernd_np_dst_list.diminfo[0].strides = __pyx_pybuffernd_np_dst_list.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_np_dst_list.diminfo[0].shape = __pyx_pybuffernd_np_dst_list.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_np_att_list.rcbuffer->pybuffer, (PyObject*)__pyx_v_np_att_list, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 108, __pyx_L1_error)
  }
  __pyx_pybuffernd_np_att_list.diminfo[0].strides = __pyx_pybuffernd_np_att_list.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_np_att_list.diminfo[0].shape = __pyx_pybuffernd_np_att_list.rcbuffer->pybuffer.shape[0];

  /* "cython_sampler.pyx":111
 *                np.ndarray[int,ndim=1,mode='c'] np_dst_list,
 *                np.ndarray[float,ndim=1,mode='c'] np_att_list):
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def sample(self, int node, int sample_size):
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 111, __pyx_L1_error)

  /* "cython_sampler.pyx":108
 *         return self.sample_weights[src]
 * 
 *     def update(self, np.ndarray[int,ndim=1,mode='c'] np_src_list,             # <<<<<<<<<<<<<<
 *                np.ndarray[int,ndim=1,mode='c'] np_dst_list,
 *                np.ndarray[float,ndim=1,mode='c'] np_att_list):
 */

  /* function exit code */
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_np_att_list.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_np_dst_list.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_np_src_list.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cython_sampler.Sampler.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_np_att_list.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_np_dst_list.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_np_src_list.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython_sampler.pyx":113
 *         raise NotImplementedError
 * 
 *     def sample(self, int node, int sample_size):             # <<<<<<<<<<<<<<
 *         degree = self.degree[node]
 *         neighbors = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_14cython_sampler_7Sampler_15sample(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14cython_sampler_7Sampler_15sample(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_node;
  int __pyx_v_sample_size;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sample (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node,&__pyx_n_s_sample_size,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_node)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sample_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sample", 1, 2, 2, 1); __PYX_ERR(0, 113, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sample") < 0)) __PYX_ERR(0, 113, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_node = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_node == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 113, __pyx_L3_error)
    __pyx_v_sample_size = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_sample_size == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 113, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sample", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 113, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cython_sampler.Sampler.sample", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14cython_sampler_7Sampler_14sample(((struct __pyx_obj_14cython_sampler_Sampler *)__pyx_v_self), __pyx_v_node, __pyx_v_sample_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14cython_sampler_7Sampler_14sample(struct __pyx_obj_14cython_sampler_Sampler *__pyx_v_self, int __pyx_v_node, int __pyx_v_sample_size) {
  int __pyx_v_degree;
  PyObject *__pyx_v_neighbors = NULL;
  PyObject *__pyx_v_probs = NULL;
  PyObject *__pyx_7genexpr__pyx_v_x = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("sample", 0);

  /* "cython_sampler.pyx":114
 * 
 *     def sample(self, int node, int sample_size):
 *         degree = self.degree[node]             # <<<<<<<<<<<<<<
 *         neighbors = []
 *         if sample_size >= degree:
 */
  __pyx_v_degree = (__pyx_v_self->degree[__pyx_v_node]);

  /* "cython_sampler.pyx":115
 *     def sample(self, int node, int sample_size):
 *         degree = self.degree[node]
 *         neighbors = []             # <<<<<<<<<<<<<<
 *         if sample_size >= degree:
 *             return []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_neighbors = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cython_sampler.pyx":116
 *         degree = self.degree[node]
 *         neighbors = []
 *         if sample_size >= degree:             # <<<<<<<<<<<<<<
 *             return []
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_sample_size >= __pyx_v_degree) != 0);
  if (__pyx_t_2) {

    /* "cython_sampler.pyx":117
 *         neighbors = []
 *         if sample_size >= degree:
 *             return []             # <<<<<<<<<<<<<<
 *         else:
 *             probs = [x for x in self.sample_probs[node][:degree]]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cython_sampler.pyx":116
 *         degree = self.degree[node]
 *         neighbors = []
 *         if sample_size >= degree:             # <<<<<<<<<<<<<<
 *             return []
 *         else:
 */
  }

  /* "cython_sampler.pyx":119
 *             return []
 *         else:
 *             probs = [x for x in self.sample_probs[node][:degree]]             # <<<<<<<<<<<<<<
 *             print(probs)
 *             neighbors = np.random.choice(probs, sample_size, p=probs, replace=False)
 */
  /*else*/ {
    { /* enter inner scope */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 119, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __pyx_convert_vector_to_py_double((__pyx_v_self->sample_probs[__pyx_v_node])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 119, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_GetSlice(__pyx_t_3, 0, __pyx_v_degree, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 119, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
        __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
        __pyx_t_6 = NULL;
      } else {
        __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 119, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 119, __pyx_L6_error)
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (;;) {
        if (likely(!__pyx_t_6)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 119, __pyx_L6_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 119, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          } else {
            if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 119, __pyx_L6_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 119, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          }
        } else {
          __pyx_t_4 = __pyx_t_6(__pyx_t_3);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 119, __pyx_L6_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_x, __pyx_t_4);
        __pyx_t_4 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_7genexpr__pyx_v_x))) __PYX_ERR(0, 119, __pyx_L6_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_x); __pyx_7genexpr__pyx_v_x = 0;
      goto __pyx_L9_exit_scope;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_x); __pyx_7genexpr__pyx_v_x = 0;
      goto __pyx_L1_error;
      __pyx_L9_exit_scope:;
    } /* exit inner scope */
    __pyx_v_probs = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cython_sampler.pyx":120
 *         else:
 *             probs = [x for x in self.sample_probs[node][:degree]]
 *             print(probs)             # <<<<<<<<<<<<<<
 *             neighbors = np.random.choice(probs, sample_size, p=probs, replace=False)
 *         return neighbors
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_v_probs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "cython_sampler.pyx":121
 *             probs = [x for x in self.sample_probs[node][:degree]]
 *             print(probs)
 *             neighbors = np.random.choice(probs, sample_size, p=probs, replace=False)             # <<<<<<<<<<<<<<
 *         return neighbors
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_random); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_choice); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_sample_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_probs);
    __Pyx_GIVEREF(__pyx_v_probs);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_probs);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_p, __pyx_v_probs) < 0) __PYX_ERR(0, 121, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_replace, Py_False) < 0) __PYX_ERR(0, 121, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_neighbors, __pyx_t_7);
    __pyx_t_7 = 0;
  }

  /* "cython_sampler.pyx":122
 *             print(probs)
 *             neighbors = np.random.choice(probs, sample_size, p=probs, replace=False)
 *         return neighbors             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_neighbors);
  __pyx_r = __pyx_v_neighbors;
  goto __pyx_L0;

  /* "cython_sampler.pyx":113
 *         raise NotImplementedError
 * 
 *     def sample(self, int node, int sample_size):             # <<<<<<<<<<<<<<
 *         degree = self.degree[node]
 *         neighbors = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cython_sampler.Sampler.sample", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_neighbors);
  __Pyx_XDECREF(__pyx_v_probs);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14cython_sampler_7Sampler_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14cython_sampler_7Sampler_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14cython_sampler_7Sampler_16__reduce_cython__(((struct __pyx_obj_14cython_sampler_Sampler *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14cython_sampler_7Sampler_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14cython_sampler_Sampler *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cython_sampler.Sampler.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14cython_sampler_7Sampler_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14cython_sampler_7Sampler_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14cython_sampler_7Sampler_18__setstate_cython__(((struct __pyx_obj_14cython_sampler_Sampler *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14cython_sampler_7Sampler_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14cython_sampler_Sampler *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cython_sampler.Sampler.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython_sampler.pyx":126
 * 
 * cdef class BanditSampler(Sampler):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_14cython_sampler_13BanditSampler_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14cython_sampler_13BanditSampler_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_14cython_sampler_13BanditSampler___cinit__(((struct __pyx_obj_14cython_sampler_BanditSampler *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14cython_sampler_13BanditSampler___cinit__(CYTHON_UNUSED struct __pyx_obj_14cython_sampler_BanditSampler *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython_sampler.pyx":129
 *         pass
 * 
 *     def update(self, np.ndarray[int,ndim=1,mode='c'] np_src_list,             # <<<<<<<<<<<<<<
 *                np.ndarray[int,ndim=1,mode='c'] np_dst_list,
 *                np.ndarray[float,ndim=1,mode='c'] np_att_list):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14cython_sampler_13BanditSampler_3update(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14cython_sampler_13BanditSampler_3update(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_np_src_list = 0;
  PyArrayObject *__pyx_v_np_dst_list = 0;
  PyArrayObject *__pyx_v_np_att_list = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_np_src_list,&__pyx_n_s_np_dst_list,&__pyx_n_s_np_att_list,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_np_src_list)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_np_dst_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("update", 1, 3, 3, 1); __PYX_ERR(0, 129, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_np_att_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("update", 1, 3, 3, 2); __PYX_ERR(0, 129, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "update") < 0)) __PYX_ERR(0, 129, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_np_src_list = ((PyArrayObject *)values[0]);
    __pyx_v_np_dst_list = ((PyArrayObject *)values[1]);
    __pyx_v_np_att_list = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 129, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cython_sampler.BanditSampler.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_np_src_list), __pyx_ptype_5numpy_ndarray, 1, "np_src_list", 0))) __PYX_ERR(0, 129, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_np_dst_list), __pyx_ptype_5numpy_ndarray, 1, "np_dst_list", 0))) __PYX_ERR(0, 130, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_np_att_list), __pyx_ptype_5numpy_ndarray, 1, "np_att_list", 0))) __PYX_ERR(0, 131, __pyx_L1_error)
  __pyx_r = __pyx_pf_14cython_sampler_13BanditSampler_2update(((struct __pyx_obj_14cython_sampler_BanditSampler *)__pyx_v_self), __pyx_v_np_src_list, __pyx_v_np_dst_list, __pyx_v_np_att_list);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14cython_sampler_13BanditSampler_2update(struct __pyx_obj_14cython_sampler_BanditSampler *__pyx_v_self, PyArrayObject *__pyx_v_np_src_list, PyArrayObject *__pyx_v_np_dst_list, PyArrayObject *__pyx_v_np_att_list) {
  std::vector<int>  __pyx_v_src_list;
  std::vector<int>  __pyx_v_dst_list;
  std::vector<float>  __pyx_v_att_list;
  int __pyx_v_num_data;
  std::unordered_map<int,std::unordered_map<int,int> >  __pyx_v_att_map;
  int __pyx_v_i;
  int __pyx_v_p;
  int __pyx_v_neighbor_limit;
  float __pyx_v_delta;
  float __pyx_v_eta;
  PyObject *__pyx_v_np_src_set = NULL;
  std::vector<int>  __pyx_v_src_set;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_np_att_list;
  __Pyx_Buffer __pyx_pybuffer_np_att_list;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_np_dst_list;
  __Pyx_Buffer __pyx_pybuffer_np_dst_list;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_np_src_list;
  __Pyx_Buffer __pyx_pybuffer_np_src_list;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  float __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("update", 0);
  __pyx_pybuffer_np_src_list.pybuffer.buf = NULL;
  __pyx_pybuffer_np_src_list.refcount = 0;
  __pyx_pybuffernd_np_src_list.data = NULL;
  __pyx_pybuffernd_np_src_list.rcbuffer = &__pyx_pybuffer_np_src_list;
  __pyx_pybuffer_np_dst_list.pybuffer.buf = NULL;
  __pyx_pybuffer_np_dst_list.refcount = 0;
  __pyx_pybuffernd_np_dst_list.data = NULL;
  __pyx_pybuffernd_np_dst_list.rcbuffer = &__pyx_pybuffer_np_dst_list;
  __pyx_pybuffer_np_att_list.pybuffer.buf = NULL;
  __pyx_pybuffer_np_att_list.refcount = 0;
  __pyx_pybuffernd_np_att_list.data = NULL;
  __pyx_pybuffernd_np_att_list.rcbuffer = &__pyx_pybuffer_np_att_list;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_np_src_list.rcbuffer->pybuffer, (PyObject*)__pyx_v_np_src_list, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 129, __pyx_L1_error)
  }
  __pyx_pybuffernd_np_src_list.diminfo[0].strides = __pyx_pybuffernd_np_src_list.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_np_src_list.diminfo[0].shape = __pyx_pybuffernd_np_src_list.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_np_dst_list.rcbuffer->pybuffer, (PyObject*)__pyx_v_np_dst_list, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 129, __pyx_L1_error)
  }
  __pyx_pybuffernd_np_dst_list.diminfo[0].strides = __pyx_pybuffernd_np_dst_list.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_np_dst_list.diminfo[0].shape = __pyx_pybuffernd_np_dst_list.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_np_att_list.rcbuffer->pybuffer, (PyObject*)__pyx_v_np_att_list, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 129, __pyx_L1_error)
  }
  __pyx_pybuffernd_np_att_list.diminfo[0].strides = __pyx_pybuffernd_np_att_list.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_np_att_list.diminfo[0].shape = __pyx_pybuffernd_np_att_list.rcbuffer->pybuffer.shape[0];

  /* "cython_sampler.pyx":135
 *         cdef vector[int] dst_list
 *         cdef vector[float] att_list
 *         cutils.npy2vec_int(np_src_list, src_list)             # <<<<<<<<<<<<<<
 *         cutils.npy2vec_int(np_dst_list, dst_list)
 *         cutils.npy2vec_float(np_att_list, att_list)
 */
  __pyx_f_12cython_utils_npy2vec_int(((PyArrayObject *)__pyx_v_np_src_list), __pyx_v_src_list);

  /* "cython_sampler.pyx":136
 *         cdef vector[float] att_list
 *         cutils.npy2vec_int(np_src_list, src_list)
 *         cutils.npy2vec_int(np_dst_list, dst_list)             # <<<<<<<<<<<<<<
 *         cutils.npy2vec_float(np_att_list, att_list)
 * 
 */
  __pyx_f_12cython_utils_npy2vec_int(((PyArrayObject *)__pyx_v_np_dst_list), __pyx_v_dst_list);

  /* "cython_sampler.pyx":137
 *         cutils.npy2vec_int(np_src_list, src_list)
 *         cutils.npy2vec_int(np_dst_list, dst_list)
 *         cutils.npy2vec_float(np_att_list, att_list)             # <<<<<<<<<<<<<<
 * 
 *         # att indice map
 */
  __pyx_f_12cython_utils_npy2vec_float(((PyArrayObject *)__pyx_v_np_att_list), __pyx_v_att_list);

  /* "cython_sampler.pyx":140
 * 
 *         # att indice map
 *         cdef int num_data = src_list.size()             # <<<<<<<<<<<<<<
 *         cdef unordered_map[int, unordered_map[int,int]] att_map
 *         cdef int i = 0
 */
  __pyx_v_num_data = __pyx_v_src_list.size();

  /* "cython_sampler.pyx":142
 *         cdef int num_data = src_list.size()
 *         cdef unordered_map[int, unordered_map[int,int]] att_map
 *         cdef int i = 0             # <<<<<<<<<<<<<<
 *         while i < num_data:
 *             att_map[src_list[i]][dst_list[i]] = i
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":143
 *         cdef unordered_map[int, unordered_map[int,int]] att_map
 *         cdef int i = 0
 *         while i < num_data:             # <<<<<<<<<<<<<<
 *             att_map[src_list[i]][dst_list[i]] = i
 *             i += 1
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_i < __pyx_v_num_data) != 0);
    if (!__pyx_t_1) break;

    /* "cython_sampler.pyx":144
 *         cdef int i = 0
 *         while i < num_data:
 *             att_map[src_list[i]][dst_list[i]] = i             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
    ((__pyx_v_att_map[(__pyx_v_src_list[__pyx_v_i])])[(__pyx_v_dst_list[__pyx_v_i])]) = __pyx_v_i;

    /* "cython_sampler.pyx":145
 *         while i < num_data:
 *             att_map[src_list[i]][dst_list[i]] = i
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 *         cdef int p = 0
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cython_sampler.pyx":147
 *             i += 1
 * 
 *         cdef int p = 0             # <<<<<<<<<<<<<<
 *         cdef int neighbor_limit = FLAGS.neighbor_limit
 *         cdef float delta = FLAGS.delta
 */
  __pyx_v_p = 0;

  /* "cython_sampler.pyx":148
 * 
 *         cdef int p = 0
 *         cdef int neighbor_limit = FLAGS.neighbor_limit             # <<<<<<<<<<<<<<
 *         cdef float delta = FLAGS.delta
 *         with nogil, parallel(num_threads=self.num_proc):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_FLAGS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_neighbor_limit); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_neighbor_limit = __pyx_t_4;

  /* "cython_sampler.pyx":149
 *         cdef int p = 0
 *         cdef int neighbor_limit = FLAGS.neighbor_limit
 *         cdef float delta = FLAGS.delta             # <<<<<<<<<<<<<<
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_FLAGS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_delta); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_delta = __pyx_t_5;

  /* "cython_sampler.pyx":150
 *         cdef int neighbor_limit = FLAGS.neighbor_limit
 *         cdef float delta = FLAGS.delta
 *         with nogil, parallel(num_threads=self.num_proc):             # <<<<<<<<<<<<<<
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.update_sample_weights(
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            #ifdef _OPENMP
            #pragma omp parallel  private(__pyx_t_4, __pyx_t_6, __pyx_t_7) num_threads(__pyx_v_self->__pyx_base.num_proc)
            #endif /* _OPENMP */
            {

                /* "cython_sampler.pyx":151
 *         cdef float delta = FLAGS.delta
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):             # <<<<<<<<<<<<<<
 *                 self.update_sample_weights(
 *                         att_map, p, num_data, src_list, dst_list, att_list,
 */
                __pyx_t_4 = __pyx_v_self->__pyx_base.num_proc;
                if (1 == 0) abort();
                {
                    __pyx_t_7 = (__pyx_t_4 - 0 + 1 - 1/abs(1)) / 1;
                    if (__pyx_t_7 > 0)
                    {
                        #ifdef _OPENMP
                        #pragma omp for firstprivate(__pyx_v_p) lastprivate(__pyx_v_p) schedule(dynamic)
                        #endif /* _OPENMP */
                        for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_7; __pyx_t_6++){
                            {
                                __pyx_v_p = (int)(0 + 1 * __pyx_t_6);

                                /* "cython_sampler.pyx":152
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.update_sample_weights(             # <<<<<<<<<<<<<<
 *                         att_map, p, num_data, src_list, dst_list, att_list,
 *                         neighbor_limit, delta)
 */
                                ((struct __pyx_vtabstruct_14cython_sampler_BanditSampler *)__pyx_v_self->__pyx_base.__pyx_vtab)->update_sample_weights(__pyx_v_self, __pyx_v_att_map, __pyx_v_p, __pyx_v_num_data, __pyx_v_src_list, __pyx_v_dst_list, __pyx_v_att_list, __pyx_v_neighbor_limit, __pyx_v_delta);
                            }
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "cython_sampler.pyx":150
 *         cdef int neighbor_limit = FLAGS.neighbor_limit
 *         cdef float delta = FLAGS.delta
 *         with nogil, parallel(num_threads=self.num_proc):             # <<<<<<<<<<<<<<
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.update_sample_weights(
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L7;
        }
        __pyx_L7:;
      }
  }

  /* "cython_sampler.pyx":156
 *                         neighbor_limit, delta)
 * 
 *         cdef float eta = FLAGS.eta             # <<<<<<<<<<<<<<
 *         np_src_set = np.array(list(set(np_src_list)))
 *         cdef vector[int] src_set
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_FLAGS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_eta); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_eta = __pyx_t_5;

  /* "cython_sampler.pyx":157
 * 
 *         cdef float eta = FLAGS.eta
 *         np_src_set = np.array(list(set(np_src_list)))             # <<<<<<<<<<<<<<
 *         cdef vector[int] src_set
 *         cutils.npy2vec_int(np_src_set, src_set)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySet_New(((PyObject *)__pyx_v_np_src_list)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = PySequence_List(__pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_2, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_np_src_set = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cython_sampler.pyx":159
 *         np_src_set = np.array(list(set(np_src_list)))
 *         cdef vector[int] src_set
 *         cutils.npy2vec_int(np_src_set, src_set)             # <<<<<<<<<<<<<<
 *         num_data = src_set.size()
 *         with nogil, parallel(num_threads=self.num_proc):
 */
  if (!(likely(((__pyx_v_np_src_set) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_np_src_set, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 159, __pyx_L1_error)
  __pyx_f_12cython_utils_npy2vec_int(((PyArrayObject *)__pyx_v_np_src_set), __pyx_v_src_set);

  /* "cython_sampler.pyx":160
 *         cdef vector[int] src_set
 *         cutils.npy2vec_int(np_src_set, src_set)
 *         num_data = src_set.size()             # <<<<<<<<<<<<<<
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):
 */
  __pyx_v_num_data = __pyx_v_src_set.size();

  /* "cython_sampler.pyx":161
 *         cutils.npy2vec_int(np_src_set, src_set)
 *         num_data = src_set.size()
 *         with nogil, parallel(num_threads=self.num_proc):             # <<<<<<<<<<<<<<
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.update_sample_probs(p, num_data, src_set, eta)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            #ifdef _OPENMP
            #pragma omp parallel  private(__pyx_t_4, __pyx_t_6, __pyx_t_7) num_threads(__pyx_v_self->__pyx_base.num_proc)
            #endif /* _OPENMP */
            {

                /* "cython_sampler.pyx":162
 *         num_data = src_set.size()
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):             # <<<<<<<<<<<<<<
 *                 self.update_sample_probs(p, num_data, src_set, eta)
 * 
 */
                __pyx_t_7 = __pyx_v_self->__pyx_base.num_proc;
                if (1 == 0) abort();
                {
                    __pyx_t_4 = (__pyx_t_7 - 0 + 1 - 1/abs(1)) / 1;
                    if (__pyx_t_4 > 0)
                    {
                        #ifdef _OPENMP
                        #pragma omp for firstprivate(__pyx_v_p) lastprivate(__pyx_v_p) schedule(dynamic)
                        #endif /* _OPENMP */
                        for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_4; __pyx_t_6++){
                            {
                                __pyx_v_p = (int)(0 + 1 * __pyx_t_6);

                                /* "cython_sampler.pyx":163
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.update_sample_probs(p, num_data, src_set, eta)             # <<<<<<<<<<<<<<
 * 
 *     # disable index bounds checking and negative indexing for speedups
 */
                                ((struct __pyx_vtabstruct_14cython_sampler_BanditSampler *)__pyx_v_self->__pyx_base.__pyx_vtab)->update_sample_probs(__pyx_v_self, __pyx_v_p, __pyx_v_num_data, __pyx_v_src_set, __pyx_v_eta);
                            }
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "cython_sampler.pyx":161
 *         cutils.npy2vec_int(np_src_set, src_set)
 *         num_data = src_set.size()
 *         with nogil, parallel(num_threads=self.num_proc):             # <<<<<<<<<<<<<<
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.update_sample_probs(p, num_data, src_set, eta)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L22;
        }
        __pyx_L22:;
      }
  }

  /* "cython_sampler.pyx":129
 *         pass
 * 
 *     def update(self, np.ndarray[int,ndim=1,mode='c'] np_src_list,             # <<<<<<<<<<<<<<
 *                np.ndarray[int,ndim=1,mode='c'] np_dst_list,
 *                np.ndarray[float,ndim=1,mode='c'] np_att_list):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_np_att_list.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_np_dst_list.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_np_src_list.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cython_sampler.BanditSampler.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_np_att_list.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_np_dst_list.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_np_src_list.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_np_src_set);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython_sampler.pyx":168
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void update_sample_weights(             # <<<<<<<<<<<<<<
 *             self, unordered_map[int, unordered_map[int,int]]& att_map,
 *             int p, int num_data, vector[int]& src_list, vector[int]& dst_list,
 */

static void __pyx_f_14cython_sampler_13BanditSampler_update_sample_weights(struct __pyx_obj_14cython_sampler_BanditSampler *__pyx_v_self, std::unordered_map<int,std::unordered_map<int,int> >  &__pyx_v_att_map, int __pyx_v_p, int __pyx_v_num_data, std::vector<int>  &__pyx_v_src_list, std::vector<int>  &__pyx_v_dst_list, std::vector<float>  &__pyx_v_att_list, int __pyx_v_neighbor_limit, float __pyx_v_delta) {
  int __pyx_v_i;
  int __pyx_v_src;
  int __pyx_v_dst;
  int __pyx_v_degree;
  int __pyx_v_idx;
  float __pyx_v_att_val;
  float __pyx_v_reward;
  int __pyx_t_1;
  long __pyx_t_2;
  float __pyx_t_3;
  double __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;

  /* "cython_sampler.pyx":172
 *             int p, int num_data, vector[int]& src_list, vector[int]& dst_list,
 *             vector[float]& att_list, int neighbor_limit, float delta) nogil:
 *         cdef int i = 0             # <<<<<<<<<<<<<<
 *         cdef int src = 0
 *         cdef int dst = 0
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":173
 *             vector[float]& att_list, int neighbor_limit, float delta) nogil:
 *         cdef int i = 0
 *         cdef int src = 0             # <<<<<<<<<<<<<<
 *         cdef int dst = 0
 *         cdef int degree = 0
 */
  __pyx_v_src = 0;

  /* "cython_sampler.pyx":174
 *         cdef int i = 0
 *         cdef int src = 0
 *         cdef int dst = 0             # <<<<<<<<<<<<<<
 *         cdef int degree = 0
 *         cdef int idx = 0
 */
  __pyx_v_dst = 0;

  /* "cython_sampler.pyx":175
 *         cdef int src = 0
 *         cdef int dst = 0
 *         cdef int degree = 0             # <<<<<<<<<<<<<<
 *         cdef int idx = 0
 *         cdef float att_val = 0.
 */
  __pyx_v_degree = 0;

  /* "cython_sampler.pyx":176
 *         cdef int dst = 0
 *         cdef int degree = 0
 *         cdef int idx = 0             # <<<<<<<<<<<<<<
 *         cdef float att_val = 0.
 *         cdef float reward = 0.
 */
  __pyx_v_idx = 0;

  /* "cython_sampler.pyx":177
 *         cdef int degree = 0
 *         cdef int idx = 0
 *         cdef float att_val = 0.             # <<<<<<<<<<<<<<
 *         cdef float reward = 0.
 *         while i < num_data:
 */
  __pyx_v_att_val = 0.;

  /* "cython_sampler.pyx":178
 *         cdef int idx = 0
 *         cdef float att_val = 0.
 *         cdef float reward = 0.             # <<<<<<<<<<<<<<
 *         while i < num_data:
 *             if i % self.num_proc != p:
 */
  __pyx_v_reward = 0.;

  /* "cython_sampler.pyx":179
 *         cdef float att_val = 0.
 *         cdef float reward = 0.
 *         while i < num_data:             # <<<<<<<<<<<<<<
 *             if i % self.num_proc != p:
 *                 i += 1
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_i < __pyx_v_num_data) != 0);
    if (!__pyx_t_1) break;

    /* "cython_sampler.pyx":180
 *         cdef float reward = 0.
 *         while i < num_data:
 *             if i % self.num_proc != p:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    if (unlikely(__pyx_v_self->__pyx_base.num_proc == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 180, __pyx_L1_error)
    }
    __pyx_t_1 = ((__Pyx_mod_int(__pyx_v_i, __pyx_v_self->__pyx_base.num_proc) != __pyx_v_p) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":181
 *         while i < num_data:
 *             if i % self.num_proc != p:
 *                 i += 1             # <<<<<<<<<<<<<<
 *                 continue
 *             src = src_list[i]
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "cython_sampler.pyx":182
 *             if i % self.num_proc != p:
 *                 i += 1
 *                 continue             # <<<<<<<<<<<<<<
 *             src = src_list[i]
 *             dst = dst_list[i]
 */
      goto __pyx_L3_continue;

      /* "cython_sampler.pyx":180
 *         cdef float reward = 0.
 *         while i < num_data:
 *             if i % self.num_proc != p:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    }

    /* "cython_sampler.pyx":183
 *                 i += 1
 *                 continue
 *             src = src_list[i]             # <<<<<<<<<<<<<<
 *             dst = dst_list[i]
 *             degree = self.degree[src]
 */
    __pyx_v_src = (__pyx_v_src_list[__pyx_v_i]);

    /* "cython_sampler.pyx":184
 *                 continue
 *             src = src_list[i]
 *             dst = dst_list[i]             # <<<<<<<<<<<<<<
 *             degree = self.degree[src]
 *             if degree <= neighbor_limit:
 */
    __pyx_v_dst = (__pyx_v_dst_list[__pyx_v_i]);

    /* "cython_sampler.pyx":185
 *             src = src_list[i]
 *             dst = dst_list[i]
 *             degree = self.degree[src]             # <<<<<<<<<<<<<<
 *             if degree <= neighbor_limit:
 *                 i += 1
 */
    __pyx_v_degree = (__pyx_v_self->__pyx_base.degree[__pyx_v_src]);

    /* "cython_sampler.pyx":186
 *             dst = dst_list[i]
 *             degree = self.degree[src]
 *             if degree <= neighbor_limit:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    __pyx_t_1 = ((__pyx_v_degree <= __pyx_v_neighbor_limit) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":187
 *             degree = self.degree[src]
 *             if degree <= neighbor_limit:
 *                 i += 1             # <<<<<<<<<<<<<<
 *                 continue
 *             delta = delta/degree**2
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "cython_sampler.pyx":188
 *             if degree <= neighbor_limit:
 *                 i += 1
 *                 continue             # <<<<<<<<<<<<<<
 *             delta = delta/degree**2
 *             idx = self.sample_index[src][dst]
 */
      goto __pyx_L3_continue;

      /* "cython_sampler.pyx":186
 *             dst = dst_list[i]
 *             degree = self.degree[src]
 *             if degree <= neighbor_limit:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    }

    /* "cython_sampler.pyx":189
 *                 i += 1
 *                 continue
 *             delta = delta/degree**2             # <<<<<<<<<<<<<<
 *             idx = self.sample_index[src][dst]
 *             att_val = att_list[att_map[src][dst]]
 */
    __pyx_t_2 = __Pyx_pow_long(((long)__pyx_v_degree), 2);
    if (unlikely(__pyx_t_2 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 189, __pyx_L1_error)
    }
    __pyx_v_delta = (__pyx_v_delta / ((float)__pyx_t_2));

    /* "cython_sampler.pyx":190
 *                 continue
 *             delta = delta/degree**2
 *             idx = self.sample_index[src][dst]             # <<<<<<<<<<<<<<
 *             att_val = att_list[att_map[src][dst]]
 *             reward = delta*att_val**2/self.sample_probs[src][idx]**2
 */
    __pyx_v_idx = ((__pyx_v_self->__pyx_base.sample_index[__pyx_v_src])[__pyx_v_dst]);

    /* "cython_sampler.pyx":191
 *             delta = delta/degree**2
 *             idx = self.sample_index[src][dst]
 *             att_val = att_list[att_map[src][dst]]             # <<<<<<<<<<<<<<
 *             reward = delta*att_val**2/self.sample_probs[src][idx]**2
 *             if reward > self.max_reward:
 */
    __pyx_v_att_val = (__pyx_v_att_list[((__pyx_v_att_map[__pyx_v_src])[__pyx_v_dst])]);

    /* "cython_sampler.pyx":192
 *             idx = self.sample_index[src][dst]
 *             att_val = att_list[att_map[src][dst]]
 *             reward = delta*att_val**2/self.sample_probs[src][idx]**2             # <<<<<<<<<<<<<<
 *             if reward > self.max_reward:
 *                 reward = self.max_reward
 */
    __pyx_t_3 = (__pyx_v_delta * powf(__pyx_v_att_val, 2.0));
    __pyx_t_4 = pow(((double)((__pyx_v_self->__pyx_base.sample_probs[__pyx_v_src])[__pyx_v_idx])), 2.0);
    if (unlikely(__pyx_t_4 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 192, __pyx_L1_error)
    }
    __pyx_v_reward = (((double)__pyx_t_3) / __pyx_t_4);

    /* "cython_sampler.pyx":193
 *             att_val = att_list[att_map[src][dst]]
 *             reward = delta*att_val**2/self.sample_probs[src][idx]**2
 *             if reward > self.max_reward:             # <<<<<<<<<<<<<<
 *                 reward = self.max_reward
 *             self.sample_weights[src][idx] *= exp(reward)
 */
    __pyx_t_1 = ((__pyx_v_reward > __pyx_v_self->__pyx_base.max_reward) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":194
 *             reward = delta*att_val**2/self.sample_probs[src][idx]**2
 *             if reward > self.max_reward:
 *                 reward = self.max_reward             # <<<<<<<<<<<<<<
 *             self.sample_weights[src][idx] *= exp(reward)
 *             i += 1
 */
      __pyx_t_3 = __pyx_v_self->__pyx_base.max_reward;
      __pyx_v_reward = __pyx_t_3;

      /* "cython_sampler.pyx":193
 *             att_val = att_list[att_map[src][dst]]
 *             reward = delta*att_val**2/self.sample_probs[src][idx]**2
 *             if reward > self.max_reward:             # <<<<<<<<<<<<<<
 *                 reward = self.max_reward
 *             self.sample_weights[src][idx] *= exp(reward)
 */
    }

    /* "cython_sampler.pyx":195
 *             if reward > self.max_reward:
 *                 reward = self.max_reward
 *             self.sample_weights[src][idx] *= exp(reward)             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
    __pyx_t_5 = __pyx_v_src;
    __pyx_t_6 = __pyx_v_idx;
    ((__pyx_v_self->__pyx_base.sample_weights[__pyx_t_5])[__pyx_t_6]) = (((__pyx_v_self->__pyx_base.sample_weights[__pyx_t_5])[__pyx_t_6]) * exp(__pyx_v_reward));

    /* "cython_sampler.pyx":196
 *                 reward = self.max_reward
 *             self.sample_weights[src][idx] *= exp(reward)
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 *     @cython.wraparound(False)
 */
    __pyx_v_i = (__pyx_v_i + 1);
    __pyx_L3_continue:;
  }

  /* "cython_sampler.pyx":168
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void update_sample_weights(             # <<<<<<<<<<<<<<
 *             self, unordered_map[int, unordered_map[int,int]]& att_map,
 *             int p, int num_data, vector[int]& src_list, vector[int]& dst_list,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cython_sampler.BanditSampler.update_sample_weights", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
}

/* "cython_sampler.pyx":200
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void update_sample_probs(             # <<<<<<<<<<<<<<
 *             self, int p, int num_data, vector[int] src_list, float eta) nogil:
 *         cdef int i = 0
 */

static void __pyx_f_14cython_sampler_13BanditSampler_update_sample_probs(struct __pyx_obj_14cython_sampler_BanditSampler *__pyx_v_self, int __pyx_v_p, int __pyx_v_num_data, std::vector<int>  __pyx_v_src_list, float __pyx_v_eta) {
  int __pyx_v_i;
  int __pyx_v_idx;
  CYTHON_UNUSED int __pyx_v_dst;
  int __pyx_v_degree;
  double __pyx_v_unifom_prob;
  int __pyx_v_src;
  double __pyx_v_weights_sum;
  int __pyx_t_1;
  double __pyx_t_2;

  /* "cython_sampler.pyx":202
 *     cdef void update_sample_probs(
 *             self, int p, int num_data, vector[int] src_list, float eta) nogil:
 *         cdef int i = 0             # <<<<<<<<<<<<<<
 *         cdef int idx = 0
 *         cdef int dst = 0
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":203
 *             self, int p, int num_data, vector[int] src_list, float eta) nogil:
 *         cdef int i = 0
 *         cdef int idx = 0             # <<<<<<<<<<<<<<
 *         cdef int dst = 0
 *         cdef int degree = 0
 */
  __pyx_v_idx = 0;

  /* "cython_sampler.pyx":204
 *         cdef int i = 0
 *         cdef int idx = 0
 *         cdef int dst = 0             # <<<<<<<<<<<<<<
 *         cdef int degree = 0
 *         cdef double unifom_prob = 0.
 */
  __pyx_v_dst = 0;

  /* "cython_sampler.pyx":205
 *         cdef int idx = 0
 *         cdef int dst = 0
 *         cdef int degree = 0             # <<<<<<<<<<<<<<
 *         cdef double unifom_prob = 0.
 *         cdef int src = 0
 */
  __pyx_v_degree = 0;

  /* "cython_sampler.pyx":206
 *         cdef int dst = 0
 *         cdef int degree = 0
 *         cdef double unifom_prob = 0.             # <<<<<<<<<<<<<<
 *         cdef int src = 0
 *         while i < num_data:
 */
  __pyx_v_unifom_prob = 0.;

  /* "cython_sampler.pyx":207
 *         cdef int degree = 0
 *         cdef double unifom_prob = 0.
 *         cdef int src = 0             # <<<<<<<<<<<<<<
 *         while i < num_data:
 *             if i % self.num_proc != p:
 */
  __pyx_v_src = 0;

  /* "cython_sampler.pyx":208
 *         cdef double unifom_prob = 0.
 *         cdef int src = 0
 *         while i < num_data:             # <<<<<<<<<<<<<<
 *             if i % self.num_proc != p:
 *                 i += 1
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_i < __pyx_v_num_data) != 0);
    if (!__pyx_t_1) break;

    /* "cython_sampler.pyx":209
 *         cdef int src = 0
 *         while i < num_data:
 *             if i % self.num_proc != p:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    if (unlikely(__pyx_v_self->__pyx_base.num_proc == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 209, __pyx_L1_error)
    }
    __pyx_t_1 = ((__Pyx_mod_int(__pyx_v_i, __pyx_v_self->__pyx_base.num_proc) != __pyx_v_p) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":210
 *         while i < num_data:
 *             if i % self.num_proc != p:
 *                 i += 1             # <<<<<<<<<<<<<<
 *                 continue
 *             src = src_list[i]
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "cython_sampler.pyx":211
 *             if i % self.num_proc != p:
 *                 i += 1
 *                 continue             # <<<<<<<<<<<<<<
 *             src = src_list[i]
 *             degree = self.degree[src]
 */
      goto __pyx_L3_continue;

      /* "cython_sampler.pyx":209
 *         cdef int src = 0
 *         while i < num_data:
 *             if i % self.num_proc != p:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    }

    /* "cython_sampler.pyx":212
 *                 i += 1
 *                 continue
 *             src = src_list[i]             # <<<<<<<<<<<<<<
 *             degree = self.degree[src]
 *             if degree <= self.neighbor_limit:
 */
    __pyx_v_src = (__pyx_v_src_list[__pyx_v_i]);

    /* "cython_sampler.pyx":213
 *                 continue
 *             src = src_list[i]
 *             degree = self.degree[src]             # <<<<<<<<<<<<<<
 *             if degree <= self.neighbor_limit:
 *                 i += 1
 */
    __pyx_v_degree = (__pyx_v_self->__pyx_base.degree[__pyx_v_src]);

    /* "cython_sampler.pyx":214
 *             src = src_list[i]
 *             degree = self.degree[src]
 *             if degree <= self.neighbor_limit:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    __pyx_t_1 = ((__pyx_v_degree <= __pyx_v_self->__pyx_base.neighbor_limit) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":215
 *             degree = self.degree[src]
 *             if degree <= self.neighbor_limit:
 *                 i += 1             # <<<<<<<<<<<<<<
 *                 continue
 *             weights_sum = sum_double(self.sample_weights[src])
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "cython_sampler.pyx":216
 *             if degree <= self.neighbor_limit:
 *                 i += 1
 *                 continue             # <<<<<<<<<<<<<<
 *             weights_sum = sum_double(self.sample_weights[src])
 *             unifom_prob = 1./degree
 */
      goto __pyx_L3_continue;

      /* "cython_sampler.pyx":214
 *             src = src_list[i]
 *             degree = self.degree[src]
 *             if degree <= self.neighbor_limit:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    }

    /* "cython_sampler.pyx":217
 *                 i += 1
 *                 continue
 *             weights_sum = sum_double(self.sample_weights[src])             # <<<<<<<<<<<<<<
 *             unifom_prob = 1./degree
 * 
 */
    __pyx_v_weights_sum = __pyx_f_14cython_sampler_sum_double((__pyx_v_self->__pyx_base.sample_weights[__pyx_v_src]));

    /* "cython_sampler.pyx":218
 *                 continue
 *             weights_sum = sum_double(self.sample_weights[src])
 *             unifom_prob = 1./degree             # <<<<<<<<<<<<<<
 * 
 *             idx = 0
 */
    if (unlikely(__pyx_v_degree == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 218, __pyx_L1_error)
    }
    __pyx_v_unifom_prob = (1. / ((double)__pyx_v_degree));

    /* "cython_sampler.pyx":220
 *             unifom_prob = 1./degree
 * 
 *             idx = 0             # <<<<<<<<<<<<<<
 *             while idx < degree:
 *                 dst = self.adj[src][idx]
 */
    __pyx_v_idx = 0;

    /* "cython_sampler.pyx":221
 * 
 *             idx = 0
 *             while idx < degree:             # <<<<<<<<<<<<<<
 *                 dst = self.adj[src][idx]
 *                 self.sample_probs[src][idx] = (1-eta)*self.sample_weights[src][idx] / weights_sum \
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_idx < __pyx_v_degree) != 0);
      if (!__pyx_t_1) break;

      /* "cython_sampler.pyx":222
 *             idx = 0
 *             while idx < degree:
 *                 dst = self.adj[src][idx]             # <<<<<<<<<<<<<<
 *                 self.sample_probs[src][idx] = (1-eta)*self.sample_weights[src][idx] / weights_sum \
 *                                               + eta*unifom_prob
 */
      __pyx_v_dst = ((__pyx_v_self->__pyx_base.adj[__pyx_v_src])[__pyx_v_idx]);

      /* "cython_sampler.pyx":223
 *             while idx < degree:
 *                 dst = self.adj[src][idx]
 *                 self.sample_probs[src][idx] = (1-eta)*self.sample_weights[src][idx] / weights_sum \             # <<<<<<<<<<<<<<
 *                                               + eta*unifom_prob
 *                 idx += 1
 */
      __pyx_t_2 = ((1.0 - __pyx_v_eta) * ((__pyx_v_self->__pyx_base.sample_weights[__pyx_v_src])[__pyx_v_idx]));
      if (unlikely(__pyx_v_weights_sum == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 223, __pyx_L1_error)
      }

      /* "cython_sampler.pyx":224
 *                 dst = self.adj[src][idx]
 *                 self.sample_probs[src][idx] = (1-eta)*self.sample_weights[src][idx] / weights_sum \
 *                                               + eta*unifom_prob             # <<<<<<<<<<<<<<
 *                 idx += 1
 *             i += 1
 */
      ((__pyx_v_self->__pyx_base.sample_probs[__pyx_v_src])[__pyx_v_idx]) = ((__pyx_t_2 / __pyx_v_weights_sum) + (__pyx_v_eta * __pyx_v_unifom_prob));

      /* "cython_sampler.pyx":225
 *                 self.sample_probs[src][idx] = (1-eta)*self.sample_weights[src][idx] / weights_sum \
 *                                               + eta*unifom_prob
 *                 idx += 1             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
      __pyx_v_idx = (__pyx_v_idx + 1);
    }

    /* "cython_sampler.pyx":226
 *                                               + eta*unifom_prob
 *                 idx += 1
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);
    __pyx_L3_continue:;
  }

  /* "cython_sampler.pyx":200
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void update_sample_probs(             # <<<<<<<<<<<<<<
 *             self, int p, int num_data, vector[int] src_list, float eta) nogil:
 *         cdef int i = 0
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cython_sampler.BanditSampler.update_sample_probs", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
}

/* "cython_sampler.pyx":231
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     def sample_graph(self, py_roots):             # <<<<<<<<<<<<<<
 *         cdef vector[int] roots
 *         cutils.npy2vec_int(py_roots, roots)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14cython_sampler_13BanditSampler_5sample_graph(PyObject *__pyx_v_self, PyObject *__pyx_v_py_roots); /*proto*/
static PyObject *__pyx_pw_14cython_sampler_13BanditSampler_5sample_graph(PyObject *__pyx_v_self, PyObject *__pyx_v_py_roots) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sample_graph (wrapper)", 0);
  __pyx_r = __pyx_pf_14cython_sampler_13BanditSampler_4sample_graph(((struct __pyx_obj_14cython_sampler_BanditSampler *)__pyx_v_self), ((PyObject *)__pyx_v_py_roots));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14cython_sampler_13BanditSampler_4sample_graph(struct __pyx_obj_14cython_sampler_BanditSampler *__pyx_v_self, PyObject *__pyx_v_py_roots) {
  std::vector<int>  __pyx_v_roots;
  std::vector<int>  __pyx_v_edges;
  std::unordered_set<int>  __pyx_v_n_depth;
  int __pyx_v_num_data;
  int __pyx_v_p;
  std::vector<std::vector<int> >  __pyx_v_edges_all;
  std::vector<std::unordered_set<int> >  __pyx_v_n_depth_all;
  std::unordered_set<int> ::iterator __pyx_v_it;
  std::vector<int> ::iterator __pyx_v_found;
  int __pyx_v_i;
  int __pyx_v_edge_size;
  CYTHON_UNUSED int __pyx_v_k;
  std::vector<int>  __pyx_v_n_depth_vec;
  struct __pyx_obj_12cython_utils_array_wrapper_int *__pyx_v_w_edges = 0;
  PyObject *__pyx_v_np_edges = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  std::vector<int>  __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("sample_graph", 0);

  /* "cython_sampler.pyx":233
 *     def sample_graph(self, py_roots):
 *         cdef vector[int] roots
 *         cutils.npy2vec_int(py_roots, roots)             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[int] edges
 */
  if (!(likely(((__pyx_v_py_roots) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_py_roots, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 233, __pyx_L1_error)
  __pyx_f_12cython_utils_npy2vec_int(((PyArrayObject *)__pyx_v_py_roots), __pyx_v_roots);

  /* "cython_sampler.pyx":239
 * 
 *         # 1st layer
 *         cdef int num_data = roots.size()             # <<<<<<<<<<<<<<
 *         cdef int p = 0
 *         cdef vector[vector[int]] edges_all
 */
  __pyx_v_num_data = __pyx_v_roots.size();

  /* "cython_sampler.pyx":240
 *         # 1st layer
 *         cdef int num_data = roots.size()
 *         cdef int p = 0             # <<<<<<<<<<<<<<
 *         cdef vector[vector[int]] edges_all
 *         cdef vector[unordered_set[int]] n_depth_all
 */
  __pyx_v_p = 0;

  /* "cython_sampler.pyx":243
 *         cdef vector[vector[int]] edges_all
 *         cdef vector[unordered_set[int]] n_depth_all
 *         edges_all.resize(self.num_proc)             # <<<<<<<<<<<<<<
 *         n_depth_all.resize(self.num_proc)
 *         with nogil, parallel(num_threads=self.num_proc):
 */
  try {
    __pyx_v_edges_all.resize(__pyx_v_self->__pyx_base.num_proc);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 243, __pyx_L1_error)
  }

  /* "cython_sampler.pyx":244
 *         cdef vector[unordered_set[int]] n_depth_all
 *         edges_all.resize(self.num_proc)
 *         n_depth_all.resize(self.num_proc)             # <<<<<<<<<<<<<<
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):
 */
  try {
    __pyx_v_n_depth_all.resize(__pyx_v_self->__pyx_base.num_proc);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 244, __pyx_L1_error)
  }

  /* "cython_sampler.pyx":245
 *         edges_all.resize(self.num_proc)
 *         n_depth_all.resize(self.num_proc)
 *         with nogil, parallel(num_threads=self.num_proc):             # <<<<<<<<<<<<<<
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.c_sample_graph_v1(p, num_data, roots, edges_all[p], n_depth_all[p])
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            #ifdef _OPENMP
            #pragma omp parallel  private(__pyx_t_1, __pyx_t_2, __pyx_t_3) num_threads(__pyx_v_self->__pyx_base.num_proc)
            #endif /* _OPENMP */
            {

                /* "cython_sampler.pyx":246
 *         n_depth_all.resize(self.num_proc)
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):             # <<<<<<<<<<<<<<
 *                 self.c_sample_graph_v1(p, num_data, roots, edges_all[p], n_depth_all[p])
 * 
 */
                __pyx_t_1 = __pyx_v_self->__pyx_base.num_proc;
                if (1 == 0) abort();
                {
                    __pyx_t_3 = (__pyx_t_1 - 0 + 1 - 1/abs(1)) / 1;
                    if (__pyx_t_3 > 0)
                    {
                        #ifdef _OPENMP
                        #pragma omp for firstprivate(__pyx_v_p) lastprivate(__pyx_v_p) schedule(dynamic)
                        #endif /* _OPENMP */
                        for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_3; __pyx_t_2++){
                            {
                                __pyx_v_p = (int)(0 + 1 * __pyx_t_2);

                                /* "cython_sampler.pyx":247
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.c_sample_graph_v1(p, num_data, roots, edges_all[p], n_depth_all[p])             # <<<<<<<<<<<<<<
 * 
 *         cdef unordered_set[int].iterator it
 */
                                ((struct __pyx_vtabstruct_14cython_sampler_BanditSampler *)__pyx_v_self->__pyx_base.__pyx_vtab)->c_sample_graph_v1(__pyx_v_self, __pyx_v_p, __pyx_v_num_data, __pyx_v_roots, (__pyx_v_edges_all[__pyx_v_p]), (__pyx_v_n_depth_all[__pyx_v_p]));
                            }
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "cython_sampler.pyx":245
 *         edges_all.resize(self.num_proc)
 *         n_depth_all.resize(self.num_proc)
 *         with nogil, parallel(num_threads=self.num_proc):             # <<<<<<<<<<<<<<
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.c_sample_graph_v1(p, num_data, roots, edges_all[p], n_depth_all[p])
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cython_sampler.pyx":252
 *         cdef vector[int].iterator found
 * 
 *         cdef int i = 0             # <<<<<<<<<<<<<<
 *         cdef int edge_size = edges.size()
 *         while i < self.num_proc:
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":253
 * 
 *         cdef int i = 0
 *         cdef int edge_size = edges.size()             # <<<<<<<<<<<<<<
 *         while i < self.num_proc:
 *             edge_size += edges_all[i].size()
 */
  __pyx_v_edge_size = __pyx_v_edges.size();

  /* "cython_sampler.pyx":254
 *         cdef int i = 0
 *         cdef int edge_size = edges.size()
 *         while i < self.num_proc:             # <<<<<<<<<<<<<<
 *             edge_size += edges_all[i].size()
 *             i += 1
 */
  while (1) {
    __pyx_t_4 = ((__pyx_v_i < __pyx_v_self->__pyx_base.num_proc) != 0);
    if (!__pyx_t_4) break;

    /* "cython_sampler.pyx":255
 *         cdef int edge_size = edges.size()
 *         while i < self.num_proc:
 *             edge_size += edges_all[i].size()             # <<<<<<<<<<<<<<
 *             i += 1
 *         edges.reserve(edge_size)
 */
    __pyx_v_edge_size = (__pyx_v_edge_size + (__pyx_v_edges_all[__pyx_v_i]).size());

    /* "cython_sampler.pyx":256
 *         while i < self.num_proc:
 *             edge_size += edges_all[i].size()
 *             i += 1             # <<<<<<<<<<<<<<
 *         edges.reserve(edge_size)
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cython_sampler.pyx":257
 *             edge_size += edges_all[i].size()
 *             i += 1
 *         edges.reserve(edge_size)             # <<<<<<<<<<<<<<
 * 
 *         i = 0
 */
  __pyx_v_edges.reserve(__pyx_v_edge_size);

  /* "cython_sampler.pyx":259
 *         edges.reserve(edge_size)
 * 
 *         i = 0             # <<<<<<<<<<<<<<
 *         cdef int k = 0
 *         while i < self.num_proc:
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":260
 * 
 *         i = 0
 *         cdef int k = 0             # <<<<<<<<<<<<<<
 *         while i < self.num_proc:
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())
 */
  __pyx_v_k = 0;

  /* "cython_sampler.pyx":261
 *         i = 0
 *         cdef int k = 0
 *         while i < self.num_proc:             # <<<<<<<<<<<<<<
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())
 *             it = n_depth_all[i].begin()
 */
  while (1) {
    __pyx_t_4 = ((__pyx_v_i < __pyx_v_self->__pyx_base.num_proc) != 0);
    if (!__pyx_t_4) break;

    /* "cython_sampler.pyx":262
 *         cdef int k = 0
 *         while i < self.num_proc:
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())             # <<<<<<<<<<<<<<
 *             it = n_depth_all[i].begin()
 *             while it != n_depth_all[i].end():
 */
    try {
      __pyx_v_edges.insert(__pyx_v_edges.end(), (__pyx_v_edges_all[__pyx_v_i]).begin(), (__pyx_v_edges_all[__pyx_v_i]).end());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 262, __pyx_L1_error)
    }

    /* "cython_sampler.pyx":263
 *         while i < self.num_proc:
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())
 *             it = n_depth_all[i].begin()             # <<<<<<<<<<<<<<
 *             while it != n_depth_all[i].end():
 *                 found = find[vector[int].iterator, int](roots.begin(), roots.end(), deref(it))
 */
    __pyx_v_it = (__pyx_v_n_depth_all[__pyx_v_i]).begin();

    /* "cython_sampler.pyx":264
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())
 *             it = n_depth_all[i].begin()
 *             while it != n_depth_all[i].end():             # <<<<<<<<<<<<<<
 *                 found = find[vector[int].iterator, int](roots.begin(), roots.end(), deref(it))
 *                 if found != roots.end():
 */
    while (1) {
      __pyx_t_4 = ((__pyx_v_it != (__pyx_v_n_depth_all[__pyx_v_i]).end()) != 0);
      if (!__pyx_t_4) break;

      /* "cython_sampler.pyx":265
 *             it = n_depth_all[i].begin()
 *             while it != n_depth_all[i].end():
 *                 found = find[vector[int].iterator, int](roots.begin(), roots.end(), deref(it))             # <<<<<<<<<<<<<<
 *                 if found != roots.end():
 *                     inc(it)
 */
      __pyx_v_found = std::find<std::vector<int> ::iterator,int>(__pyx_v_roots.begin(), __pyx_v_roots.end(), (*__pyx_v_it));

      /* "cython_sampler.pyx":266
 *             while it != n_depth_all[i].end():
 *                 found = find[vector[int].iterator, int](roots.begin(), roots.end(), deref(it))
 *                 if found != roots.end():             # <<<<<<<<<<<<<<
 *                     inc(it)
 *                     continue
 */
      __pyx_t_4 = ((__pyx_v_found != __pyx_v_roots.end()) != 0);
      if (__pyx_t_4) {

        /* "cython_sampler.pyx":267
 *                 found = find[vector[int].iterator, int](roots.begin(), roots.end(), deref(it))
 *                 if found != roots.end():
 *                     inc(it)             # <<<<<<<<<<<<<<
 *                     continue
 *                 n_depth.insert(deref(it))
 */
        (void)((++__pyx_v_it));

        /* "cython_sampler.pyx":268
 *                 if found != roots.end():
 *                     inc(it)
 *                     continue             # <<<<<<<<<<<<<<
 *                 n_depth.insert(deref(it))
 *                 inc(it)
 */
        goto __pyx_L22_continue;

        /* "cython_sampler.pyx":266
 *             while it != n_depth_all[i].end():
 *                 found = find[vector[int].iterator, int](roots.begin(), roots.end(), deref(it))
 *                 if found != roots.end():             # <<<<<<<<<<<<<<
 *                     inc(it)
 *                     continue
 */
      }

      /* "cython_sampler.pyx":269
 *                     inc(it)
 *                     continue
 *                 n_depth.insert(deref(it))             # <<<<<<<<<<<<<<
 *                 inc(it)
 *             i += 1
 */
      (void)(__pyx_v_n_depth.insert((*__pyx_v_it)));

      /* "cython_sampler.pyx":270
 *                     continue
 *                 n_depth.insert(deref(it))
 *                 inc(it)             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
      (void)((++__pyx_v_it));
      __pyx_L22_continue:;
    }

    /* "cython_sampler.pyx":271
 *                 n_depth.insert(deref(it))
 *                 inc(it)
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 *         # 2nd layer
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cython_sampler.pyx":274
 * 
 *         # 2nd layer
 *         cdef vector[int] n_depth_vec = vector[int](n_depth.size())             # <<<<<<<<<<<<<<
 *         it = n_depth.begin()
 *         i = 0
 */
  try {
    __pyx_t_5 = std::vector<int> (__pyx_v_n_depth.size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 274, __pyx_L1_error)
  }
  __pyx_v_n_depth_vec = __pyx_t_5;

  /* "cython_sampler.pyx":275
 *         # 2nd layer
 *         cdef vector[int] n_depth_vec = vector[int](n_depth.size())
 *         it = n_depth.begin()             # <<<<<<<<<<<<<<
 *         i = 0
 *         while it != n_depth.end():
 */
  __pyx_v_it = __pyx_v_n_depth.begin();

  /* "cython_sampler.pyx":276
 *         cdef vector[int] n_depth_vec = vector[int](n_depth.size())
 *         it = n_depth.begin()
 *         i = 0             # <<<<<<<<<<<<<<
 *         while it != n_depth.end():
 *             n_depth_vec[i] = deref(it)
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":277
 *         it = n_depth.begin()
 *         i = 0
 *         while it != n_depth.end():             # <<<<<<<<<<<<<<
 *             n_depth_vec[i] = deref(it)
 *             inc(it)
 */
  while (1) {
    __pyx_t_4 = ((__pyx_v_it != __pyx_v_n_depth.end()) != 0);
    if (!__pyx_t_4) break;

    /* "cython_sampler.pyx":278
 *         i = 0
 *         while it != n_depth.end():
 *             n_depth_vec[i] = deref(it)             # <<<<<<<<<<<<<<
 *             inc(it)
 *             i += 1
 */
    (__pyx_v_n_depth_vec[__pyx_v_i]) = (*__pyx_v_it);

    /* "cython_sampler.pyx":279
 *         while it != n_depth.end():
 *             n_depth_vec[i] = deref(it)
 *             inc(it)             # <<<<<<<<<<<<<<
 *             i += 1
 *         num_data = n_depth_vec.size()
 */
    (void)((++__pyx_v_it));

    /* "cython_sampler.pyx":280
 *             n_depth_vec[i] = deref(it)
 *             inc(it)
 *             i += 1             # <<<<<<<<<<<<<<
 *         num_data = n_depth_vec.size()
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cython_sampler.pyx":281
 *             inc(it)
 *             i += 1
 *         num_data = n_depth_vec.size()             # <<<<<<<<<<<<<<
 * 
 *         edges_all.clear()
 */
  __pyx_v_num_data = __pyx_v_n_depth_vec.size();

  /* "cython_sampler.pyx":283
 *         num_data = n_depth_vec.size()
 * 
 *         edges_all.clear()             # <<<<<<<<<<<<<<
 *         edges_all.resize(self.num_proc)
 *         with nogil, parallel(num_threads=self.num_proc):
 */
  __pyx_v_edges_all.clear();

  /* "cython_sampler.pyx":284
 * 
 *         edges_all.clear()
 *         edges_all.resize(self.num_proc)             # <<<<<<<<<<<<<<
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):
 */
  try {
    __pyx_v_edges_all.resize(__pyx_v_self->__pyx_base.num_proc);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 284, __pyx_L1_error)
  }

  /* "cython_sampler.pyx":285
 *         edges_all.clear()
 *         edges_all.resize(self.num_proc)
 *         with nogil, parallel(num_threads=self.num_proc):             # <<<<<<<<<<<<<<
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.c_sample_graph_v2(p, num_data, n_depth_vec, edges_all[p])
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            #ifdef _OPENMP
            #pragma omp parallel  private(__pyx_t_1, __pyx_t_2, __pyx_t_3) num_threads(__pyx_v_self->__pyx_base.num_proc)
            #endif /* _OPENMP */
            {

                /* "cython_sampler.pyx":286
 *         edges_all.resize(self.num_proc)
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):             # <<<<<<<<<<<<<<
 *                 self.c_sample_graph_v2(p, num_data, n_depth_vec, edges_all[p])
 *         i = 0
 */
                __pyx_t_3 = __pyx_v_self->__pyx_base.num_proc;
                if (1 == 0) abort();
                {
                    __pyx_t_1 = (__pyx_t_3 - 0 + 1 - 1/abs(1)) / 1;
                    if (__pyx_t_1 > 0)
                    {
                        #ifdef _OPENMP
                        #pragma omp for firstprivate(__pyx_v_p) lastprivate(__pyx_v_p) schedule(dynamic)
                        #endif /* _OPENMP */
                        for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2++){
                            {
                                __pyx_v_p = (int)(0 + 1 * __pyx_t_2);

                                /* "cython_sampler.pyx":287
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.c_sample_graph_v2(p, num_data, n_depth_vec, edges_all[p])             # <<<<<<<<<<<<<<
 *         i = 0
 *         edge_size = edges.size()
 */
                                ((struct __pyx_vtabstruct_14cython_sampler_BanditSampler *)__pyx_v_self->__pyx_base.__pyx_vtab)->c_sample_graph_v2(__pyx_v_self, __pyx_v_p, __pyx_v_num_data, __pyx_v_n_depth_vec, (__pyx_v_edges_all[__pyx_v_p]));
                            }
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "cython_sampler.pyx":285
 *         edges_all.clear()
 *         edges_all.resize(self.num_proc)
 *         with nogil, parallel(num_threads=self.num_proc):             # <<<<<<<<<<<<<<
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.c_sample_graph_v2(p, num_data, n_depth_vec, edges_all[p])
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L29;
        }
        __pyx_L29:;
      }
  }

  /* "cython_sampler.pyx":288
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.c_sample_graph_v2(p, num_data, n_depth_vec, edges_all[p])
 *         i = 0             # <<<<<<<<<<<<<<
 *         edge_size = edges.size()
 *         while i < self.num_proc:
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":289
 *                 self.c_sample_graph_v2(p, num_data, n_depth_vec, edges_all[p])
 *         i = 0
 *         edge_size = edges.size()             # <<<<<<<<<<<<<<
 *         while i < self.num_proc:
 *             edge_size += edges_all[i].size()
 */
  __pyx_v_edge_size = __pyx_v_edges.size();

  /* "cython_sampler.pyx":290
 *         i = 0
 *         edge_size = edges.size()
 *         while i < self.num_proc:             # <<<<<<<<<<<<<<
 *             edge_size += edges_all[i].size()
 *             i += 1
 */
  while (1) {
    __pyx_t_4 = ((__pyx_v_i < __pyx_v_self->__pyx_base.num_proc) != 0);
    if (!__pyx_t_4) break;

    /* "cython_sampler.pyx":291
 *         edge_size = edges.size()
 *         while i < self.num_proc:
 *             edge_size += edges_all[i].size()             # <<<<<<<<<<<<<<
 *             i += 1
 *         edges.reserve(edge_size)
 */
    __pyx_v_edge_size = (__pyx_v_edge_size + (__pyx_v_edges_all[__pyx_v_i]).size());

    /* "cython_sampler.pyx":292
 *         while i < self.num_proc:
 *             edge_size += edges_all[i].size()
 *             i += 1             # <<<<<<<<<<<<<<
 *         edges.reserve(edge_size)
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cython_sampler.pyx":293
 *             edge_size += edges_all[i].size()
 *             i += 1
 *         edges.reserve(edge_size)             # <<<<<<<<<<<<<<
 * 
 *         i = 0
 */
  __pyx_v_edges.reserve(__pyx_v_edge_size);

  /* "cython_sampler.pyx":295
 *         edges.reserve(edge_size)
 * 
 *         i = 0             # <<<<<<<<<<<<<<
 *         while i < self.num_proc:
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":296
 * 
 *         i = 0
 *         while i < self.num_proc:             # <<<<<<<<<<<<<<
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())
 *             i += 1
 */
  while (1) {
    __pyx_t_4 = ((__pyx_v_i < __pyx_v_self->__pyx_base.num_proc) != 0);
    if (!__pyx_t_4) break;

    /* "cython_sampler.pyx":297
 *         i = 0
 *         while i < self.num_proc:
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
    try {
      __pyx_v_edges.insert(__pyx_v_edges.end(), (__pyx_v_edges_all[__pyx_v_i]).begin(), (__pyx_v_edges_all[__pyx_v_i]).end());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 297, __pyx_L1_error)
    }

    /* "cython_sampler.pyx":298
 *         while i < self.num_proc:
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 *         # sort edges
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cython_sampler.pyx":303
 *         #sort[vector[int].iterator, f_type](edges.begin(), edges.end(), compare)
 * 
 *         cdef cutils.array_wrapper_int w_edges = cutils.array_wrapper_int()             # <<<<<<<<<<<<<<
 *         w_edges.set_data(edges)
 *         np_edges = np.frombuffer(w_edges, dtype=np.int32)
 */
  __pyx_t_6 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_12cython_utils_array_wrapper_int)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_w_edges = ((struct __pyx_obj_12cython_utils_array_wrapper_int *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "cython_sampler.pyx":304
 * 
 *         cdef cutils.array_wrapper_int w_edges = cutils.array_wrapper_int()
 *         w_edges.set_data(edges)             # <<<<<<<<<<<<<<
 *         np_edges = np.frombuffer(w_edges, dtype=np.int32)
 *         np_edges = np_edges.reshape([-1,2])
 */
  ((struct __pyx_vtabstruct_12cython_utils_array_wrapper_int *)__pyx_v_w_edges->__pyx_vtab)->set_data(__pyx_v_w_edges, __pyx_v_edges);

  /* "cython_sampler.pyx":305
 *         cdef cutils.array_wrapper_int w_edges = cutils.array_wrapper_int()
 *         w_edges.set_data(edges)
 *         np_edges = np.frombuffer(w_edges, dtype=np.int32)             # <<<<<<<<<<<<<<
 *         np_edges = np_edges.reshape([-1,2])
 *         return np_edges
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_frombuffer); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(((PyObject *)__pyx_v_w_edges));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_w_edges));
  PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_v_w_edges));
  __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_int32); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_10) < 0) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, __pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_np_edges = __pyx_t_10;
  __pyx_t_10 = 0;

  /* "cython_sampler.pyx":306
 *         w_edges.set_data(edges)
 *         np_edges = np.frombuffer(w_edges, dtype=np.int32)
 *         np_edges = np_edges.reshape([-1,2])             # <<<<<<<<<<<<<<
 *         return np_edges
 * 
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_np_edges, __pyx_n_s_reshape); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = PyList_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_int_neg_1);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_int_2);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_10 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF_SET(__pyx_v_np_edges, __pyx_t_10);
  __pyx_t_10 = 0;

  /* "cython_sampler.pyx":307
 *         np_edges = np.frombuffer(w_edges, dtype=np.int32)
 *         np_edges = np_edges.reshape([-1,2])
 *         return np_edges             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_np_edges);
  __pyx_r = __pyx_v_np_edges;
  goto __pyx_L0;

  /* "cython_sampler.pyx":231
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     def sample_graph(self, py_roots):             # <<<<<<<<<<<<<<
 *         cdef vector[int] roots
 *         cutils.npy2vec_int(py_roots, roots)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("cython_sampler.BanditSampler.sample_graph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_w_edges);
  __Pyx_XDECREF(__pyx_v_np_edges);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython_sampler.pyx":312
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void c_sample_graph_v1(self, int p, int num_data, vector[int]& roots,             # <<<<<<<<<<<<<<
 *                                 vector[int]& edges, unordered_set[int]& n_depth) nogil:
 *         cdef int i = 0
 */

static void __pyx_f_14cython_sampler_13BanditSampler_c_sample_graph_v1(struct __pyx_obj_14cython_sampler_BanditSampler *__pyx_v_self, int __pyx_v_p, int __pyx_v_num_data, std::vector<int>  &__pyx_v_roots, std::vector<int>  &__pyx_v_edges, std::unordered_set<int>  &__pyx_v_n_depth) {
  int __pyx_v_i;
  CYTHON_UNUSED int __pyx_v_sample_size;
  int __pyx_v_node;
  int __pyx_t_1;

  /* "cython_sampler.pyx":314
 *     cdef void c_sample_graph_v1(self, int p, int num_data, vector[int]& roots,
 *                                 vector[int]& edges, unordered_set[int]& n_depth) nogil:
 *         cdef int i = 0             # <<<<<<<<<<<<<<
 *         cdef int sample_size
 *         cdef int node
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":317
 *         cdef int sample_size
 *         cdef int node
 *         while i < num_data:             # <<<<<<<<<<<<<<
 *             if i % self.num_proc != p:
 *                 i += 1
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_i < __pyx_v_num_data) != 0);
    if (!__pyx_t_1) break;

    /* "cython_sampler.pyx":318
 *         cdef int node
 *         while i < num_data:
 *             if i % self.num_proc != p:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    if (unlikely(__pyx_v_self->__pyx_base.num_proc == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 318, __pyx_L1_error)
    }
    __pyx_t_1 = ((__Pyx_mod_int(__pyx_v_i, __pyx_v_self->__pyx_base.num_proc) != __pyx_v_p) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":319
 *         while i < num_data:
 *             if i % self.num_proc != p:
 *                 i += 1             # <<<<<<<<<<<<<<
 *                 continue
 *             node = roots[i]
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "cython_sampler.pyx":320
 *             if i % self.num_proc != p:
 *                 i += 1
 *                 continue             # <<<<<<<<<<<<<<
 *             node = roots[i]
 *             sample_size = self.sample_neighbors_v1(node, edges, n_depth)
 */
      goto __pyx_L3_continue;

      /* "cython_sampler.pyx":318
 *         cdef int node
 *         while i < num_data:
 *             if i % self.num_proc != p:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    }

    /* "cython_sampler.pyx":321
 *                 i += 1
 *                 continue
 *             node = roots[i]             # <<<<<<<<<<<<<<
 *             sample_size = self.sample_neighbors_v1(node, edges, n_depth)
 *             i += 1
 */
    __pyx_v_node = (__pyx_v_roots[__pyx_v_i]);

    /* "cython_sampler.pyx":322
 *                 continue
 *             node = roots[i]
 *             sample_size = self.sample_neighbors_v1(node, edges, n_depth)             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
    __pyx_v_sample_size = ((struct __pyx_vtabstruct_14cython_sampler_BanditSampler *)__pyx_v_self->__pyx_base.__pyx_vtab)->sample_neighbors_v1(__pyx_v_self, __pyx_v_node, __pyx_v_edges, __pyx_v_n_depth);

    /* "cython_sampler.pyx":323
 *             node = roots[i]
 *             sample_size = self.sample_neighbors_v1(node, edges, n_depth)
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);
    __pyx_L3_continue:;
  }

  /* "cython_sampler.pyx":312
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void c_sample_graph_v1(self, int p, int num_data, vector[int]& roots,             # <<<<<<<<<<<<<<
 *                                 vector[int]& edges, unordered_set[int]& n_depth) nogil:
 *         cdef int i = 0
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cython_sampler.BanditSampler.c_sample_graph_v1", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
}

/* "cython_sampler.pyx":328
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void c_sample_graph_v2(self, int p, int num_data, vector[int]& roots,             # <<<<<<<<<<<<<<
 *                                 vector[int]& edges) nogil:
 *         cdef int i = 0
 */

static void __pyx_f_14cython_sampler_13BanditSampler_c_sample_graph_v2(struct __pyx_obj_14cython_sampler_BanditSampler *__pyx_v_self, int __pyx_v_p, int __pyx_v_num_data, std::vector<int>  &__pyx_v_roots, std::vector<int>  &__pyx_v_edges) {
  int __pyx_v_i;
  int __pyx_v_node;
  int __pyx_t_1;

  /* "cython_sampler.pyx":330
 *     cdef void c_sample_graph_v2(self, int p, int num_data, vector[int]& roots,
 *                                 vector[int]& edges) nogil:
 *         cdef int i = 0             # <<<<<<<<<<<<<<
 *         cdef int node
 *         while i < num_data:
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":332
 *         cdef int i = 0
 *         cdef int node
 *         while i < num_data:             # <<<<<<<<<<<<<<
 *             if i % self.num_proc != p:
 *                 i += 1
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_i < __pyx_v_num_data) != 0);
    if (!__pyx_t_1) break;

    /* "cython_sampler.pyx":333
 *         cdef int node
 *         while i < num_data:
 *             if i % self.num_proc != p:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    if (unlikely(__pyx_v_self->__pyx_base.num_proc == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 333, __pyx_L1_error)
    }
    __pyx_t_1 = ((__Pyx_mod_int(__pyx_v_i, __pyx_v_self->__pyx_base.num_proc) != __pyx_v_p) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":334
 *         while i < num_data:
 *             if i % self.num_proc != p:
 *                 i += 1             # <<<<<<<<<<<<<<
 *                 continue
 *             node = roots[i]
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "cython_sampler.pyx":335
 *             if i % self.num_proc != p:
 *                 i += 1
 *                 continue             # <<<<<<<<<<<<<<
 *             node = roots[i]
 *             self.sample_neighbors_v2(node, edges)
 */
      goto __pyx_L3_continue;

      /* "cython_sampler.pyx":333
 *         cdef int node
 *         while i < num_data:
 *             if i % self.num_proc != p:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    }

    /* "cython_sampler.pyx":336
 *                 i += 1
 *                 continue
 *             node = roots[i]             # <<<<<<<<<<<<<<
 *             self.sample_neighbors_v2(node, edges)
 *             i += 1
 */
    __pyx_v_node = (__pyx_v_roots[__pyx_v_i]);

    /* "cython_sampler.pyx":337
 *                 continue
 *             node = roots[i]
 *             self.sample_neighbors_v2(node, edges)             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
    ((struct __pyx_vtabstruct_14cython_sampler_BanditSampler *)__pyx_v_self->__pyx_base.__pyx_vtab)->sample_neighbors_v2(__pyx_v_self, __pyx_v_node, __pyx_v_edges);

    /* "cython_sampler.pyx":338
 *             node = roots[i]
 *             self.sample_neighbors_v2(node, edges)
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);
    __pyx_L3_continue:;
  }

  /* "cython_sampler.pyx":328
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void c_sample_graph_v2(self, int p, int num_data, vector[int]& roots,             # <<<<<<<<<<<<<<
 *                                 vector[int]& edges) nogil:
 *         cdef int i = 0
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cython_sampler.BanditSampler.c_sample_graph_v2", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
}

/* "cython_sampler.pyx":343
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef int sample_neighbors_v1(self, int node, vector[int]& edges,             # <<<<<<<<<<<<<<
 *                                   unordered_set[int]& n_depth) nogil:
 *         cdef int sample_size = 0
 */

static int __pyx_f_14cython_sampler_13BanditSampler_sample_neighbors_v1(struct __pyx_obj_14cython_sampler_BanditSampler *__pyx_v_self, int __pyx_v_node, std::vector<int>  &__pyx_v_edges, std::unordered_set<int>  &__pyx_v_n_depth) {
  int __pyx_v_sample_size;
  int __pyx_v_degree;
  int __pyx_v_edge_size;
  std::vector<int>  *__pyx_v_neighbors;
  std::vector<int> ::iterator __pyx_v_it;
  int __pyx_v_i;
  std::vector<int>  __pyx_v_samples;
  int __pyx_v_sample_id;
  std::vector<double>  *__pyx_v_sample_probs;
  int __pyx_r;
  int __pyx_t_1;

  /* "cython_sampler.pyx":345
 *     cdef int sample_neighbors_v1(self, int node, vector[int]& edges,
 *                                   unordered_set[int]& n_depth) nogil:
 *         cdef int sample_size = 0             # <<<<<<<<<<<<<<
 *         cdef int degree
 *         cdef int edge_size
 */
  __pyx_v_sample_size = 0;

  /* "cython_sampler.pyx":348
 *         cdef int degree
 *         cdef int edge_size
 *         cdef vector[int]* neighbors = &self.adj[node]             # <<<<<<<<<<<<<<
 *         degree = self.degree[node]
 *         edge_size = edges.size()
 */
  __pyx_v_neighbors = (&(__pyx_v_self->__pyx_base.adj[__pyx_v_node]));

  /* "cython_sampler.pyx":349
 *         cdef int edge_size
 *         cdef vector[int]* neighbors = &self.adj[node]
 *         degree = self.degree[node]             # <<<<<<<<<<<<<<
 *         edge_size = edges.size()
 *         cdef vector[int].iterator it
 */
  __pyx_v_degree = (__pyx_v_self->__pyx_base.degree[__pyx_v_node]);

  /* "cython_sampler.pyx":350
 *         cdef vector[int]* neighbors = &self.adj[node]
 *         degree = self.degree[node]
 *         edge_size = edges.size()             # <<<<<<<<<<<<<<
 *         cdef vector[int].iterator it
 *         cdef int i
 */
  __pyx_v_edge_size = __pyx_v_edges.size();

  /* "cython_sampler.pyx":356
 *         cdef int sample_id
 *         cdef vector[double] probs
 *         cdef vector[double]* sample_probs = &self.sample_probs[node]             # <<<<<<<<<<<<<<
 *         if degree <= self.neighbor_limit:
 *             edges.resize(edge_size + degree*2)
 */
  __pyx_v_sample_probs = (&(__pyx_v_self->__pyx_base.sample_probs[__pyx_v_node]));

  /* "cython_sampler.pyx":357
 *         cdef vector[double] probs
 *         cdef vector[double]* sample_probs = &self.sample_probs[node]
 *         if degree <= self.neighbor_limit:             # <<<<<<<<<<<<<<
 *             edges.resize(edge_size + degree*2)
 *             i = 0
 */
  __pyx_t_1 = ((__pyx_v_degree <= __pyx_v_self->__pyx_base.neighbor_limit) != 0);
  if (__pyx_t_1) {

    /* "cython_sampler.pyx":358
 *         cdef vector[double]* sample_probs = &self.sample_probs[node]
 *         if degree <= self.neighbor_limit:
 *             edges.resize(edge_size + degree*2)             # <<<<<<<<<<<<<<
 *             i = 0
 *             while i < degree:
 */
    try {
      __pyx_v_edges.resize((__pyx_v_edge_size + (__pyx_v_degree * 2)));
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 358, __pyx_L1_error)
    }

    /* "cython_sampler.pyx":359
 *         if degree <= self.neighbor_limit:
 *             edges.resize(edge_size + degree*2)
 *             i = 0             # <<<<<<<<<<<<<<
 *             while i < degree:
 *                 edges[edge_size+2*i] = node
 */
    __pyx_v_i = 0;

    /* "cython_sampler.pyx":360
 *             edges.resize(edge_size + degree*2)
 *             i = 0
 *             while i < degree:             # <<<<<<<<<<<<<<
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_i < __pyx_v_degree) != 0);
      if (!__pyx_t_1) break;

      /* "cython_sampler.pyx":361
 *             i = 0
 *             while i < degree:
 *                 edges[edge_size+2*i] = node             # <<<<<<<<<<<<<<
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]
 *                 n_depth.insert(deref(neighbors)[i])
 */
      (__pyx_v_edges[(__pyx_v_edge_size + (2 * __pyx_v_i))]) = __pyx_v_node;

      /* "cython_sampler.pyx":362
 *             while i < degree:
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]             # <<<<<<<<<<<<<<
 *                 n_depth.insert(deref(neighbors)[i])
 *                 inc(it)
 */
      (__pyx_v_edges[((__pyx_v_edge_size + (2 * __pyx_v_i)) + 1)]) = ((*__pyx_v_neighbors)[__pyx_v_i]);

      /* "cython_sampler.pyx":363
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]
 *                 n_depth.insert(deref(neighbors)[i])             # <<<<<<<<<<<<<<
 *                 inc(it)
 *                 i += 1
 */
      (void)(__pyx_v_n_depth.insert(((*__pyx_v_neighbors)[__pyx_v_i])));

      /* "cython_sampler.pyx":364
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]
 *                 n_depth.insert(deref(neighbors)[i])
 *                 inc(it)             # <<<<<<<<<<<<<<
 *                 i += 1
 *             sample_size = degree
 */
      (void)((++__pyx_v_it));

      /* "cython_sampler.pyx":365
 *                 n_depth.insert(deref(neighbors)[i])
 *                 inc(it)
 *                 i += 1             # <<<<<<<<<<<<<<
 *             sample_size = degree
 *         else:
 */
      __pyx_v_i = (__pyx_v_i + 1);
    }

    /* "cython_sampler.pyx":366
 *                 inc(it)
 *                 i += 1
 *             sample_size = degree             # <<<<<<<<<<<<<<
 *         else:
 *             edges.resize(edge_size + self.neighbor_limit*2)
 */
    __pyx_v_sample_size = __pyx_v_degree;

    /* "cython_sampler.pyx":357
 *         cdef vector[double] probs
 *         cdef vector[double]* sample_probs = &self.sample_probs[node]
 *         if degree <= self.neighbor_limit:             # <<<<<<<<<<<<<<
 *             edges.resize(edge_size + degree*2)
 *             i = 0
 */
    goto __pyx_L3;
  }

  /* "cython_sampler.pyx":368
 *             sample_size = degree
 *         else:
 *             edges.resize(edge_size + self.neighbor_limit*2)             # <<<<<<<<<<<<<<
 *             samples = random_choice(deref(neighbors), deref(sample_probs), self.neighbor_limit)
 * 
 */
  /*else*/ {
    try {
      __pyx_v_edges.resize((__pyx_v_edge_size + (__pyx_v_self->__pyx_base.neighbor_limit * 2)));
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 368, __pyx_L1_error)
    }

    /* "cython_sampler.pyx":369
 *         else:
 *             edges.resize(edge_size + self.neighbor_limit*2)
 *             samples = random_choice(deref(neighbors), deref(sample_probs), self.neighbor_limit)             # <<<<<<<<<<<<<<
 * 
 *             i = 0
 */
    __pyx_v_samples = __pyx_f_14cython_sampler_random_choice((*__pyx_v_neighbors), (*__pyx_v_sample_probs), __pyx_v_self->__pyx_base.neighbor_limit);

    /* "cython_sampler.pyx":371
 *             samples = random_choice(deref(neighbors), deref(sample_probs), self.neighbor_limit)
 * 
 *             i = 0             # <<<<<<<<<<<<<<
 *             while i < self.neighbor_limit:
 *                 sample_id = samples[i]
 */
    __pyx_v_i = 0;

    /* "cython_sampler.pyx":372
 * 
 *             i = 0
 *             while i < self.neighbor_limit:             # <<<<<<<<<<<<<<
 *                 sample_id = samples[i]
 *                 edges[edge_size+2*i] = node
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_i < __pyx_v_self->__pyx_base.neighbor_limit) != 0);
      if (!__pyx_t_1) break;

      /* "cython_sampler.pyx":373
 *             i = 0
 *             while i < self.neighbor_limit:
 *                 sample_id = samples[i]             # <<<<<<<<<<<<<<
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = sample_id
 */
      __pyx_v_sample_id = (__pyx_v_samples[__pyx_v_i]);

      /* "cython_sampler.pyx":374
 *             while i < self.neighbor_limit:
 *                 sample_id = samples[i]
 *                 edges[edge_size+2*i] = node             # <<<<<<<<<<<<<<
 *                 edges[edge_size+2*i+1] = sample_id
 *                 n_depth.insert(sample_id)
 */
      (__pyx_v_edges[(__pyx_v_edge_size + (2 * __pyx_v_i))]) = __pyx_v_node;

      /* "cython_sampler.pyx":375
 *                 sample_id = samples[i]
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = sample_id             # <<<<<<<<<<<<<<
 *                 n_depth.insert(sample_id)
 *                 i += 1
 */
      (__pyx_v_edges[((__pyx_v_edge_size + (2 * __pyx_v_i)) + 1)]) = __pyx_v_sample_id;

      /* "cython_sampler.pyx":376
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = sample_id
 *                 n_depth.insert(sample_id)             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 sample_size += 1
 */
      (void)(__pyx_v_n_depth.insert(__pyx_v_sample_id));

      /* "cython_sampler.pyx":377
 *                 edges[edge_size+2*i+1] = sample_id
 *                 n_depth.insert(sample_id)
 *                 i += 1             # <<<<<<<<<<<<<<
 *                 sample_size += 1
 *         return sample_size
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "cython_sampler.pyx":378
 *                 n_depth.insert(sample_id)
 *                 i += 1
 *                 sample_size += 1             # <<<<<<<<<<<<<<
 *         return sample_size
 * 
 */
      __pyx_v_sample_size = (__pyx_v_sample_size + 1);
    }
  }
  __pyx_L3:;

  /* "cython_sampler.pyx":379
 *                 i += 1
 *                 sample_size += 1
 *         return sample_size             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_sample_size;
  goto __pyx_L0;

  /* "cython_sampler.pyx":343
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef int sample_neighbors_v1(self, int node, vector[int]& edges,             # <<<<<<<<<<<<<<
 *                                   unordered_set[int]& n_depth) nogil:
 *         cdef int sample_size = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cython_sampler.BanditSampler.sample_neighbors_v1", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "cython_sampler.pyx":384
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void sample_neighbors_v2(self, int node, vector[int]& edges) nogil:             # <<<<<<<<<<<<<<
 *         cdef int degree
 *         cdef int edge_size
 */

static void __pyx_f_14cython_sampler_13BanditSampler_sample_neighbors_v2(struct __pyx_obj_14cython_sampler_BanditSampler *__pyx_v_self, int __pyx_v_node, std::vector<int>  &__pyx_v_edges) {
  int __pyx_v_degree;
  int __pyx_v_edge_size;
  std::vector<int>  *__pyx_v_neighbors;
  std::vector<int> ::iterator __pyx_v_it;
  int __pyx_v_i;
  std::vector<int>  __pyx_v_samples;
  std::vector<double>  *__pyx_v_sample_probs;
  int __pyx_t_1;

  /* "cython_sampler.pyx":387
 *         cdef int degree
 *         cdef int edge_size
 *         cdef vector[int]* neighbors = &self.adj[node]             # <<<<<<<<<<<<<<
 *         degree = self.degree[node]
 *         edge_size = edges.size()
 */
  __pyx_v_neighbors = (&(__pyx_v_self->__pyx_base.adj[__pyx_v_node]));

  /* "cython_sampler.pyx":388
 *         cdef int edge_size
 *         cdef vector[int]* neighbors = &self.adj[node]
 *         degree = self.degree[node]             # <<<<<<<<<<<<<<
 *         edge_size = edges.size()
 *         cdef vector[int].iterator it
 */
  __pyx_v_degree = (__pyx_v_self->__pyx_base.degree[__pyx_v_node]);

  /* "cython_sampler.pyx":389
 *         cdef vector[int]* neighbors = &self.adj[node]
 *         degree = self.degree[node]
 *         edge_size = edges.size()             # <<<<<<<<<<<<<<
 *         cdef vector[int].iterator it
 *         cdef int i
 */
  __pyx_v_edge_size = __pyx_v_edges.size();

  /* "cython_sampler.pyx":394
 *         cdef vector[int] samples
 *         cdef vector[double] probs
 *         cdef vector[double]* sample_probs = &self.sample_probs[node]             # <<<<<<<<<<<<<<
 *         if degree <= self.neighbor_limit:
 *             edges.resize(edge_size + degree*2)
 */
  __pyx_v_sample_probs = (&(__pyx_v_self->__pyx_base.sample_probs[__pyx_v_node]));

  /* "cython_sampler.pyx":395
 *         cdef vector[double] probs
 *         cdef vector[double]* sample_probs = &self.sample_probs[node]
 *         if degree <= self.neighbor_limit:             # <<<<<<<<<<<<<<
 *             edges.resize(edge_size + degree*2)
 *             i = 0
 */
  __pyx_t_1 = ((__pyx_v_degree <= __pyx_v_self->__pyx_base.neighbor_limit) != 0);
  if (__pyx_t_1) {

    /* "cython_sampler.pyx":396
 *         cdef vector[double]* sample_probs = &self.sample_probs[node]
 *         if degree <= self.neighbor_limit:
 *             edges.resize(edge_size + degree*2)             # <<<<<<<<<<<<<<
 *             i = 0
 *             while i < degree:
 */
    try {
      __pyx_v_edges.resize((__pyx_v_edge_size + (__pyx_v_degree * 2)));
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 396, __pyx_L1_error)
    }

    /* "cython_sampler.pyx":397
 *         if degree <= self.neighbor_limit:
 *             edges.resize(edge_size + degree*2)
 *             i = 0             # <<<<<<<<<<<<<<
 *             while i < degree:
 *                 edges[edge_size+2*i] = node
 */
    __pyx_v_i = 0;

    /* "cython_sampler.pyx":398
 *             edges.resize(edge_size + degree*2)
 *             i = 0
 *             while i < degree:             # <<<<<<<<<<<<<<
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_i < __pyx_v_degree) != 0);
      if (!__pyx_t_1) break;

      /* "cython_sampler.pyx":399
 *             i = 0
 *             while i < degree:
 *                 edges[edge_size+2*i] = node             # <<<<<<<<<<<<<<
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]
 *                 inc(it)
 */
      (__pyx_v_edges[(__pyx_v_edge_size + (2 * __pyx_v_i))]) = __pyx_v_node;

      /* "cython_sampler.pyx":400
 *             while i < degree:
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]             # <<<<<<<<<<<<<<
 *                 inc(it)
 *                 i += 1
 */
      (__pyx_v_edges[((__pyx_v_edge_size + (2 * __pyx_v_i)) + 1)]) = ((*__pyx_v_neighbors)[__pyx_v_i]);

      /* "cython_sampler.pyx":401
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]
 *                 inc(it)             # <<<<<<<<<<<<<<
 *                 i += 1
 *         else:
 */
      (void)((++__pyx_v_it));

      /* "cython_sampler.pyx":402
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]
 *                 inc(it)
 *                 i += 1             # <<<<<<<<<<<<<<
 *         else:
 *             edges.resize(edge_size + self.neighbor_limit*2)
 */
      __pyx_v_i = (__pyx_v_i + 1);
    }

    /* "cython_sampler.pyx":395
 *         cdef vector[double] probs
 *         cdef vector[double]* sample_probs = &self.sample_probs[node]
 *         if degree <= self.neighbor_limit:             # <<<<<<<<<<<<<<
 *             edges.resize(edge_size + degree*2)
 *             i = 0
 */
    goto __pyx_L3;
  }

  /* "cython_sampler.pyx":404
 *                 i += 1
 *         else:
 *             edges.resize(edge_size + self.neighbor_limit*2)             # <<<<<<<<<<<<<<
 *             samples = random_choice(deref(neighbors), deref(sample_probs), self.neighbor_limit)
 * 
 */
  /*else*/ {
    try {
      __pyx_v_edges.resize((__pyx_v_edge_size + (__pyx_v_self->__pyx_base.neighbor_limit * 2)));
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 404, __pyx_L1_error)
    }

    /* "cython_sampler.pyx":405
 *         else:
 *             edges.resize(edge_size + self.neighbor_limit*2)
 *             samples = random_choice(deref(neighbors), deref(sample_probs), self.neighbor_limit)             # <<<<<<<<<<<<<<
 * 
 *             i = 0
 */
    __pyx_v_samples = __pyx_f_14cython_sampler_random_choice((*__pyx_v_neighbors), (*__pyx_v_sample_probs), __pyx_v_self->__pyx_base.neighbor_limit);

    /* "cython_sampler.pyx":407
 *             samples = random_choice(deref(neighbors), deref(sample_probs), self.neighbor_limit)
 * 
 *             i = 0             # <<<<<<<<<<<<<<
 *             while i < self.neighbor_limit:
 *                 edges[edge_size+2*i] = node
 */
    __pyx_v_i = 0;

    /* "cython_sampler.pyx":408
 * 
 *             i = 0
 *             while i < self.neighbor_limit:             # <<<<<<<<<<<<<<
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = samples[i]
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_i < __pyx_v_self->__pyx_base.neighbor_limit) != 0);
      if (!__pyx_t_1) break;

      /* "cython_sampler.pyx":409
 *             i = 0
 *             while i < self.neighbor_limit:
 *                 edges[edge_size+2*i] = node             # <<<<<<<<<<<<<<
 *                 edges[edge_size+2*i+1] = samples[i]
 *                 i += 1
 */
      (__pyx_v_edges[(__pyx_v_edge_size + (2 * __pyx_v_i))]) = __pyx_v_node;

      /* "cython_sampler.pyx":410
 *             while i < self.neighbor_limit:
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = samples[i]             # <<<<<<<<<<<<<<
 *                 i += 1
 * 
 */
      (__pyx_v_edges[((__pyx_v_edge_size + (2 * __pyx_v_i)) + 1)]) = (__pyx_v_samples[__pyx_v_i]);

      /* "cython_sampler.pyx":411
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = samples[i]
 *                 i += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_i = (__pyx_v_i + 1);
    }
  }
  __pyx_L3:;

  /* "cython_sampler.pyx":384
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void sample_neighbors_v2(self, int node, vector[int]& edges) nogil:             # <<<<<<<<<<<<<<
 *         cdef int degree
 *         cdef int edge_size
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cython_sampler.BanditSampler.sample_neighbors_v2", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14cython_sampler_13BanditSampler_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14cython_sampler_13BanditSampler_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14cython_sampler_13BanditSampler_6__reduce_cython__(((struct __pyx_obj_14cython_sampler_BanditSampler *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14cython_sampler_13BanditSampler_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14cython_sampler_BanditSampler *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cython_sampler.BanditSampler.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14cython_sampler_13BanditSampler_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14cython_sampler_13BanditSampler_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14cython_sampler_13BanditSampler_8__setstate_cython__(((struct __pyx_obj_14cython_sampler_BanditSampler *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14cython_sampler_13BanditSampler_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14cython_sampler_BanditSampler *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cython_sampler.BanditSampler.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython_sampler.pyx":415
 * 
 * cdef class BanditLinearSampler(Sampler):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_14cython_sampler_19BanditLinearSampler_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14cython_sampler_19BanditLinearSampler_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_14cython_sampler_19BanditLinearSampler___cinit__(((struct __pyx_obj_14cython_sampler_BanditLinearSampler *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14cython_sampler_19BanditLinearSampler___cinit__(CYTHON_UNUSED struct __pyx_obj_14cython_sampler_BanditLinearSampler *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython_sampler.pyx":418
 *         pass
 * 
 *     def update(self, np.ndarray[int,ndim=1,mode='c'] np_src_list,             # <<<<<<<<<<<<<<
 *                np.ndarray[int,ndim=1,mode='c'] np_dst_list,
 *                np.ndarray[float,ndim=1,mode='c'] np_att_list):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14cython_sampler_19BanditLinearSampler_3update(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14cython_sampler_19BanditLinearSampler_3update(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_np_src_list = 0;
  PyArrayObject *__pyx_v_np_dst_list = 0;
  PyArrayObject *__pyx_v_np_att_list = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_np_src_list,&__pyx_n_s_np_dst_list,&__pyx_n_s_np_att_list,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_np_src_list)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_np_dst_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("update", 1, 3, 3, 1); __PYX_ERR(0, 418, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_np_att_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("update", 1, 3, 3, 2); __PYX_ERR(0, 418, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "update") < 0)) __PYX_ERR(0, 418, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_np_src_list = ((PyArrayObject *)values[0]);
    __pyx_v_np_dst_list = ((PyArrayObject *)values[1]);
    __pyx_v_np_att_list = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 418, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cython_sampler.BanditLinearSampler.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_np_src_list), __pyx_ptype_5numpy_ndarray, 1, "np_src_list", 0))) __PYX_ERR(0, 418, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_np_dst_list), __pyx_ptype_5numpy_ndarray, 1, "np_dst_list", 0))) __PYX_ERR(0, 419, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_np_att_list), __pyx_ptype_5numpy_ndarray, 1, "np_att_list", 0))) __PYX_ERR(0, 420, __pyx_L1_error)
  __pyx_r = __pyx_pf_14cython_sampler_19BanditLinearSampler_2update(((struct __pyx_obj_14cython_sampler_BanditLinearSampler *)__pyx_v_self), __pyx_v_np_src_list, __pyx_v_np_dst_list, __pyx_v_np_att_list);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14cython_sampler_19BanditLinearSampler_2update(struct __pyx_obj_14cython_sampler_BanditLinearSampler *__pyx_v_self, PyArrayObject *__pyx_v_np_src_list, PyArrayObject *__pyx_v_np_dst_list, PyArrayObject *__pyx_v_np_att_list) {
  std::vector<int>  __pyx_v_src_list;
  std::vector<int>  __pyx_v_dst_list;
  std::vector<float>  __pyx_v_att_list;
  int __pyx_v_num_data;
  int __pyx_v_p;
  int __pyx_v_neighbor_limit;
  float __pyx_v_delta;
  std::unordered_map<int,std::unordered_map<int,int> >  __pyx_v_att_map;
  int __pyx_v_i;
  float __pyx_v_eta;
  PyObject *__pyx_v_np_src_set = NULL;
  std::vector<int>  __pyx_v_src_set;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_np_att_list;
  __Pyx_Buffer __pyx_pybuffer_np_att_list;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_np_dst_list;
  __Pyx_Buffer __pyx_pybuffer_np_dst_list;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_np_src_list;
  __Pyx_Buffer __pyx_pybuffer_np_src_list;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  float __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("update", 0);
  __pyx_pybuffer_np_src_list.pybuffer.buf = NULL;
  __pyx_pybuffer_np_src_list.refcount = 0;
  __pyx_pybuffernd_np_src_list.data = NULL;
  __pyx_pybuffernd_np_src_list.rcbuffer = &__pyx_pybuffer_np_src_list;
  __pyx_pybuffer_np_dst_list.pybuffer.buf = NULL;
  __pyx_pybuffer_np_dst_list.refcount = 0;
  __pyx_pybuffernd_np_dst_list.data = NULL;
  __pyx_pybuffernd_np_dst_list.rcbuffer = &__pyx_pybuffer_np_dst_list;
  __pyx_pybuffer_np_att_list.pybuffer.buf = NULL;
  __pyx_pybuffer_np_att_list.refcount = 0;
  __pyx_pybuffernd_np_att_list.data = NULL;
  __pyx_pybuffernd_np_att_list.rcbuffer = &__pyx_pybuffer_np_att_list;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_np_src_list.rcbuffer->pybuffer, (PyObject*)__pyx_v_np_src_list, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 418, __pyx_L1_error)
  }
  __pyx_pybuffernd_np_src_list.diminfo[0].strides = __pyx_pybuffernd_np_src_list.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_np_src_list.diminfo[0].shape = __pyx_pybuffernd_np_src_list.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_np_dst_list.rcbuffer->pybuffer, (PyObject*)__pyx_v_np_dst_list, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 418, __pyx_L1_error)
  }
  __pyx_pybuffernd_np_dst_list.diminfo[0].strides = __pyx_pybuffernd_np_dst_list.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_np_dst_list.diminfo[0].shape = __pyx_pybuffernd_np_dst_list.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_np_att_list.rcbuffer->pybuffer, (PyObject*)__pyx_v_np_att_list, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 418, __pyx_L1_error)
  }
  __pyx_pybuffernd_np_att_list.diminfo[0].strides = __pyx_pybuffernd_np_att_list.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_np_att_list.diminfo[0].shape = __pyx_pybuffernd_np_att_list.rcbuffer->pybuffer.shape[0];

  /* "cython_sampler.pyx":424
 *         cdef vector[int] dst_list
 *         cdef vector[float] att_list
 *         cutils.npy2vec_int(np_src_list, src_list)             # <<<<<<<<<<<<<<
 *         cutils.npy2vec_int(np_dst_list, dst_list)
 *         cutils.npy2vec_float(np_att_list, att_list)
 */
  __pyx_f_12cython_utils_npy2vec_int(((PyArrayObject *)__pyx_v_np_src_list), __pyx_v_src_list);

  /* "cython_sampler.pyx":425
 *         cdef vector[float] att_list
 *         cutils.npy2vec_int(np_src_list, src_list)
 *         cutils.npy2vec_int(np_dst_list, dst_list)             # <<<<<<<<<<<<<<
 *         cutils.npy2vec_float(np_att_list, att_list)
 * 
 */
  __pyx_f_12cython_utils_npy2vec_int(((PyArrayObject *)__pyx_v_np_dst_list), __pyx_v_dst_list);

  /* "cython_sampler.pyx":426
 *         cutils.npy2vec_int(np_src_list, src_list)
 *         cutils.npy2vec_int(np_dst_list, dst_list)
 *         cutils.npy2vec_float(np_att_list, att_list)             # <<<<<<<<<<<<<<
 * 
 *         cdef int num_data = src_list.size()
 */
  __pyx_f_12cython_utils_npy2vec_float(((PyArrayObject *)__pyx_v_np_att_list), __pyx_v_att_list);

  /* "cython_sampler.pyx":428
 *         cutils.npy2vec_float(np_att_list, att_list)
 * 
 *         cdef int num_data = src_list.size()             # <<<<<<<<<<<<<<
 *         cdef int p = 0
 *         cdef int neighbor_limit = FLAGS.neighbor_limit
 */
  __pyx_v_num_data = __pyx_v_src_list.size();

  /* "cython_sampler.pyx":429
 * 
 *         cdef int num_data = src_list.size()
 *         cdef int p = 0             # <<<<<<<<<<<<<<
 *         cdef int neighbor_limit = FLAGS.neighbor_limit
 *         cdef float delta = FLAGS.delta
 */
  __pyx_v_p = 0;

  /* "cython_sampler.pyx":430
 *         cdef int num_data = src_list.size()
 *         cdef int p = 0
 *         cdef int neighbor_limit = FLAGS.neighbor_limit             # <<<<<<<<<<<<<<
 *         cdef float delta = FLAGS.delta
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_FLAGS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_neighbor_limit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_neighbor_limit = __pyx_t_3;

  /* "cython_sampler.pyx":431
 *         cdef int p = 0
 *         cdef int neighbor_limit = FLAGS.neighbor_limit
 *         cdef float delta = FLAGS.delta             # <<<<<<<<<<<<<<
 * 
 *         # att indice map
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_FLAGS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_delta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_delta = __pyx_t_4;

  /* "cython_sampler.pyx":435
 *         # att indice map
 *         cdef unordered_map[int, unordered_map[int,int]] att_map
 *         cdef int i = 0             # <<<<<<<<<<<<<<
 *         while i < num_data:
 *             att_map[src_list[i]][dst_list[i]] = i
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":436
 *         cdef unordered_map[int, unordered_map[int,int]] att_map
 *         cdef int i = 0
 *         while i < num_data:             # <<<<<<<<<<<<<<
 *             att_map[src_list[i]][dst_list[i]] = i
 *             i += 1
 */
  while (1) {
    __pyx_t_5 = ((__pyx_v_i < __pyx_v_num_data) != 0);
    if (!__pyx_t_5) break;

    /* "cython_sampler.pyx":437
 *         cdef int i = 0
 *         while i < num_data:
 *             att_map[src_list[i]][dst_list[i]] = i             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
    ((__pyx_v_att_map[(__pyx_v_src_list[__pyx_v_i])])[(__pyx_v_dst_list[__pyx_v_i])]) = __pyx_v_i;

    /* "cython_sampler.pyx":438
 *         while i < num_data:
 *             att_map[src_list[i]][dst_list[i]] = i
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 *         with nogil, parallel(num_threads=self.num_proc):
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cython_sampler.pyx":440
 *             i += 1
 * 
 *         with nogil, parallel(num_threads=self.num_proc):             # <<<<<<<<<<<<<<
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.update_sample_weights(
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            #ifdef _OPENMP
            #pragma omp parallel  private(__pyx_t_3, __pyx_t_6, __pyx_t_7) num_threads(__pyx_v_self->__pyx_base.num_proc)
            #endif /* _OPENMP */
            {

                /* "cython_sampler.pyx":441
 * 
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):             # <<<<<<<<<<<<<<
 *                 self.update_sample_weights(
 *                         att_map, p, num_data, src_list, dst_list, att_list,
 */
                __pyx_t_3 = __pyx_v_self->__pyx_base.num_proc;
                if (1 == 0) abort();
                {
                    __pyx_t_7 = (__pyx_t_3 - 0 + 1 - 1/abs(1)) / 1;
                    if (__pyx_t_7 > 0)
                    {
                        #ifdef _OPENMP
                        #pragma omp for firstprivate(__pyx_v_p) lastprivate(__pyx_v_p) schedule(dynamic)
                        #endif /* _OPENMP */
                        for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_7; __pyx_t_6++){
                            {
                                __pyx_v_p = (int)(0 + 1 * __pyx_t_6);

                                /* "cython_sampler.pyx":442
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.update_sample_weights(             # <<<<<<<<<<<<<<
 *                         att_map, p, num_data, src_list, dst_list, att_list,
 *                         neighbor_limit, delta)
 */
                                ((struct __pyx_vtabstruct_14cython_sampler_BanditLinearSampler *)__pyx_v_self->__pyx_base.__pyx_vtab)->update_sample_weights(__pyx_v_self, __pyx_v_att_map, __pyx_v_p, __pyx_v_num_data, __pyx_v_src_list, __pyx_v_dst_list, __pyx_v_att_list, __pyx_v_neighbor_limit, __pyx_v_delta);
                            }
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "cython_sampler.pyx":440
 *             i += 1
 * 
 *         with nogil, parallel(num_threads=self.num_proc):             # <<<<<<<<<<<<<<
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.update_sample_weights(
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L7;
        }
        __pyx_L7:;
      }
  }

  /* "cython_sampler.pyx":446
 *                         neighbor_limit, delta)
 * 
 *         cdef float eta = FLAGS.eta             # <<<<<<<<<<<<<<
 *         np_src_set = np.array(list(set(np_src_list)))
 *         cdef vector[int] src_set
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_FLAGS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_eta); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_eta = __pyx_t_4;

  /* "cython_sampler.pyx":447
 * 
 *         cdef float eta = FLAGS.eta
 *         np_src_set = np.array(list(set(np_src_list)))             # <<<<<<<<<<<<<<
 *         cdef vector[int] src_set
 *         cutils.npy2vec_int(np_src_set, src_set)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PySet_New(((PyObject *)__pyx_v_np_src_list)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_1, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_np_src_set = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "cython_sampler.pyx":449
 *         np_src_set = np.array(list(set(np_src_list)))
 *         cdef vector[int] src_set
 *         cutils.npy2vec_int(np_src_set, src_set)             # <<<<<<<<<<<<<<
 *         num_data = src_set.size()
 *         with nogil, parallel(num_threads=self.num_proc):
 */
  if (!(likely(((__pyx_v_np_src_set) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_np_src_set, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 449, __pyx_L1_error)
  __pyx_f_12cython_utils_npy2vec_int(((PyArrayObject *)__pyx_v_np_src_set), __pyx_v_src_set);

  /* "cython_sampler.pyx":450
 *         cdef vector[int] src_set
 *         cutils.npy2vec_int(np_src_set, src_set)
 *         num_data = src_set.size()             # <<<<<<<<<<<<<<
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):
 */
  __pyx_v_num_data = __pyx_v_src_set.size();

  /* "cython_sampler.pyx":451
 *         cutils.npy2vec_int(np_src_set, src_set)
 *         num_data = src_set.size()
 *         with nogil, parallel(num_threads=self.num_proc):             # <<<<<<<<<<<<<<
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.update_sample_probs(p, num_data, src_set, eta)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            #ifdef _OPENMP
            #pragma omp parallel  private(__pyx_t_3, __pyx_t_6, __pyx_t_7) num_threads(__pyx_v_self->__pyx_base.num_proc)
            #endif /* _OPENMP */
            {

                /* "cython_sampler.pyx":452
 *         num_data = src_set.size()
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):             # <<<<<<<<<<<<<<
 *                 self.update_sample_probs(p, num_data, src_set, eta)
 * 
 */
                __pyx_t_7 = __pyx_v_self->__pyx_base.num_proc;
                if (1 == 0) abort();
                {
                    __pyx_t_3 = (__pyx_t_7 - 0 + 1 - 1/abs(1)) / 1;
                    if (__pyx_t_3 > 0)
                    {
                        #ifdef _OPENMP
                        #pragma omp for firstprivate(__pyx_v_p) lastprivate(__pyx_v_p) schedule(dynamic)
                        #endif /* _OPENMP */
                        for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_3; __pyx_t_6++){
                            {
                                __pyx_v_p = (int)(0 + 1 * __pyx_t_6);

                                /* "cython_sampler.pyx":453
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.update_sample_probs(p, num_data, src_set, eta)             # <<<<<<<<<<<<<<
 * 
 *     # disable index bounds checking and negative indexing for speedups
 */
                                ((struct __pyx_vtabstruct_14cython_sampler_BanditLinearSampler *)__pyx_v_self->__pyx_base.__pyx_vtab)->update_sample_probs(__pyx_v_self, __pyx_v_p, __pyx_v_num_data, __pyx_v_src_set, __pyx_v_eta);
                            }
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "cython_sampler.pyx":451
 *         cutils.npy2vec_int(np_src_set, src_set)
 *         num_data = src_set.size()
 *         with nogil, parallel(num_threads=self.num_proc):             # <<<<<<<<<<<<<<
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.update_sample_probs(p, num_data, src_set, eta)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L22;
        }
        __pyx_L22:;
      }
  }

  /* "cython_sampler.pyx":418
 *         pass
 * 
 *     def update(self, np.ndarray[int,ndim=1,mode='c'] np_src_list,             # <<<<<<<<<<<<<<
 *                np.ndarray[int,ndim=1,mode='c'] np_dst_list,
 *                np.ndarray[float,ndim=1,mode='c'] np_att_list):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_np_att_list.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_np_dst_list.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_np_src_list.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cython_sampler.BanditLinearSampler.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_np_att_list.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_np_dst_list.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_np_src_list.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_np_src_set);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython_sampler.pyx":458
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void update_sample_weights(             # <<<<<<<<<<<<<<
 *             self, unordered_map[int,unordered_map[int,int]]& att_map, int p, int num_data,
 *             vector[int]& src_list, vector[int]& dst_list, vector[float]& att_list,
 */

static void __pyx_f_14cython_sampler_19BanditLinearSampler_update_sample_weights(struct __pyx_obj_14cython_sampler_BanditLinearSampler *__pyx_v_self, std::unordered_map<int,std::unordered_map<int,int> >  &__pyx_v_att_map, int __pyx_v_p, int __pyx_v_num_data, std::vector<int>  &__pyx_v_src_list, std::vector<int>  &__pyx_v_dst_list, std::vector<float>  &__pyx_v_att_list, int __pyx_v_neighbor_limit, float __pyx_v_delta) {
  int __pyx_v_i;
  int __pyx_v_src;
  int __pyx_v_dst;
  int __pyx_v_degree;
  int __pyx_v_idx;
  float __pyx_v_att;
  float __pyx_v_reward;
  int __pyx_t_1;
  long __pyx_t_2;
  float __pyx_t_3;
  double __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;

  /* "cython_sampler.pyx":462
 *             vector[int]& src_list, vector[int]& dst_list, vector[float]& att_list,
 *             int neighbor_limit, float delta) nogil:
 *         cdef int i = 0             # <<<<<<<<<<<<<<
 *         cdef int src = 0
 *         cdef int dst = 0
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":463
 *             int neighbor_limit, float delta) nogil:
 *         cdef int i = 0
 *         cdef int src = 0             # <<<<<<<<<<<<<<
 *         cdef int dst = 0
 *         cdef int degree = 0
 */
  __pyx_v_src = 0;

  /* "cython_sampler.pyx":464
 *         cdef int i = 0
 *         cdef int src = 0
 *         cdef int dst = 0             # <<<<<<<<<<<<<<
 *         cdef int degree = 0
 *         cdef int idx = 0
 */
  __pyx_v_dst = 0;

  /* "cython_sampler.pyx":465
 *         cdef int src = 0
 *         cdef int dst = 0
 *         cdef int degree = 0             # <<<<<<<<<<<<<<
 *         cdef int idx = 0
 *         cdef float att = 0.
 */
  __pyx_v_degree = 0;

  /* "cython_sampler.pyx":466
 *         cdef int dst = 0
 *         cdef int degree = 0
 *         cdef int idx = 0             # <<<<<<<<<<<<<<
 *         cdef float att = 0.
 *         cdef float reward = 0.
 */
  __pyx_v_idx = 0;

  /* "cython_sampler.pyx":467
 *         cdef int degree = 0
 *         cdef int idx = 0
 *         cdef float att = 0.             # <<<<<<<<<<<<<<
 *         cdef float reward = 0.
 *         while i < num_data:
 */
  __pyx_v_att = 0.;

  /* "cython_sampler.pyx":468
 *         cdef int idx = 0
 *         cdef float att = 0.
 *         cdef float reward = 0.             # <<<<<<<<<<<<<<
 *         while i < num_data:
 *             if i % self.num_proc != p:
 */
  __pyx_v_reward = 0.;

  /* "cython_sampler.pyx":469
 *         cdef float att = 0.
 *         cdef float reward = 0.
 *         while i < num_data:             # <<<<<<<<<<<<<<
 *             if i % self.num_proc != p:
 *                 i += 1
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_i < __pyx_v_num_data) != 0);
    if (!__pyx_t_1) break;

    /* "cython_sampler.pyx":470
 *         cdef float reward = 0.
 *         while i < num_data:
 *             if i % self.num_proc != p:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    if (unlikely(__pyx_v_self->__pyx_base.num_proc == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 470, __pyx_L1_error)
    }
    __pyx_t_1 = ((__Pyx_mod_int(__pyx_v_i, __pyx_v_self->__pyx_base.num_proc) != __pyx_v_p) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":471
 *         while i < num_data:
 *             if i % self.num_proc != p:
 *                 i += 1             # <<<<<<<<<<<<<<
 *                 continue
 *             src = src_list[i]
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "cython_sampler.pyx":472
 *             if i % self.num_proc != p:
 *                 i += 1
 *                 continue             # <<<<<<<<<<<<<<
 *             src = src_list[i]
 *             dst = dst_list[i]
 */
      goto __pyx_L3_continue;

      /* "cython_sampler.pyx":470
 *         cdef float reward = 0.
 *         while i < num_data:
 *             if i % self.num_proc != p:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    }

    /* "cython_sampler.pyx":473
 *                 i += 1
 *                 continue
 *             src = src_list[i]             # <<<<<<<<<<<<<<
 *             dst = dst_list[i]
 *             degree = self.degree[src]
 */
    __pyx_v_src = (__pyx_v_src_list[__pyx_v_i]);

    /* "cython_sampler.pyx":474
 *                 continue
 *             src = src_list[i]
 *             dst = dst_list[i]             # <<<<<<<<<<<<<<
 *             degree = self.degree[src]
 *             if degree <= neighbor_limit:
 */
    __pyx_v_dst = (__pyx_v_dst_list[__pyx_v_i]);

    /* "cython_sampler.pyx":475
 *             src = src_list[i]
 *             dst = dst_list[i]
 *             degree = self.degree[src]             # <<<<<<<<<<<<<<
 *             if degree <= neighbor_limit:
 *                 i += 1
 */
    __pyx_v_degree = (__pyx_v_self->__pyx_base.degree[__pyx_v_src]);

    /* "cython_sampler.pyx":476
 *             dst = dst_list[i]
 *             degree = self.degree[src]
 *             if degree <= neighbor_limit:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    __pyx_t_1 = ((__pyx_v_degree <= __pyx_v_neighbor_limit) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":477
 *             degree = self.degree[src]
 *             if degree <= neighbor_limit:
 *                 i += 1             # <<<<<<<<<<<<<<
 *                 continue
 *             delta = delta/degree**2
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "cython_sampler.pyx":478
 *             if degree <= neighbor_limit:
 *                 i += 1
 *                 continue             # <<<<<<<<<<<<<<
 *             delta = delta/degree**2
 *             idx = self.sample_index[src][dst]
 */
      goto __pyx_L3_continue;

      /* "cython_sampler.pyx":476
 *             dst = dst_list[i]
 *             degree = self.degree[src]
 *             if degree <= neighbor_limit:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    }

    /* "cython_sampler.pyx":479
 *                 i += 1
 *                 continue
 *             delta = delta/degree**2             # <<<<<<<<<<<<<<
 *             idx = self.sample_index[src][dst]
 *             att = att_list[att_map[src][dst]]
 */
    __pyx_t_2 = __Pyx_pow_long(((long)__pyx_v_degree), 2);
    if (unlikely(__pyx_t_2 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 479, __pyx_L1_error)
    }
    __pyx_v_delta = (__pyx_v_delta / ((float)__pyx_t_2));

    /* "cython_sampler.pyx":480
 *                 continue
 *             delta = delta/degree**2
 *             idx = self.sample_index[src][dst]             # <<<<<<<<<<<<<<
 *             att = att_list[att_map[src][dst]]
 *             reward = delta*att**2/self.sample_probs[src][idx]**2
 */
    __pyx_v_idx = ((__pyx_v_self->__pyx_base.sample_index[__pyx_v_src])[__pyx_v_dst]);

    /* "cython_sampler.pyx":481
 *             delta = delta/degree**2
 *             idx = self.sample_index[src][dst]
 *             att = att_list[att_map[src][dst]]             # <<<<<<<<<<<<<<
 *             reward = delta*att**2/self.sample_probs[src][idx]**2
 *             #if reward > self.max_reward:
 */
    __pyx_v_att = (__pyx_v_att_list[((__pyx_v_att_map[__pyx_v_src])[__pyx_v_dst])]);

    /* "cython_sampler.pyx":482
 *             idx = self.sample_index[src][dst]
 *             att = att_list[att_map[src][dst]]
 *             reward = delta*att**2/self.sample_probs[src][idx]**2             # <<<<<<<<<<<<<<
 *             #if reward > self.max_reward:
 *             #    reward = self.max_reward
 */
    __pyx_t_3 = (__pyx_v_delta * powf(__pyx_v_att, 2.0));
    __pyx_t_4 = pow(((double)((__pyx_v_self->__pyx_base.sample_probs[__pyx_v_src])[__pyx_v_idx])), 2.0);
    if (unlikely(__pyx_t_4 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 482, __pyx_L1_error)
    }
    __pyx_v_reward = (((double)__pyx_t_3) / __pyx_t_4);

    /* "cython_sampler.pyx":485
 *             #if reward > self.max_reward:
 *             #    reward = self.max_reward
 *             self.sample_weights[src][idx] += reward             # <<<<<<<<<<<<<<
 *             #self.sample_weights[src][idx] *= exp(reward)
 *             i += 1
 */
    __pyx_t_5 = __pyx_v_src;
    __pyx_t_6 = __pyx_v_idx;
    ((__pyx_v_self->__pyx_base.sample_weights[__pyx_t_5])[__pyx_t_6]) = (((__pyx_v_self->__pyx_base.sample_weights[__pyx_t_5])[__pyx_t_6]) + __pyx_v_reward);

    /* "cython_sampler.pyx":487
 *             self.sample_weights[src][idx] += reward
 *             #self.sample_weights[src][idx] *= exp(reward)
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 *     @cython.wraparound(False)
 */
    __pyx_v_i = (__pyx_v_i + 1);
    __pyx_L3_continue:;
  }

  /* "cython_sampler.pyx":458
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void update_sample_weights(             # <<<<<<<<<<<<<<
 *             self, unordered_map[int,unordered_map[int,int]]& att_map, int p, int num_data,
 *             vector[int]& src_list, vector[int]& dst_list, vector[float]& att_list,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cython_sampler.BanditLinearSampler.update_sample_weights", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
}

/* "cython_sampler.pyx":491
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void update_sample_probs(             # <<<<<<<<<<<<<<
 *             self, int p, int num_data, vector[int] src_list, float eta) nogil:
 *         cdef int i = 0
 */

static void __pyx_f_14cython_sampler_19BanditLinearSampler_update_sample_probs(struct __pyx_obj_14cython_sampler_BanditLinearSampler *__pyx_v_self, int __pyx_v_p, int __pyx_v_num_data, std::vector<int>  __pyx_v_src_list, float __pyx_v_eta) {
  int __pyx_v_i;
  int __pyx_v_idx;
  CYTHON_UNUSED int __pyx_v_dst;
  int __pyx_v_degree;
  double __pyx_v_unifom_prob;
  int __pyx_v_src;
  double __pyx_v_weights_sum;
  int __pyx_t_1;
  double __pyx_t_2;

  /* "cython_sampler.pyx":493
 *     cdef void update_sample_probs(
 *             self, int p, int num_data, vector[int] src_list, float eta) nogil:
 *         cdef int i = 0             # <<<<<<<<<<<<<<
 *         cdef int idx = 0
 *         cdef int dst = 0
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":494
 *             self, int p, int num_data, vector[int] src_list, float eta) nogil:
 *         cdef int i = 0
 *         cdef int idx = 0             # <<<<<<<<<<<<<<
 *         cdef int dst = 0
 *         cdef int degree = 0
 */
  __pyx_v_idx = 0;

  /* "cython_sampler.pyx":495
 *         cdef int i = 0
 *         cdef int idx = 0
 *         cdef int dst = 0             # <<<<<<<<<<<<<<
 *         cdef int degree = 0
 *         cdef double unifom_prob = 0.
 */
  __pyx_v_dst = 0;

  /* "cython_sampler.pyx":496
 *         cdef int idx = 0
 *         cdef int dst = 0
 *         cdef int degree = 0             # <<<<<<<<<<<<<<
 *         cdef double unifom_prob = 0.
 *         cdef int src = 0
 */
  __pyx_v_degree = 0;

  /* "cython_sampler.pyx":497
 *         cdef int dst = 0
 *         cdef int degree = 0
 *         cdef double unifom_prob = 0.             # <<<<<<<<<<<<<<
 *         cdef int src = 0
 *         while i < num_data:
 */
  __pyx_v_unifom_prob = 0.;

  /* "cython_sampler.pyx":498
 *         cdef int degree = 0
 *         cdef double unifom_prob = 0.
 *         cdef int src = 0             # <<<<<<<<<<<<<<
 *         while i < num_data:
 *             if i % self.num_proc != p:
 */
  __pyx_v_src = 0;

  /* "cython_sampler.pyx":499
 *         cdef double unifom_prob = 0.
 *         cdef int src = 0
 *         while i < num_data:             # <<<<<<<<<<<<<<
 *             if i % self.num_proc != p:
 *                 i += 1
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_i < __pyx_v_num_data) != 0);
    if (!__pyx_t_1) break;

    /* "cython_sampler.pyx":500
 *         cdef int src = 0
 *         while i < num_data:
 *             if i % self.num_proc != p:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    if (unlikely(__pyx_v_self->__pyx_base.num_proc == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 500, __pyx_L1_error)
    }
    __pyx_t_1 = ((__Pyx_mod_int(__pyx_v_i, __pyx_v_self->__pyx_base.num_proc) != __pyx_v_p) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":501
 *         while i < num_data:
 *             if i % self.num_proc != p:
 *                 i += 1             # <<<<<<<<<<<<<<
 *                 continue
 *             src = src_list[i]
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "cython_sampler.pyx":502
 *             if i % self.num_proc != p:
 *                 i += 1
 *                 continue             # <<<<<<<<<<<<<<
 *             src = src_list[i]
 *             degree = self.degree[src]
 */
      goto __pyx_L3_continue;

      /* "cython_sampler.pyx":500
 *         cdef int src = 0
 *         while i < num_data:
 *             if i % self.num_proc != p:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    }

    /* "cython_sampler.pyx":503
 *                 i += 1
 *                 continue
 *             src = src_list[i]             # <<<<<<<<<<<<<<
 *             degree = self.degree[src]
 *             if degree <= self.neighbor_limit:
 */
    __pyx_v_src = (__pyx_v_src_list[__pyx_v_i]);

    /* "cython_sampler.pyx":504
 *                 continue
 *             src = src_list[i]
 *             degree = self.degree[src]             # <<<<<<<<<<<<<<
 *             if degree <= self.neighbor_limit:
 *                 i += 1
 */
    __pyx_v_degree = (__pyx_v_self->__pyx_base.degree[__pyx_v_src]);

    /* "cython_sampler.pyx":505
 *             src = src_list[i]
 *             degree = self.degree[src]
 *             if degree <= self.neighbor_limit:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    __pyx_t_1 = ((__pyx_v_degree <= __pyx_v_self->__pyx_base.neighbor_limit) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":506
 *             degree = self.degree[src]
 *             if degree <= self.neighbor_limit:
 *                 i += 1             # <<<<<<<<<<<<<<
 *                 continue
 *             weights_sum = sum_double(self.sample_weights[src])
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "cython_sampler.pyx":507
 *             if degree <= self.neighbor_limit:
 *                 i += 1
 *                 continue             # <<<<<<<<<<<<<<
 *             weights_sum = sum_double(self.sample_weights[src])
 *             unifom_prob = 1./degree
 */
      goto __pyx_L3_continue;

      /* "cython_sampler.pyx":505
 *             src = src_list[i]
 *             degree = self.degree[src]
 *             if degree <= self.neighbor_limit:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    }

    /* "cython_sampler.pyx":508
 *                 i += 1
 *                 continue
 *             weights_sum = sum_double(self.sample_weights[src])             # <<<<<<<<<<<<<<
 *             unifom_prob = 1./degree
 * 
 */
    __pyx_v_weights_sum = __pyx_f_14cython_sampler_sum_double((__pyx_v_self->__pyx_base.sample_weights[__pyx_v_src]));

    /* "cython_sampler.pyx":509
 *                 continue
 *             weights_sum = sum_double(self.sample_weights[src])
 *             unifom_prob = 1./degree             # <<<<<<<<<<<<<<
 * 
 *             idx = 0
 */
    if (unlikely(__pyx_v_degree == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 509, __pyx_L1_error)
    }
    __pyx_v_unifom_prob = (1. / ((double)__pyx_v_degree));

    /* "cython_sampler.pyx":511
 *             unifom_prob = 1./degree
 * 
 *             idx = 0             # <<<<<<<<<<<<<<
 *             while idx < degree:
 *                 self.sample_probs[src][idx] = (1-eta)*self.sample_weights[src][idx] / weights_sum \
 */
    __pyx_v_idx = 0;

    /* "cython_sampler.pyx":512
 * 
 *             idx = 0
 *             while idx < degree:             # <<<<<<<<<<<<<<
 *                 self.sample_probs[src][idx] = (1-eta)*self.sample_weights[src][idx] / weights_sum \
 *                                               + eta*unifom_prob
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_idx < __pyx_v_degree) != 0);
      if (!__pyx_t_1) break;

      /* "cython_sampler.pyx":513
 *             idx = 0
 *             while idx < degree:
 *                 self.sample_probs[src][idx] = (1-eta)*self.sample_weights[src][idx] / weights_sum \             # <<<<<<<<<<<<<<
 *                                               + eta*unifom_prob
 *                 idx += 1
 */
      __pyx_t_2 = ((1.0 - __pyx_v_eta) * ((__pyx_v_self->__pyx_base.sample_weights[__pyx_v_src])[__pyx_v_idx]));
      if (unlikely(__pyx_v_weights_sum == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 513, __pyx_L1_error)
      }

      /* "cython_sampler.pyx":514
 *             while idx < degree:
 *                 self.sample_probs[src][idx] = (1-eta)*self.sample_weights[src][idx] / weights_sum \
 *                                               + eta*unifom_prob             # <<<<<<<<<<<<<<
 *                 idx += 1
 *             i += 1
 */
      ((__pyx_v_self->__pyx_base.sample_probs[__pyx_v_src])[__pyx_v_idx]) = ((__pyx_t_2 / __pyx_v_weights_sum) + (__pyx_v_eta * __pyx_v_unifom_prob));

      /* "cython_sampler.pyx":515
 *                 self.sample_probs[src][idx] = (1-eta)*self.sample_weights[src][idx] / weights_sum \
 *                                               + eta*unifom_prob
 *                 idx += 1             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
      __pyx_v_idx = (__pyx_v_idx + 1);
    }

    /* "cython_sampler.pyx":516
 *                                               + eta*unifom_prob
 *                 idx += 1
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);
    __pyx_L3_continue:;
  }

  /* "cython_sampler.pyx":491
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void update_sample_probs(             # <<<<<<<<<<<<<<
 *             self, int p, int num_data, vector[int] src_list, float eta) nogil:
 *         cdef int i = 0
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cython_sampler.BanditLinearSampler.update_sample_probs", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
}

/* "cython_sampler.pyx":521
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     def sample_graph(self, py_roots):             # <<<<<<<<<<<<<<
 *         cdef vector[int] roots
 *         cutils.npy2vec_int(py_roots, roots)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14cython_sampler_19BanditLinearSampler_5sample_graph(PyObject *__pyx_v_self, PyObject *__pyx_v_py_roots); /*proto*/
static PyObject *__pyx_pw_14cython_sampler_19BanditLinearSampler_5sample_graph(PyObject *__pyx_v_self, PyObject *__pyx_v_py_roots) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sample_graph (wrapper)", 0);
  __pyx_r = __pyx_pf_14cython_sampler_19BanditLinearSampler_4sample_graph(((struct __pyx_obj_14cython_sampler_BanditLinearSampler *)__pyx_v_self), ((PyObject *)__pyx_v_py_roots));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14cython_sampler_19BanditLinearSampler_4sample_graph(struct __pyx_obj_14cython_sampler_BanditLinearSampler *__pyx_v_self, PyObject *__pyx_v_py_roots) {
  std::vector<int>  __pyx_v_roots;
  std::vector<int>  __pyx_v_edges;
  std::unordered_set<int>  __pyx_v_n_depth;
  int __pyx_v_num_data;
  int __pyx_v_p;
  std::vector<std::vector<int> >  __pyx_v_edges_all;
  std::vector<std::unordered_set<int> >  __pyx_v_n_depth_all;
  std::unordered_set<int> ::iterator __pyx_v_it;
  std::vector<int> ::iterator __pyx_v_found;
  int __pyx_v_i;
  int __pyx_v_edge_size;
  CYTHON_UNUSED int __pyx_v_k;
  std::vector<int>  __pyx_v_n_depth_vec;
  struct __pyx_obj_12cython_utils_array_wrapper_int *__pyx_v_w_edges = 0;
  PyObject *__pyx_v_np_edges = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  std::vector<int>  __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("sample_graph", 0);

  /* "cython_sampler.pyx":523
 *     def sample_graph(self, py_roots):
 *         cdef vector[int] roots
 *         cutils.npy2vec_int(py_roots, roots)             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[int] edges
 */
  if (!(likely(((__pyx_v_py_roots) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_py_roots, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 523, __pyx_L1_error)
  __pyx_f_12cython_utils_npy2vec_int(((PyArrayObject *)__pyx_v_py_roots), __pyx_v_roots);

  /* "cython_sampler.pyx":529
 * 
 *         # 1st layer
 *         cdef int num_data = roots.size()             # <<<<<<<<<<<<<<
 *         cdef int p = 0
 *         cdef vector[vector[int]] edges_all
 */
  __pyx_v_num_data = __pyx_v_roots.size();

  /* "cython_sampler.pyx":530
 *         # 1st layer
 *         cdef int num_data = roots.size()
 *         cdef int p = 0             # <<<<<<<<<<<<<<
 *         cdef vector[vector[int]] edges_all
 *         cdef vector[unordered_set[int]] n_depth_all
 */
  __pyx_v_p = 0;

  /* "cython_sampler.pyx":533
 *         cdef vector[vector[int]] edges_all
 *         cdef vector[unordered_set[int]] n_depth_all
 *         edges_all.resize(self.num_proc)             # <<<<<<<<<<<<<<
 *         n_depth_all.resize(self.num_proc)
 *         with nogil, parallel(num_threads=self.num_proc):
 */
  try {
    __pyx_v_edges_all.resize(__pyx_v_self->__pyx_base.num_proc);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 533, __pyx_L1_error)
  }

  /* "cython_sampler.pyx":534
 *         cdef vector[unordered_set[int]] n_depth_all
 *         edges_all.resize(self.num_proc)
 *         n_depth_all.resize(self.num_proc)             # <<<<<<<<<<<<<<
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):
 */
  try {
    __pyx_v_n_depth_all.resize(__pyx_v_self->__pyx_base.num_proc);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 534, __pyx_L1_error)
  }

  /* "cython_sampler.pyx":535
 *         edges_all.resize(self.num_proc)
 *         n_depth_all.resize(self.num_proc)
 *         with nogil, parallel(num_threads=self.num_proc):             # <<<<<<<<<<<<<<
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.c_sample_graph_v1(p, num_data, roots, edges_all[p], n_depth_all[p])
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            #ifdef _OPENMP
            #pragma omp parallel  private(__pyx_t_1, __pyx_t_2, __pyx_t_3) num_threads(__pyx_v_self->__pyx_base.num_proc)
            #endif /* _OPENMP */
            {

                /* "cython_sampler.pyx":536
 *         n_depth_all.resize(self.num_proc)
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):             # <<<<<<<<<<<<<<
 *                 self.c_sample_graph_v1(p, num_data, roots, edges_all[p], n_depth_all[p])
 * 
 */
                __pyx_t_1 = __pyx_v_self->__pyx_base.num_proc;
                if (1 == 0) abort();
                {
                    __pyx_t_3 = (__pyx_t_1 - 0 + 1 - 1/abs(1)) / 1;
                    if (__pyx_t_3 > 0)
                    {
                        #ifdef _OPENMP
                        #pragma omp for firstprivate(__pyx_v_p) lastprivate(__pyx_v_p) schedule(dynamic)
                        #endif /* _OPENMP */
                        for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_3; __pyx_t_2++){
                            {
                                __pyx_v_p = (int)(0 + 1 * __pyx_t_2);

                                /* "cython_sampler.pyx":537
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.c_sample_graph_v1(p, num_data, roots, edges_all[p], n_depth_all[p])             # <<<<<<<<<<<<<<
 * 
 *         cdef unordered_set[int].iterator it
 */
                                ((struct __pyx_vtabstruct_14cython_sampler_BanditLinearSampler *)__pyx_v_self->__pyx_base.__pyx_vtab)->c_sample_graph_v1(__pyx_v_self, __pyx_v_p, __pyx_v_num_data, __pyx_v_roots, (__pyx_v_edges_all[__pyx_v_p]), (__pyx_v_n_depth_all[__pyx_v_p]));
                            }
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "cython_sampler.pyx":535
 *         edges_all.resize(self.num_proc)
 *         n_depth_all.resize(self.num_proc)
 *         with nogil, parallel(num_threads=self.num_proc):             # <<<<<<<<<<<<<<
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.c_sample_graph_v1(p, num_data, roots, edges_all[p], n_depth_all[p])
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cython_sampler.pyx":542
 *         cdef vector[int].iterator found
 * 
 *         cdef int i = 0             # <<<<<<<<<<<<<<
 *         cdef int edge_size = edges.size()
 *         while i < self.num_proc:
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":543
 * 
 *         cdef int i = 0
 *         cdef int edge_size = edges.size()             # <<<<<<<<<<<<<<
 *         while i < self.num_proc:
 *             edge_size += edges_all[i].size()
 */
  __pyx_v_edge_size = __pyx_v_edges.size();

  /* "cython_sampler.pyx":544
 *         cdef int i = 0
 *         cdef int edge_size = edges.size()
 *         while i < self.num_proc:             # <<<<<<<<<<<<<<
 *             edge_size += edges_all[i].size()
 *             i += 1
 */
  while (1) {
    __pyx_t_4 = ((__pyx_v_i < __pyx_v_self->__pyx_base.num_proc) != 0);
    if (!__pyx_t_4) break;

    /* "cython_sampler.pyx":545
 *         cdef int edge_size = edges.size()
 *         while i < self.num_proc:
 *             edge_size += edges_all[i].size()             # <<<<<<<<<<<<<<
 *             i += 1
 *         edges.reserve(edge_size)
 */
    __pyx_v_edge_size = (__pyx_v_edge_size + (__pyx_v_edges_all[__pyx_v_i]).size());

    /* "cython_sampler.pyx":546
 *         while i < self.num_proc:
 *             edge_size += edges_all[i].size()
 *             i += 1             # <<<<<<<<<<<<<<
 *         edges.reserve(edge_size)
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cython_sampler.pyx":547
 *             edge_size += edges_all[i].size()
 *             i += 1
 *         edges.reserve(edge_size)             # <<<<<<<<<<<<<<
 * 
 *         i = 0
 */
  __pyx_v_edges.reserve(__pyx_v_edge_size);

  /* "cython_sampler.pyx":549
 *         edges.reserve(edge_size)
 * 
 *         i = 0             # <<<<<<<<<<<<<<
 *         cdef int k = 0
 *         while i < self.num_proc:
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":550
 * 
 *         i = 0
 *         cdef int k = 0             # <<<<<<<<<<<<<<
 *         while i < self.num_proc:
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())
 */
  __pyx_v_k = 0;

  /* "cython_sampler.pyx":551
 *         i = 0
 *         cdef int k = 0
 *         while i < self.num_proc:             # <<<<<<<<<<<<<<
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())
 *             it = n_depth_all[i].begin()
 */
  while (1) {
    __pyx_t_4 = ((__pyx_v_i < __pyx_v_self->__pyx_base.num_proc) != 0);
    if (!__pyx_t_4) break;

    /* "cython_sampler.pyx":552
 *         cdef int k = 0
 *         while i < self.num_proc:
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())             # <<<<<<<<<<<<<<
 *             it = n_depth_all[i].begin()
 *             while it != n_depth_all[i].end():
 */
    try {
      __pyx_v_edges.insert(__pyx_v_edges.end(), (__pyx_v_edges_all[__pyx_v_i]).begin(), (__pyx_v_edges_all[__pyx_v_i]).end());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 552, __pyx_L1_error)
    }

    /* "cython_sampler.pyx":553
 *         while i < self.num_proc:
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())
 *             it = n_depth_all[i].begin()             # <<<<<<<<<<<<<<
 *             while it != n_depth_all[i].end():
 *                 found = find[vector[int].iterator, int](roots.begin(), roots.end(), deref(it))
 */
    __pyx_v_it = (__pyx_v_n_depth_all[__pyx_v_i]).begin();

    /* "cython_sampler.pyx":554
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())
 *             it = n_depth_all[i].begin()
 *             while it != n_depth_all[i].end():             # <<<<<<<<<<<<<<
 *                 found = find[vector[int].iterator, int](roots.begin(), roots.end(), deref(it))
 *                 if found != roots.end():
 */
    while (1) {
      __pyx_t_4 = ((__pyx_v_it != (__pyx_v_n_depth_all[__pyx_v_i]).end()) != 0);
      if (!__pyx_t_4) break;

      /* "cython_sampler.pyx":555
 *             it = n_depth_all[i].begin()
 *             while it != n_depth_all[i].end():
 *                 found = find[vector[int].iterator, int](roots.begin(), roots.end(), deref(it))             # <<<<<<<<<<<<<<
 *                 if found != roots.end():
 *                     inc(it)
 */
      __pyx_v_found = std::find<std::vector<int> ::iterator,int>(__pyx_v_roots.begin(), __pyx_v_roots.end(), (*__pyx_v_it));

      /* "cython_sampler.pyx":556
 *             while it != n_depth_all[i].end():
 *                 found = find[vector[int].iterator, int](roots.begin(), roots.end(), deref(it))
 *                 if found != roots.end():             # <<<<<<<<<<<<<<
 *                     inc(it)
 *                     continue
 */
      __pyx_t_4 = ((__pyx_v_found != __pyx_v_roots.end()) != 0);
      if (__pyx_t_4) {

        /* "cython_sampler.pyx":557
 *                 found = find[vector[int].iterator, int](roots.begin(), roots.end(), deref(it))
 *                 if found != roots.end():
 *                     inc(it)             # <<<<<<<<<<<<<<
 *                     continue
 *                 n_depth.insert(deref(it))
 */
        (void)((++__pyx_v_it));

        /* "cython_sampler.pyx":558
 *                 if found != roots.end():
 *                     inc(it)
 *                     continue             # <<<<<<<<<<<<<<
 *                 n_depth.insert(deref(it))
 *                 inc(it)
 */
        goto __pyx_L22_continue;

        /* "cython_sampler.pyx":556
 *             while it != n_depth_all[i].end():
 *                 found = find[vector[int].iterator, int](roots.begin(), roots.end(), deref(it))
 *                 if found != roots.end():             # <<<<<<<<<<<<<<
 *                     inc(it)
 *                     continue
 */
      }

      /* "cython_sampler.pyx":559
 *                     inc(it)
 *                     continue
 *                 n_depth.insert(deref(it))             # <<<<<<<<<<<<<<
 *                 inc(it)
 *             i += 1
 */
      (void)(__pyx_v_n_depth.insert((*__pyx_v_it)));

      /* "cython_sampler.pyx":560
 *                     continue
 *                 n_depth.insert(deref(it))
 *                 inc(it)             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
      (void)((++__pyx_v_it));
      __pyx_L22_continue:;
    }

    /* "cython_sampler.pyx":561
 *                 n_depth.insert(deref(it))
 *                 inc(it)
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 *         # 2nd layer
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cython_sampler.pyx":564
 * 
 *         # 2nd layer
 *         cdef vector[int] n_depth_vec = vector[int](n_depth.size())             # <<<<<<<<<<<<<<
 *         it = n_depth.begin()
 *         i = 0
 */
  try {
    __pyx_t_5 = std::vector<int> (__pyx_v_n_depth.size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 564, __pyx_L1_error)
  }
  __pyx_v_n_depth_vec = __pyx_t_5;

  /* "cython_sampler.pyx":565
 *         # 2nd layer
 *         cdef vector[int] n_depth_vec = vector[int](n_depth.size())
 *         it = n_depth.begin()             # <<<<<<<<<<<<<<
 *         i = 0
 *         while it != n_depth.end():
 */
  __pyx_v_it = __pyx_v_n_depth.begin();

  /* "cython_sampler.pyx":566
 *         cdef vector[int] n_depth_vec = vector[int](n_depth.size())
 *         it = n_depth.begin()
 *         i = 0             # <<<<<<<<<<<<<<
 *         while it != n_depth.end():
 *             n_depth_vec[i] = deref(it)
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":567
 *         it = n_depth.begin()
 *         i = 0
 *         while it != n_depth.end():             # <<<<<<<<<<<<<<
 *             n_depth_vec[i] = deref(it)
 *             inc(it)
 */
  while (1) {
    __pyx_t_4 = ((__pyx_v_it != __pyx_v_n_depth.end()) != 0);
    if (!__pyx_t_4) break;

    /* "cython_sampler.pyx":568
 *         i = 0
 *         while it != n_depth.end():
 *             n_depth_vec[i] = deref(it)             # <<<<<<<<<<<<<<
 *             inc(it)
 *             i += 1
 */
    (__pyx_v_n_depth_vec[__pyx_v_i]) = (*__pyx_v_it);

    /* "cython_sampler.pyx":569
 *         while it != n_depth.end():
 *             n_depth_vec[i] = deref(it)
 *             inc(it)             # <<<<<<<<<<<<<<
 *             i += 1
 *         num_data = n_depth_vec.size()
 */
    (void)((++__pyx_v_it));

    /* "cython_sampler.pyx":570
 *             n_depth_vec[i] = deref(it)
 *             inc(it)
 *             i += 1             # <<<<<<<<<<<<<<
 *         num_data = n_depth_vec.size()
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cython_sampler.pyx":571
 *             inc(it)
 *             i += 1
 *         num_data = n_depth_vec.size()             # <<<<<<<<<<<<<<
 * 
 *         edges_all.clear()
 */
  __pyx_v_num_data = __pyx_v_n_depth_vec.size();

  /* "cython_sampler.pyx":573
 *         num_data = n_depth_vec.size()
 * 
 *         edges_all.clear()             # <<<<<<<<<<<<<<
 *         edges_all.resize(self.num_proc)
 *         with nogil, parallel(num_threads=self.num_proc):
 */
  __pyx_v_edges_all.clear();

  /* "cython_sampler.pyx":574
 * 
 *         edges_all.clear()
 *         edges_all.resize(self.num_proc)             # <<<<<<<<<<<<<<
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):
 */
  try {
    __pyx_v_edges_all.resize(__pyx_v_self->__pyx_base.num_proc);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 574, __pyx_L1_error)
  }

  /* "cython_sampler.pyx":575
 *         edges_all.clear()
 *         edges_all.resize(self.num_proc)
 *         with nogil, parallel(num_threads=self.num_proc):             # <<<<<<<<<<<<<<
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.c_sample_graph_v2(p, num_data, n_depth_vec, edges_all[p])
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            #ifdef _OPENMP
            #pragma omp parallel  private(__pyx_t_1, __pyx_t_2, __pyx_t_3) num_threads(__pyx_v_self->__pyx_base.num_proc)
            #endif /* _OPENMP */
            {

                /* "cython_sampler.pyx":576
 *         edges_all.resize(self.num_proc)
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):             # <<<<<<<<<<<<<<
 *                 self.c_sample_graph_v2(p, num_data, n_depth_vec, edges_all[p])
 *         i = 0
 */
                __pyx_t_3 = __pyx_v_self->__pyx_base.num_proc;
                if (1 == 0) abort();
                {
                    __pyx_t_1 = (__pyx_t_3 - 0 + 1 - 1/abs(1)) / 1;
                    if (__pyx_t_1 > 0)
                    {
                        #ifdef _OPENMP
                        #pragma omp for firstprivate(__pyx_v_p) lastprivate(__pyx_v_p) schedule(dynamic)
                        #endif /* _OPENMP */
                        for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2++){
                            {
                                __pyx_v_p = (int)(0 + 1 * __pyx_t_2);

                                /* "cython_sampler.pyx":577
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.c_sample_graph_v2(p, num_data, n_depth_vec, edges_all[p])             # <<<<<<<<<<<<<<
 *         i = 0
 *         edge_size = edges.size()
 */
                                ((struct __pyx_vtabstruct_14cython_sampler_BanditLinearSampler *)__pyx_v_self->__pyx_base.__pyx_vtab)->c_sample_graph_v2(__pyx_v_self, __pyx_v_p, __pyx_v_num_data, __pyx_v_n_depth_vec, (__pyx_v_edges_all[__pyx_v_p]));
                            }
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "cython_sampler.pyx":575
 *         edges_all.clear()
 *         edges_all.resize(self.num_proc)
 *         with nogil, parallel(num_threads=self.num_proc):             # <<<<<<<<<<<<<<
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.c_sample_graph_v2(p, num_data, n_depth_vec, edges_all[p])
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L29;
        }
        __pyx_L29:;
      }
  }

  /* "cython_sampler.pyx":578
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.c_sample_graph_v2(p, num_data, n_depth_vec, edges_all[p])
 *         i = 0             # <<<<<<<<<<<<<<
 *         edge_size = edges.size()
 *         while i < self.num_proc:
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":579
 *                 self.c_sample_graph_v2(p, num_data, n_depth_vec, edges_all[p])
 *         i = 0
 *         edge_size = edges.size()             # <<<<<<<<<<<<<<
 *         while i < self.num_proc:
 *             edge_size += edges_all[i].size()
 */
  __pyx_v_edge_size = __pyx_v_edges.size();

  /* "cython_sampler.pyx":580
 *         i = 0
 *         edge_size = edges.size()
 *         while i < self.num_proc:             # <<<<<<<<<<<<<<
 *             edge_size += edges_all[i].size()
 *             i += 1
 */
  while (1) {
    __pyx_t_4 = ((__pyx_v_i < __pyx_v_self->__pyx_base.num_proc) != 0);
    if (!__pyx_t_4) break;

    /* "cython_sampler.pyx":581
 *         edge_size = edges.size()
 *         while i < self.num_proc:
 *             edge_size += edges_all[i].size()             # <<<<<<<<<<<<<<
 *             i += 1
 *         edges.reserve(edge_size)
 */
    __pyx_v_edge_size = (__pyx_v_edge_size + (__pyx_v_edges_all[__pyx_v_i]).size());

    /* "cython_sampler.pyx":582
 *         while i < self.num_proc:
 *             edge_size += edges_all[i].size()
 *             i += 1             # <<<<<<<<<<<<<<
 *         edges.reserve(edge_size)
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cython_sampler.pyx":583
 *             edge_size += edges_all[i].size()
 *             i += 1
 *         edges.reserve(edge_size)             # <<<<<<<<<<<<<<
 * 
 *         i = 0
 */
  __pyx_v_edges.reserve(__pyx_v_edge_size);

  /* "cython_sampler.pyx":585
 *         edges.reserve(edge_size)
 * 
 *         i = 0             # <<<<<<<<<<<<<<
 *         while i < self.num_proc:
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":586
 * 
 *         i = 0
 *         while i < self.num_proc:             # <<<<<<<<<<<<<<
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())
 *             i += 1
 */
  while (1) {
    __pyx_t_4 = ((__pyx_v_i < __pyx_v_self->__pyx_base.num_proc) != 0);
    if (!__pyx_t_4) break;

    /* "cython_sampler.pyx":587
 *         i = 0
 *         while i < self.num_proc:
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
    try {
      __pyx_v_edges.insert(__pyx_v_edges.end(), (__pyx_v_edges_all[__pyx_v_i]).begin(), (__pyx_v_edges_all[__pyx_v_i]).end());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 587, __pyx_L1_error)
    }

    /* "cython_sampler.pyx":588
 *         while i < self.num_proc:
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 *         # sort edges
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cython_sampler.pyx":593
 *         #sort[vector[int].iterator, f_type](edges.begin(), edges.end(), compare)
 * 
 *         cdef cutils.array_wrapper_int w_edges = cutils.array_wrapper_int()             # <<<<<<<<<<<<<<
 *         w_edges.set_data(edges)
 *         np_edges = np.frombuffer(w_edges, dtype=np.int32)
 */
  __pyx_t_6 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_12cython_utils_array_wrapper_int)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_w_edges = ((struct __pyx_obj_12cython_utils_array_wrapper_int *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "cython_sampler.pyx":594
 * 
 *         cdef cutils.array_wrapper_int w_edges = cutils.array_wrapper_int()
 *         w_edges.set_data(edges)             # <<<<<<<<<<<<<<
 *         np_edges = np.frombuffer(w_edges, dtype=np.int32)
 *         np_edges = np_edges.reshape([-1,2])
 */
  ((struct __pyx_vtabstruct_12cython_utils_array_wrapper_int *)__pyx_v_w_edges->__pyx_vtab)->set_data(__pyx_v_w_edges, __pyx_v_edges);

  /* "cython_sampler.pyx":595
 *         cdef cutils.array_wrapper_int w_edges = cutils.array_wrapper_int()
 *         w_edges.set_data(edges)
 *         np_edges = np.frombuffer(w_edges, dtype=np.int32)             # <<<<<<<<<<<<<<
 *         np_edges = np_edges.reshape([-1,2])
 *         return np_edges
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_frombuffer); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(((PyObject *)__pyx_v_w_edges));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_w_edges));
  PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_v_w_edges));
  __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_int32); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_10) < 0) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, __pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_np_edges = __pyx_t_10;
  __pyx_t_10 = 0;

  /* "cython_sampler.pyx":596
 *         w_edges.set_data(edges)
 *         np_edges = np.frombuffer(w_edges, dtype=np.int32)
 *         np_edges = np_edges.reshape([-1,2])             # <<<<<<<<<<<<<<
 *         return np_edges
 * 
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_np_edges, __pyx_n_s_reshape); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = PyList_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_int_neg_1);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_int_2);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_10 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF_SET(__pyx_v_np_edges, __pyx_t_10);
  __pyx_t_10 = 0;

  /* "cython_sampler.pyx":597
 *         np_edges = np.frombuffer(w_edges, dtype=np.int32)
 *         np_edges = np_edges.reshape([-1,2])
 *         return np_edges             # <<<<<<<<<<<<<<
 * 
 *     @cython.wraparound(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_np_edges);
  __pyx_r = __pyx_v_np_edges;
  goto __pyx_L0;

  /* "cython_sampler.pyx":521
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     def sample_graph(self, py_roots):             # <<<<<<<<<<<<<<
 *         cdef vector[int] roots
 *         cutils.npy2vec_int(py_roots, roots)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("cython_sampler.BanditLinearSampler.sample_graph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_w_edges);
  __Pyx_XDECREF(__pyx_v_np_edges);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython_sampler.pyx":601
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void c_sample_graph_v1(self, int p, int num_data, vector[int]& roots,             # <<<<<<<<<<<<<<
 *                                 vector[int]& edges, unordered_set[int]& n_depth) nogil:
 *         cdef int i = 0
 */

static void __pyx_f_14cython_sampler_19BanditLinearSampler_c_sample_graph_v1(struct __pyx_obj_14cython_sampler_BanditLinearSampler *__pyx_v_self, int __pyx_v_p, int __pyx_v_num_data, std::vector<int>  &__pyx_v_roots, std::vector<int>  &__pyx_v_edges, std::unordered_set<int>  &__pyx_v_n_depth) {
  int __pyx_v_i;
  CYTHON_UNUSED int __pyx_v_sample_size;
  int __pyx_v_node;
  int __pyx_t_1;

  /* "cython_sampler.pyx":603
 *     cdef void c_sample_graph_v1(self, int p, int num_data, vector[int]& roots,
 *                                 vector[int]& edges, unordered_set[int]& n_depth) nogil:
 *         cdef int i = 0             # <<<<<<<<<<<<<<
 *         cdef int sample_size
 *         cdef int node
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":606
 *         cdef int sample_size
 *         cdef int node
 *         while i < num_data:             # <<<<<<<<<<<<<<
 *             if i % self.num_proc != p:
 *                 i += 1
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_i < __pyx_v_num_data) != 0);
    if (!__pyx_t_1) break;

    /* "cython_sampler.pyx":607
 *         cdef int node
 *         while i < num_data:
 *             if i % self.num_proc != p:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    if (unlikely(__pyx_v_self->__pyx_base.num_proc == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 607, __pyx_L1_error)
    }
    __pyx_t_1 = ((__Pyx_mod_int(__pyx_v_i, __pyx_v_self->__pyx_base.num_proc) != __pyx_v_p) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":608
 *         while i < num_data:
 *             if i % self.num_proc != p:
 *                 i += 1             # <<<<<<<<<<<<<<
 *                 continue
 *             node = roots[i]
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "cython_sampler.pyx":609
 *             if i % self.num_proc != p:
 *                 i += 1
 *                 continue             # <<<<<<<<<<<<<<
 *             node = roots[i]
 *             sample_size = self.sample_neighbors_v1(node, edges, n_depth)
 */
      goto __pyx_L3_continue;

      /* "cython_sampler.pyx":607
 *         cdef int node
 *         while i < num_data:
 *             if i % self.num_proc != p:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    }

    /* "cython_sampler.pyx":610
 *                 i += 1
 *                 continue
 *             node = roots[i]             # <<<<<<<<<<<<<<
 *             sample_size = self.sample_neighbors_v1(node, edges, n_depth)
 *             i += 1
 */
    __pyx_v_node = (__pyx_v_roots[__pyx_v_i]);

    /* "cython_sampler.pyx":611
 *                 continue
 *             node = roots[i]
 *             sample_size = self.sample_neighbors_v1(node, edges, n_depth)             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
    __pyx_v_sample_size = ((struct __pyx_vtabstruct_14cython_sampler_BanditLinearSampler *)__pyx_v_self->__pyx_base.__pyx_vtab)->sample_neighbors_v1(__pyx_v_self, __pyx_v_node, __pyx_v_edges, __pyx_v_n_depth);

    /* "cython_sampler.pyx":612
 *             node = roots[i]
 *             sample_size = self.sample_neighbors_v1(node, edges, n_depth)
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);
    __pyx_L3_continue:;
  }

  /* "cython_sampler.pyx":601
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void c_sample_graph_v1(self, int p, int num_data, vector[int]& roots,             # <<<<<<<<<<<<<<
 *                                 vector[int]& edges, unordered_set[int]& n_depth) nogil:
 *         cdef int i = 0
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cython_sampler.BanditLinearSampler.c_sample_graph_v1", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
}

/* "cython_sampler.pyx":617
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void c_sample_graph_v2(self, int p, int num_data, vector[int]& roots,             # <<<<<<<<<<<<<<
 *                                 vector[int]& edges) nogil:
 *         cdef int i = 0
 */

static void __pyx_f_14cython_sampler_19BanditLinearSampler_c_sample_graph_v2(struct __pyx_obj_14cython_sampler_BanditLinearSampler *__pyx_v_self, int __pyx_v_p, int __pyx_v_num_data, std::vector<int>  &__pyx_v_roots, std::vector<int>  &__pyx_v_edges) {
  int __pyx_v_i;
  int __pyx_v_node;
  int __pyx_t_1;

  /* "cython_sampler.pyx":619
 *     cdef void c_sample_graph_v2(self, int p, int num_data, vector[int]& roots,
 *                                 vector[int]& edges) nogil:
 *         cdef int i = 0             # <<<<<<<<<<<<<<
 *         cdef int node
 *         while i < num_data:
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":621
 *         cdef int i = 0
 *         cdef int node
 *         while i < num_data:             # <<<<<<<<<<<<<<
 *             if i % self.num_proc != p:
 *                 i += 1
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_i < __pyx_v_num_data) != 0);
    if (!__pyx_t_1) break;

    /* "cython_sampler.pyx":622
 *         cdef int node
 *         while i < num_data:
 *             if i % self.num_proc != p:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    if (unlikely(__pyx_v_self->__pyx_base.num_proc == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 622, __pyx_L1_error)
    }
    __pyx_t_1 = ((__Pyx_mod_int(__pyx_v_i, __pyx_v_self->__pyx_base.num_proc) != __pyx_v_p) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":623
 *         while i < num_data:
 *             if i % self.num_proc != p:
 *                 i += 1             # <<<<<<<<<<<<<<
 *                 continue
 *             node = roots[i]
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "cython_sampler.pyx":624
 *             if i % self.num_proc != p:
 *                 i += 1
 *                 continue             # <<<<<<<<<<<<<<
 *             node = roots[i]
 *             self.sample_neighbors_v2(node, edges)
 */
      goto __pyx_L3_continue;

      /* "cython_sampler.pyx":622
 *         cdef int node
 *         while i < num_data:
 *             if i % self.num_proc != p:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    }

    /* "cython_sampler.pyx":625
 *                 i += 1
 *                 continue
 *             node = roots[i]             # <<<<<<<<<<<<<<
 *             self.sample_neighbors_v2(node, edges)
 *             i += 1
 */
    __pyx_v_node = (__pyx_v_roots[__pyx_v_i]);

    /* "cython_sampler.pyx":626
 *                 continue
 *             node = roots[i]
 *             self.sample_neighbors_v2(node, edges)             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
    ((struct __pyx_vtabstruct_14cython_sampler_BanditLinearSampler *)__pyx_v_self->__pyx_base.__pyx_vtab)->sample_neighbors_v2(__pyx_v_self, __pyx_v_node, __pyx_v_edges);

    /* "cython_sampler.pyx":627
 *             node = roots[i]
 *             self.sample_neighbors_v2(node, edges)
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);
    __pyx_L3_continue:;
  }

  /* "cython_sampler.pyx":617
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void c_sample_graph_v2(self, int p, int num_data, vector[int]& roots,             # <<<<<<<<<<<<<<
 *                                 vector[int]& edges) nogil:
 *         cdef int i = 0
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cython_sampler.BanditLinearSampler.c_sample_graph_v2", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
}

/* "cython_sampler.pyx":632
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef int sample_neighbors_v1(self, int node, vector[int]& edges,             # <<<<<<<<<<<<<<
 *                                  unordered_set[int]& n_depth) nogil:
 *         cdef int sample_size = 0
 */

static int __pyx_f_14cython_sampler_19BanditLinearSampler_sample_neighbors_v1(struct __pyx_obj_14cython_sampler_BanditLinearSampler *__pyx_v_self, int __pyx_v_node, std::vector<int>  &__pyx_v_edges, std::unordered_set<int>  &__pyx_v_n_depth) {
  int __pyx_v_sample_size;
  int __pyx_v_degree;
  int __pyx_v_edge_size;
  std::vector<int>  *__pyx_v_neighbors;
  std::vector<int> ::iterator __pyx_v_it;
  int __pyx_v_i;
  std::vector<int>  __pyx_v_samples;
  int __pyx_v_sample_id;
  std::vector<double>  *__pyx_v_sample_probs;
  int __pyx_r;
  int __pyx_t_1;

  /* "cython_sampler.pyx":634
 *     cdef int sample_neighbors_v1(self, int node, vector[int]& edges,
 *                                  unordered_set[int]& n_depth) nogil:
 *         cdef int sample_size = 0             # <<<<<<<<<<<<<<
 *         cdef int degree
 *         cdef int edge_size
 */
  __pyx_v_sample_size = 0;

  /* "cython_sampler.pyx":637
 *         cdef int degree
 *         cdef int edge_size
 *         cdef vector[int]* neighbors = &self.adj[node]             # <<<<<<<<<<<<<<
 *         degree = self.degree[node]
 *         edge_size = edges.size()
 */
  __pyx_v_neighbors = (&(__pyx_v_self->__pyx_base.adj[__pyx_v_node]));

  /* "cython_sampler.pyx":638
 *         cdef int edge_size
 *         cdef vector[int]* neighbors = &self.adj[node]
 *         degree = self.degree[node]             # <<<<<<<<<<<<<<
 *         edge_size = edges.size()
 *         cdef vector[int].iterator it
 */
  __pyx_v_degree = (__pyx_v_self->__pyx_base.degree[__pyx_v_node]);

  /* "cython_sampler.pyx":639
 *         cdef vector[int]* neighbors = &self.adj[node]
 *         degree = self.degree[node]
 *         edge_size = edges.size()             # <<<<<<<<<<<<<<
 *         cdef vector[int].iterator it
 *         cdef int i
 */
  __pyx_v_edge_size = __pyx_v_edges.size();

  /* "cython_sampler.pyx":645
 *         cdef int sample_id
 *         cdef vector[double] probs
 *         cdef vector[double]* sample_probs = &self.sample_probs[node]             # <<<<<<<<<<<<<<
 *         if degree <= self.neighbor_limit:
 *             edges.resize(edge_size + degree*2)
 */
  __pyx_v_sample_probs = (&(__pyx_v_self->__pyx_base.sample_probs[__pyx_v_node]));

  /* "cython_sampler.pyx":646
 *         cdef vector[double] probs
 *         cdef vector[double]* sample_probs = &self.sample_probs[node]
 *         if degree <= self.neighbor_limit:             # <<<<<<<<<<<<<<
 *             edges.resize(edge_size + degree*2)
 *             i = 0
 */
  __pyx_t_1 = ((__pyx_v_degree <= __pyx_v_self->__pyx_base.neighbor_limit) != 0);
  if (__pyx_t_1) {

    /* "cython_sampler.pyx":647
 *         cdef vector[double]* sample_probs = &self.sample_probs[node]
 *         if degree <= self.neighbor_limit:
 *             edges.resize(edge_size + degree*2)             # <<<<<<<<<<<<<<
 *             i = 0
 *             while i < degree:
 */
    try {
      __pyx_v_edges.resize((__pyx_v_edge_size + (__pyx_v_degree * 2)));
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 647, __pyx_L1_error)
    }

    /* "cython_sampler.pyx":648
 *         if degree <= self.neighbor_limit:
 *             edges.resize(edge_size + degree*2)
 *             i = 0             # <<<<<<<<<<<<<<
 *             while i < degree:
 *                 edges[edge_size+2*i] = node
 */
    __pyx_v_i = 0;

    /* "cython_sampler.pyx":649
 *             edges.resize(edge_size + degree*2)
 *             i = 0
 *             while i < degree:             # <<<<<<<<<<<<<<
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_i < __pyx_v_degree) != 0);
      if (!__pyx_t_1) break;

      /* "cython_sampler.pyx":650
 *             i = 0
 *             while i < degree:
 *                 edges[edge_size+2*i] = node             # <<<<<<<<<<<<<<
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]
 *                 n_depth.insert(deref(neighbors)[i])
 */
      (__pyx_v_edges[(__pyx_v_edge_size + (2 * __pyx_v_i))]) = __pyx_v_node;

      /* "cython_sampler.pyx":651
 *             while i < degree:
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]             # <<<<<<<<<<<<<<
 *                 n_depth.insert(deref(neighbors)[i])
 *                 inc(it)
 */
      (__pyx_v_edges[((__pyx_v_edge_size + (2 * __pyx_v_i)) + 1)]) = ((*__pyx_v_neighbors)[__pyx_v_i]);

      /* "cython_sampler.pyx":652
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]
 *                 n_depth.insert(deref(neighbors)[i])             # <<<<<<<<<<<<<<
 *                 inc(it)
 *                 i += 1
 */
      (void)(__pyx_v_n_depth.insert(((*__pyx_v_neighbors)[__pyx_v_i])));

      /* "cython_sampler.pyx":653
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]
 *                 n_depth.insert(deref(neighbors)[i])
 *                 inc(it)             # <<<<<<<<<<<<<<
 *                 i += 1
 *             sample_size = degree
 */
      (void)((++__pyx_v_it));

      /* "cython_sampler.pyx":654
 *                 n_depth.insert(deref(neighbors)[i])
 *                 inc(it)
 *                 i += 1             # <<<<<<<<<<<<<<
 *             sample_size = degree
 *         else:
 */
      __pyx_v_i = (__pyx_v_i + 1);
    }

    /* "cython_sampler.pyx":655
 *                 inc(it)
 *                 i += 1
 *             sample_size = degree             # <<<<<<<<<<<<<<
 *         else:
 *             edges.resize(edge_size + self.neighbor_limit*2)
 */
    __pyx_v_sample_size = __pyx_v_degree;

    /* "cython_sampler.pyx":646
 *         cdef vector[double] probs
 *         cdef vector[double]* sample_probs = &self.sample_probs[node]
 *         if degree <= self.neighbor_limit:             # <<<<<<<<<<<<<<
 *             edges.resize(edge_size + degree*2)
 *             i = 0
 */
    goto __pyx_L3;
  }

  /* "cython_sampler.pyx":657
 *             sample_size = degree
 *         else:
 *             edges.resize(edge_size + self.neighbor_limit*2)             # <<<<<<<<<<<<<<
 *             samples = random_choice(deref(neighbors), deref(sample_probs), self.neighbor_limit)
 * 
 */
  /*else*/ {
    try {
      __pyx_v_edges.resize((__pyx_v_edge_size + (__pyx_v_self->__pyx_base.neighbor_limit * 2)));
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 657, __pyx_L1_error)
    }

    /* "cython_sampler.pyx":658
 *         else:
 *             edges.resize(edge_size + self.neighbor_limit*2)
 *             samples = random_choice(deref(neighbors), deref(sample_probs), self.neighbor_limit)             # <<<<<<<<<<<<<<
 * 
 *             i = 0
 */
    __pyx_v_samples = __pyx_f_14cython_sampler_random_choice((*__pyx_v_neighbors), (*__pyx_v_sample_probs), __pyx_v_self->__pyx_base.neighbor_limit);

    /* "cython_sampler.pyx":660
 *             samples = random_choice(deref(neighbors), deref(sample_probs), self.neighbor_limit)
 * 
 *             i = 0             # <<<<<<<<<<<<<<
 *             while i < self.neighbor_limit:
 *                 sample_id = samples[i]
 */
    __pyx_v_i = 0;

    /* "cython_sampler.pyx":661
 * 
 *             i = 0
 *             while i < self.neighbor_limit:             # <<<<<<<<<<<<<<
 *                 sample_id = samples[i]
 *                 edges[edge_size+2*i] = node
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_i < __pyx_v_self->__pyx_base.neighbor_limit) != 0);
      if (!__pyx_t_1) break;

      /* "cython_sampler.pyx":662
 *             i = 0
 *             while i < self.neighbor_limit:
 *                 sample_id = samples[i]             # <<<<<<<<<<<<<<
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = sample_id
 */
      __pyx_v_sample_id = (__pyx_v_samples[__pyx_v_i]);

      /* "cython_sampler.pyx":663
 *             while i < self.neighbor_limit:
 *                 sample_id = samples[i]
 *                 edges[edge_size+2*i] = node             # <<<<<<<<<<<<<<
 *                 edges[edge_size+2*i+1] = sample_id
 *                 n_depth.insert(sample_id)
 */
      (__pyx_v_edges[(__pyx_v_edge_size + (2 * __pyx_v_i))]) = __pyx_v_node;

      /* "cython_sampler.pyx":664
 *                 sample_id = samples[i]
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = sample_id             # <<<<<<<<<<<<<<
 *                 n_depth.insert(sample_id)
 *                 sample_size += 1
 */
      (__pyx_v_edges[((__pyx_v_edge_size + (2 * __pyx_v_i)) + 1)]) = __pyx_v_sample_id;

      /* "cython_sampler.pyx":665
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = sample_id
 *                 n_depth.insert(sample_id)             # <<<<<<<<<<<<<<
 *                 sample_size += 1
 *                 i += 1
 */
      (void)(__pyx_v_n_depth.insert(__pyx_v_sample_id));

      /* "cython_sampler.pyx":666
 *                 edges[edge_size+2*i+1] = sample_id
 *                 n_depth.insert(sample_id)
 *                 sample_size += 1             # <<<<<<<<<<<<<<
 *                 i += 1
 *         return sample_size
 */
      __pyx_v_sample_size = (__pyx_v_sample_size + 1);

      /* "cython_sampler.pyx":667
 *                 n_depth.insert(sample_id)
 *                 sample_size += 1
 *                 i += 1             # <<<<<<<<<<<<<<
 *         return sample_size
 * 
 */
      __pyx_v_i = (__pyx_v_i + 1);
    }
  }
  __pyx_L3:;

  /* "cython_sampler.pyx":668
 *                 sample_size += 1
 *                 i += 1
 *         return sample_size             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_sample_size;
  goto __pyx_L0;

  /* "cython_sampler.pyx":632
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef int sample_neighbors_v1(self, int node, vector[int]& edges,             # <<<<<<<<<<<<<<
 *                                  unordered_set[int]& n_depth) nogil:
 *         cdef int sample_size = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cython_sampler.BanditLinearSampler.sample_neighbors_v1", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "cython_sampler.pyx":673
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void sample_neighbors_v2(self, int node, vector[int]& edges) nogil:             # <<<<<<<<<<<<<<
 *         cdef int degree
 *         cdef int edge_size
 */

static void __pyx_f_14cython_sampler_19BanditLinearSampler_sample_neighbors_v2(struct __pyx_obj_14cython_sampler_BanditLinearSampler *__pyx_v_self, int __pyx_v_node, std::vector<int>  &__pyx_v_edges) {
  int __pyx_v_degree;
  int __pyx_v_edge_size;
  std::vector<int>  *__pyx_v_neighbors;
  std::vector<int> ::iterator __pyx_v_it;
  int __pyx_v_i;
  std::vector<int>  __pyx_v_samples;
  std::vector<double>  *__pyx_v_sample_probs;
  int __pyx_t_1;

  /* "cython_sampler.pyx":676
 *         cdef int degree
 *         cdef int edge_size
 *         cdef vector[int]* neighbors = &self.adj[node]             # <<<<<<<<<<<<<<
 *         degree = self.degree[node]
 *         edge_size = edges.size()
 */
  __pyx_v_neighbors = (&(__pyx_v_self->__pyx_base.adj[__pyx_v_node]));

  /* "cython_sampler.pyx":677
 *         cdef int edge_size
 *         cdef vector[int]* neighbors = &self.adj[node]
 *         degree = self.degree[node]             # <<<<<<<<<<<<<<
 *         edge_size = edges.size()
 *         cdef vector[int].iterator it
 */
  __pyx_v_degree = (__pyx_v_self->__pyx_base.degree[__pyx_v_node]);

  /* "cython_sampler.pyx":678
 *         cdef vector[int]* neighbors = &self.adj[node]
 *         degree = self.degree[node]
 *         edge_size = edges.size()             # <<<<<<<<<<<<<<
 *         cdef vector[int].iterator it
 *         cdef int i
 */
  __pyx_v_edge_size = __pyx_v_edges.size();

  /* "cython_sampler.pyx":683
 *         cdef vector[int] samples
 *         cdef vector[double] probs
 *         cdef vector[double]* sample_probs = &self.sample_probs[node]             # <<<<<<<<<<<<<<
 *         if degree <= self.neighbor_limit:
 *             edges.resize(edge_size + degree*2)
 */
  __pyx_v_sample_probs = (&(__pyx_v_self->__pyx_base.sample_probs[__pyx_v_node]));

  /* "cython_sampler.pyx":684
 *         cdef vector[double] probs
 *         cdef vector[double]* sample_probs = &self.sample_probs[node]
 *         if degree <= self.neighbor_limit:             # <<<<<<<<<<<<<<
 *             edges.resize(edge_size + degree*2)
 *             i = 0
 */
  __pyx_t_1 = ((__pyx_v_degree <= __pyx_v_self->__pyx_base.neighbor_limit) != 0);
  if (__pyx_t_1) {

    /* "cython_sampler.pyx":685
 *         cdef vector[double]* sample_probs = &self.sample_probs[node]
 *         if degree <= self.neighbor_limit:
 *             edges.resize(edge_size + degree*2)             # <<<<<<<<<<<<<<
 *             i = 0
 *             while i < degree:
 */
    try {
      __pyx_v_edges.resize((__pyx_v_edge_size + (__pyx_v_degree * 2)));
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 685, __pyx_L1_error)
    }

    /* "cython_sampler.pyx":686
 *         if degree <= self.neighbor_limit:
 *             edges.resize(edge_size + degree*2)
 *             i = 0             # <<<<<<<<<<<<<<
 *             while i < degree:
 *                 edges[edge_size+2*i] = node
 */
    __pyx_v_i = 0;

    /* "cython_sampler.pyx":687
 *             edges.resize(edge_size + degree*2)
 *             i = 0
 *             while i < degree:             # <<<<<<<<<<<<<<
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_i < __pyx_v_degree) != 0);
      if (!__pyx_t_1) break;

      /* "cython_sampler.pyx":688
 *             i = 0
 *             while i < degree:
 *                 edges[edge_size+2*i] = node             # <<<<<<<<<<<<<<
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]
 *                 inc(it)
 */
      (__pyx_v_edges[(__pyx_v_edge_size + (2 * __pyx_v_i))]) = __pyx_v_node;

      /* "cython_sampler.pyx":689
 *             while i < degree:
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]             # <<<<<<<<<<<<<<
 *                 inc(it)
 *                 i += 1
 */
      (__pyx_v_edges[((__pyx_v_edge_size + (2 * __pyx_v_i)) + 1)]) = ((*__pyx_v_neighbors)[__pyx_v_i]);

      /* "cython_sampler.pyx":690
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]
 *                 inc(it)             # <<<<<<<<<<<<<<
 *                 i += 1
 *         else:
 */
      (void)((++__pyx_v_it));

      /* "cython_sampler.pyx":691
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]
 *                 inc(it)
 *                 i += 1             # <<<<<<<<<<<<<<
 *         else:
 *             edges.resize(edge_size + self.neighbor_limit*2)
 */
      __pyx_v_i = (__pyx_v_i + 1);
    }

    /* "cython_sampler.pyx":684
 *         cdef vector[double] probs
 *         cdef vector[double]* sample_probs = &self.sample_probs[node]
 *         if degree <= self.neighbor_limit:             # <<<<<<<<<<<<<<
 *             edges.resize(edge_size + degree*2)
 *             i = 0
 */
    goto __pyx_L3;
  }

  /* "cython_sampler.pyx":693
 *                 i += 1
 *         else:
 *             edges.resize(edge_size + self.neighbor_limit*2)             # <<<<<<<<<<<<<<
 *             samples = random_choice(deref(neighbors), deref(sample_probs), self.neighbor_limit)
 * 
 */
  /*else*/ {
    try {
      __pyx_v_edges.resize((__pyx_v_edge_size + (__pyx_v_self->__pyx_base.neighbor_limit * 2)));
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 693, __pyx_L1_error)
    }

    /* "cython_sampler.pyx":694
 *         else:
 *             edges.resize(edge_size + self.neighbor_limit*2)
 *             samples = random_choice(deref(neighbors), deref(sample_probs), self.neighbor_limit)             # <<<<<<<<<<<<<<
 * 
 *             i = 0
 */
    __pyx_v_samples = __pyx_f_14cython_sampler_random_choice((*__pyx_v_neighbors), (*__pyx_v_sample_probs), __pyx_v_self->__pyx_base.neighbor_limit);

    /* "cython_sampler.pyx":696
 *             samples = random_choice(deref(neighbors), deref(sample_probs), self.neighbor_limit)
 * 
 *             i = 0             # <<<<<<<<<<<<<<
 *             while i < self.neighbor_limit:
 *                 edges[edge_size+2*i] = node
 */
    __pyx_v_i = 0;

    /* "cython_sampler.pyx":697
 * 
 *             i = 0
 *             while i < self.neighbor_limit:             # <<<<<<<<<<<<<<
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = samples[i]
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_i < __pyx_v_self->__pyx_base.neighbor_limit) != 0);
      if (!__pyx_t_1) break;

      /* "cython_sampler.pyx":698
 *             i = 0
 *             while i < self.neighbor_limit:
 *                 edges[edge_size+2*i] = node             # <<<<<<<<<<<<<<
 *                 edges[edge_size+2*i+1] = samples[i]
 *                 i += 1
 */
      (__pyx_v_edges[(__pyx_v_edge_size + (2 * __pyx_v_i))]) = __pyx_v_node;

      /* "cython_sampler.pyx":699
 *             while i < self.neighbor_limit:
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = samples[i]             # <<<<<<<<<<<<<<
 *                 i += 1
 * 
 */
      (__pyx_v_edges[((__pyx_v_edge_size + (2 * __pyx_v_i)) + 1)]) = (__pyx_v_samples[__pyx_v_i]);

      /* "cython_sampler.pyx":700
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = samples[i]
 *                 i += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_i = (__pyx_v_i + 1);
    }
  }
  __pyx_L3:;

  /* "cython_sampler.pyx":673
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void sample_neighbors_v2(self, int node, vector[int]& edges) nogil:             # <<<<<<<<<<<<<<
 *         cdef int degree
 *         cdef int edge_size
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cython_sampler.BanditLinearSampler.sample_neighbors_v2", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14cython_sampler_19BanditLinearSampler_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14cython_sampler_19BanditLinearSampler_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14cython_sampler_19BanditLinearSampler_6__reduce_cython__(((struct __pyx_obj_14cython_sampler_BanditLinearSampler *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14cython_sampler_19BanditLinearSampler_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14cython_sampler_BanditLinearSampler *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cython_sampler.BanditLinearSampler.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14cython_sampler_19BanditLinearSampler_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14cython_sampler_19BanditLinearSampler_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14cython_sampler_19BanditLinearSampler_8__setstate_cython__(((struct __pyx_obj_14cython_sampler_BanditLinearSampler *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14cython_sampler_19BanditLinearSampler_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14cython_sampler_BanditLinearSampler *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cython_sampler.BanditLinearSampler.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython_sampler.pyx":704
 * 
 * cdef class BanditMPSampler(Sampler):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_14cython_sampler_15BanditMPSampler_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14cython_sampler_15BanditMPSampler_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_14cython_sampler_15BanditMPSampler___cinit__(((struct __pyx_obj_14cython_sampler_BanditMPSampler *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14cython_sampler_15BanditMPSampler___cinit__(CYTHON_UNUSED struct __pyx_obj_14cython_sampler_BanditMPSampler *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython_sampler.pyx":707
 *         pass
 * 
 *     def update(self, np.ndarray[int,ndim=1,mode='c'] np_src_list,             # <<<<<<<<<<<<<<
 *                np.ndarray[int,ndim=1,mode='c'] np_dst_list,
 *                np.ndarray[float,ndim=1,mode='c'] np_att_list):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14cython_sampler_15BanditMPSampler_3update(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14cython_sampler_15BanditMPSampler_3update(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_np_src_list = 0;
  PyArrayObject *__pyx_v_np_dst_list = 0;
  PyArrayObject *__pyx_v_np_att_list = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_np_src_list,&__pyx_n_s_np_dst_list,&__pyx_n_s_np_att_list,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_np_src_list)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_np_dst_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("update", 1, 3, 3, 1); __PYX_ERR(0, 707, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_np_att_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("update", 1, 3, 3, 2); __PYX_ERR(0, 707, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "update") < 0)) __PYX_ERR(0, 707, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_np_src_list = ((PyArrayObject *)values[0]);
    __pyx_v_np_dst_list = ((PyArrayObject *)values[1]);
    __pyx_v_np_att_list = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 707, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cython_sampler.BanditMPSampler.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_np_src_list), __pyx_ptype_5numpy_ndarray, 1, "np_src_list", 0))) __PYX_ERR(0, 707, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_np_dst_list), __pyx_ptype_5numpy_ndarray, 1, "np_dst_list", 0))) __PYX_ERR(0, 708, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_np_att_list), __pyx_ptype_5numpy_ndarray, 1, "np_att_list", 0))) __PYX_ERR(0, 709, __pyx_L1_error)
  __pyx_r = __pyx_pf_14cython_sampler_15BanditMPSampler_2update(((struct __pyx_obj_14cython_sampler_BanditMPSampler *)__pyx_v_self), __pyx_v_np_src_list, __pyx_v_np_dst_list, __pyx_v_np_att_list);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14cython_sampler_15BanditMPSampler_2update(struct __pyx_obj_14cython_sampler_BanditMPSampler *__pyx_v_self, PyArrayObject *__pyx_v_np_src_list, PyArrayObject *__pyx_v_np_dst_list, PyArrayObject *__pyx_v_np_att_list) {
  std::vector<int>  __pyx_v_src_list;
  std::vector<int>  __pyx_v_dst_list;
  std::vector<float>  __pyx_v_att_list;
  int __pyx_v_num_data;
  int __pyx_v_p;
  int __pyx_v_neighbor_limit;
  float __pyx_v_delta;
  int __pyx_v_i;
  int __pyx_v_num_src;
  std::vector<int>  __pyx_v_src_set;
  std::unordered_map<int,int>  __pyx_v_src_start;
  std::unordered_map<int,int>  __pyx_v_src_end;
  int __pyx_v_last_src;
  int __pyx_v_src;
  std::unordered_map<int,std::unordered_map<int,int> >  __pyx_v_att_map;
  float __pyx_v_eta;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_np_att_list;
  __Pyx_Buffer __pyx_pybuffer_np_att_list;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_np_dst_list;
  __Pyx_Buffer __pyx_pybuffer_np_dst_list;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_np_src_list;
  __Pyx_Buffer __pyx_pybuffer_np_src_list;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  float __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("update", 0);
  __pyx_pybuffer_np_src_list.pybuffer.buf = NULL;
  __pyx_pybuffer_np_src_list.refcount = 0;
  __pyx_pybuffernd_np_src_list.data = NULL;
  __pyx_pybuffernd_np_src_list.rcbuffer = &__pyx_pybuffer_np_src_list;
  __pyx_pybuffer_np_dst_list.pybuffer.buf = NULL;
  __pyx_pybuffer_np_dst_list.refcount = 0;
  __pyx_pybuffernd_np_dst_list.data = NULL;
  __pyx_pybuffernd_np_dst_list.rcbuffer = &__pyx_pybuffer_np_dst_list;
  __pyx_pybuffer_np_att_list.pybuffer.buf = NULL;
  __pyx_pybuffer_np_att_list.refcount = 0;
  __pyx_pybuffernd_np_att_list.data = NULL;
  __pyx_pybuffernd_np_att_list.rcbuffer = &__pyx_pybuffer_np_att_list;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_np_src_list.rcbuffer->pybuffer, (PyObject*)__pyx_v_np_src_list, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 707, __pyx_L1_error)
  }
  __pyx_pybuffernd_np_src_list.diminfo[0].strides = __pyx_pybuffernd_np_src_list.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_np_src_list.diminfo[0].shape = __pyx_pybuffernd_np_src_list.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_np_dst_list.rcbuffer->pybuffer, (PyObject*)__pyx_v_np_dst_list, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 707, __pyx_L1_error)
  }
  __pyx_pybuffernd_np_dst_list.diminfo[0].strides = __pyx_pybuffernd_np_dst_list.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_np_dst_list.diminfo[0].shape = __pyx_pybuffernd_np_dst_list.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_np_att_list.rcbuffer->pybuffer, (PyObject*)__pyx_v_np_att_list, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 707, __pyx_L1_error)
  }
  __pyx_pybuffernd_np_att_list.diminfo[0].strides = __pyx_pybuffernd_np_att_list.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_np_att_list.diminfo[0].shape = __pyx_pybuffernd_np_att_list.rcbuffer->pybuffer.shape[0];

  /* "cython_sampler.pyx":713
 *         cdef vector[int] dst_list
 *         cdef vector[float] att_list
 *         cutils.npy2vec_int(np_src_list, src_list)             # <<<<<<<<<<<<<<
 *         cutils.npy2vec_int(np_dst_list, dst_list)
 *         cutils.npy2vec_float(np_att_list, att_list)
 */
  __pyx_f_12cython_utils_npy2vec_int(((PyArrayObject *)__pyx_v_np_src_list), __pyx_v_src_list);

  /* "cython_sampler.pyx":714
 *         cdef vector[float] att_list
 *         cutils.npy2vec_int(np_src_list, src_list)
 *         cutils.npy2vec_int(np_dst_list, dst_list)             # <<<<<<<<<<<<<<
 *         cutils.npy2vec_float(np_att_list, att_list)
 * 
 */
  __pyx_f_12cython_utils_npy2vec_int(((PyArrayObject *)__pyx_v_np_dst_list), __pyx_v_dst_list);

  /* "cython_sampler.pyx":715
 *         cutils.npy2vec_int(np_src_list, src_list)
 *         cutils.npy2vec_int(np_dst_list, dst_list)
 *         cutils.npy2vec_float(np_att_list, att_list)             # <<<<<<<<<<<<<<
 * 
 *         cdef int num_data = src_list.size()
 */
  __pyx_f_12cython_utils_npy2vec_float(((PyArrayObject *)__pyx_v_np_att_list), __pyx_v_att_list);

  /* "cython_sampler.pyx":717
 *         cutils.npy2vec_float(np_att_list, att_list)
 * 
 *         cdef int num_data = src_list.size()             # <<<<<<<<<<<<<<
 *         cdef int p = 0
 *         cdef int neighbor_limit = FLAGS.neighbor_limit
 */
  __pyx_v_num_data = __pyx_v_src_list.size();

  /* "cython_sampler.pyx":718
 * 
 *         cdef int num_data = src_list.size()
 *         cdef int p = 0             # <<<<<<<<<<<<<<
 *         cdef int neighbor_limit = FLAGS.neighbor_limit
 *         cdef float delta = FLAGS.delta
 */
  __pyx_v_p = 0;

  /* "cython_sampler.pyx":719
 *         cdef int num_data = src_list.size()
 *         cdef int p = 0
 *         cdef int neighbor_limit = FLAGS.neighbor_limit             # <<<<<<<<<<<<<<
 *         cdef float delta = FLAGS.delta
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_FLAGS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_neighbor_limit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_neighbor_limit = __pyx_t_3;

  /* "cython_sampler.pyx":720
 *         cdef int p = 0
 *         cdef int neighbor_limit = FLAGS.neighbor_limit
 *         cdef float delta = FLAGS.delta             # <<<<<<<<<<<<<<
 * 
 *         # mark src start & end position
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_FLAGS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_delta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 720, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_delta = __pyx_t_4;

  /* "cython_sampler.pyx":723
 * 
 *         # mark src start & end position
 *         cdef int i = 0             # <<<<<<<<<<<<<<
 *         cdef int num_src = 0
 *         cdef vector[int] src_set
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":724
 *         # mark src start & end position
 *         cdef int i = 0
 *         cdef int num_src = 0             # <<<<<<<<<<<<<<
 *         cdef vector[int] src_set
 *         cdef unordered_map[int,int] src_start
 */
  __pyx_v_num_src = 0;

  /* "cython_sampler.pyx":728
 *         cdef unordered_map[int,int] src_start
 *         cdef unordered_map[int,int] src_end
 *         cdef int last_src = -1             # <<<<<<<<<<<<<<
 *         cdef int src
 *         while i < num_data:
 */
  __pyx_v_last_src = -1;

  /* "cython_sampler.pyx":730
 *         cdef int last_src = -1
 *         cdef int src
 *         while i < num_data:             # <<<<<<<<<<<<<<
 *             src = src_list[i]
 *             if src != last_src:
 */
  while (1) {
    __pyx_t_5 = ((__pyx_v_i < __pyx_v_num_data) != 0);
    if (!__pyx_t_5) break;

    /* "cython_sampler.pyx":731
 *         cdef int src
 *         while i < num_data:
 *             src = src_list[i]             # <<<<<<<<<<<<<<
 *             if src != last_src:
 *                 if last_src > 0:
 */
    __pyx_v_src = (__pyx_v_src_list[__pyx_v_i]);

    /* "cython_sampler.pyx":732
 *         while i < num_data:
 *             src = src_list[i]
 *             if src != last_src:             # <<<<<<<<<<<<<<
 *                 if last_src > 0:
 *                     src_end[last_src] = i
 */
    __pyx_t_5 = ((__pyx_v_src != __pyx_v_last_src) != 0);
    if (__pyx_t_5) {

      /* "cython_sampler.pyx":733
 *             src = src_list[i]
 *             if src != last_src:
 *                 if last_src > 0:             # <<<<<<<<<<<<<<
 *                     src_end[last_src] = i
 *                 last_src = src
 */
      __pyx_t_5 = ((__pyx_v_last_src > 0) != 0);
      if (__pyx_t_5) {

        /* "cython_sampler.pyx":734
 *             if src != last_src:
 *                 if last_src > 0:
 *                     src_end[last_src] = i             # <<<<<<<<<<<<<<
 *                 last_src = src
 *                 src_start[src] = i
 */
        (__pyx_v_src_end[__pyx_v_last_src]) = __pyx_v_i;

        /* "cython_sampler.pyx":733
 *             src = src_list[i]
 *             if src != last_src:
 *                 if last_src > 0:             # <<<<<<<<<<<<<<
 *                     src_end[last_src] = i
 *                 last_src = src
 */
      }

      /* "cython_sampler.pyx":735
 *                 if last_src > 0:
 *                     src_end[last_src] = i
 *                 last_src = src             # <<<<<<<<<<<<<<
 *                 src_start[src] = i
 *                 src_set.push_back(src)
 */
      __pyx_v_last_src = __pyx_v_src;

      /* "cython_sampler.pyx":736
 *                     src_end[last_src] = i
 *                 last_src = src
 *                 src_start[src] = i             # <<<<<<<<<<<<<<
 *                 src_set.push_back(src)
 *                 num_src += 1
 */
      (__pyx_v_src_start[__pyx_v_src]) = __pyx_v_i;

      /* "cython_sampler.pyx":737
 *                 last_src = src
 *                 src_start[src] = i
 *                 src_set.push_back(src)             # <<<<<<<<<<<<<<
 *                 num_src += 1
 *             i += 1
 */
      try {
        __pyx_v_src_set.push_back(__pyx_v_src);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 737, __pyx_L1_error)
      }

      /* "cython_sampler.pyx":738
 *                 src_start[src] = i
 *                 src_set.push_back(src)
 *                 num_src += 1             # <<<<<<<<<<<<<<
 *             i += 1
 *         src_end[last_src] = num_data
 */
      __pyx_v_num_src = (__pyx_v_num_src + 1);

      /* "cython_sampler.pyx":732
 *         while i < num_data:
 *             src = src_list[i]
 *             if src != last_src:             # <<<<<<<<<<<<<<
 *                 if last_src > 0:
 *                     src_end[last_src] = i
 */
    }

    /* "cython_sampler.pyx":739
 *                 src_set.push_back(src)
 *                 num_src += 1
 *             i += 1             # <<<<<<<<<<<<<<
 *         src_end[last_src] = num_data
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cython_sampler.pyx":740
 *                 num_src += 1
 *             i += 1
 *         src_end[last_src] = num_data             # <<<<<<<<<<<<<<
 * 
 *         # att indice map
 */
  (__pyx_v_src_end[__pyx_v_last_src]) = __pyx_v_num_data;

  /* "cython_sampler.pyx":744
 *         # att indice map
 *         cdef unordered_map[int, unordered_map[int,int]] att_map
 *         i = 0             # <<<<<<<<<<<<<<
 *         while i < num_data:
 *             att_map[src_list[i]][dst_list[i]] = i
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":745
 *         cdef unordered_map[int, unordered_map[int,int]] att_map
 *         i = 0
 *         while i < num_data:             # <<<<<<<<<<<<<<
 *             att_map[src_list[i]][dst_list[i]] = i
 *             i += 1
 */
  while (1) {
    __pyx_t_5 = ((__pyx_v_i < __pyx_v_num_data) != 0);
    if (!__pyx_t_5) break;

    /* "cython_sampler.pyx":746
 *         i = 0
 *         while i < num_data:
 *             att_map[src_list[i]][dst_list[i]] = i             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
    ((__pyx_v_att_map[(__pyx_v_src_list[__pyx_v_i])])[(__pyx_v_dst_list[__pyx_v_i])]) = __pyx_v_i;

    /* "cython_sampler.pyx":747
 *         while i < num_data:
 *             att_map[src_list[i]][dst_list[i]] = i
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 *         cdef float eta = FLAGS.eta
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cython_sampler.pyx":749
 *             i += 1
 * 
 *         cdef float eta = FLAGS.eta             # <<<<<<<<<<<<<<
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_FLAGS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_eta); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 749, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_eta = __pyx_t_4;

  /* "cython_sampler.pyx":750
 * 
 *         cdef float eta = FLAGS.eta
 *         with nogil, parallel(num_threads=self.num_proc):             # <<<<<<<<<<<<<<
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.update_sample_weights(
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            #ifdef _OPENMP
            #pragma omp parallel  private(__pyx_t_3, __pyx_t_6, __pyx_t_7) num_threads(__pyx_v_self->__pyx_base.num_proc)
            #endif /* _OPENMP */
            {

                /* "cython_sampler.pyx":751
 *         cdef float eta = FLAGS.eta
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):             # <<<<<<<<<<<<<<
 *                 self.update_sample_weights(
 *                         att_map, src_start, src_end, p, num_src, src_set,
 */
                __pyx_t_3 = __pyx_v_self->__pyx_base.num_proc;
                if (1 == 0) abort();
                {
                    __pyx_t_7 = (__pyx_t_3 - 0 + 1 - 1/abs(1)) / 1;
                    if (__pyx_t_7 > 0)
                    {
                        #ifdef _OPENMP
                        #pragma omp for firstprivate(__pyx_v_p) lastprivate(__pyx_v_p) schedule(dynamic)
                        #endif /* _OPENMP */
                        for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_7; __pyx_t_6++){
                            {
                                __pyx_v_p = (int)(0 + 1 * __pyx_t_6);

                                /* "cython_sampler.pyx":752
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.update_sample_weights(             # <<<<<<<<<<<<<<
 *                         att_map, src_start, src_end, p, num_src, src_set,
 *                         src_list, dst_list, att_list,
 */
                                ((struct __pyx_vtabstruct_14cython_sampler_BanditMPSampler *)__pyx_v_self->__pyx_base.__pyx_vtab)->update_sample_weights(__pyx_v_self, __pyx_v_att_map, __pyx_v_src_start, __pyx_v_src_end, __pyx_v_p, __pyx_v_num_src, __pyx_v_src_set, __pyx_v_src_list, __pyx_v_dst_list, __pyx_v_att_list, __pyx_v_neighbor_limit, __pyx_v_delta, __pyx_v_eta);
                            }
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "cython_sampler.pyx":750
 * 
 *         cdef float eta = FLAGS.eta
 *         with nogil, parallel(num_threads=self.num_proc):             # <<<<<<<<<<<<<<
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.update_sample_weights(
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L11;
        }
        __pyx_L11:;
      }
  }

  /* "cython_sampler.pyx":707
 *         pass
 * 
 *     def update(self, np.ndarray[int,ndim=1,mode='c'] np_src_list,             # <<<<<<<<<<<<<<
 *                np.ndarray[int,ndim=1,mode='c'] np_dst_list,
 *                np.ndarray[float,ndim=1,mode='c'] np_att_list):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_np_att_list.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_np_dst_list.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_np_src_list.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cython_sampler.BanditMPSampler.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_np_att_list.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_np_dst_list.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_np_src_list.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython_sampler.pyx":759
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void update_sample_weights(             # <<<<<<<<<<<<<<
 *             self, unordered_map[int,unordered_map[int,int]]& att_map,
 *             unordered_map[int,int]& src_start, unordered_map[int,int]& src_end,
 */

static void __pyx_f_14cython_sampler_15BanditMPSampler_update_sample_weights(struct __pyx_obj_14cython_sampler_BanditMPSampler *__pyx_v_self, std::unordered_map<int,std::unordered_map<int,int> >  &__pyx_v_att_map, std::unordered_map<int,int>  &__pyx_v_src_start, std::unordered_map<int,int>  &__pyx_v_src_end, int __pyx_v_p, int __pyx_v_num_src, std::vector<int>  &__pyx_v_src_set, CYTHON_UNUSED std::vector<int>  &__pyx_v_src_list, std::vector<int>  &__pyx_v_dst_list, std::vector<float>  &__pyx_v_att_list, CYTHON_UNUSED int __pyx_v_neighbor_limit, CYTHON_UNUSED float __pyx_v_delta, float __pyx_v_eta) {
  int __pyx_v_src;
  int __pyx_v_dst;
  int __pyx_v_src_idx;
  int __pyx_v_i;
  int __pyx_v_n_arm;
  int __pyx_v_idx;
  std::vector<double>  __pyx_v_weight_list;
  double __pyx_v_weight_sum;
  double __pyx_v_alpha;
  double __pyx_v_C_sum;
  double __pyx_v_left_sum;
  double __pyx_v_alpha_i;
  int __pyx_v_N;
  std::vector<double>  __pyx_v_weight_prime;
  std::vector<double>  *__pyx_v_src_sample_weights;
  double __pyx_v_weight_prime_sum;
  CYTHON_UNUSED int __pyx_v_T;
  double __pyx_v_p_s;
  int __pyx_v_att_idx;
  double __pyx_v_reward;
  double __pyx_v_C;
  double __pyx_v_w;
  int __pyx_t_1;
  double __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  std::vector<int>  __pyx_t_5;
  float __pyx_t_6;
  double __pyx_t_7;
  int __pyx_t_8;

  /* "cython_sampler.pyx":767
 *         cdef int src
 *         cdef int dst
 *         cdef int src_idx = 0             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef int n_arm
 */
  __pyx_v_src_idx = 0;

  /* "cython_sampler.pyx":781
 *         cdef vector[double] weight_prime
 *         cdef vector[double]* src_sample_weights
 *         cdef double weight_prime_sum = 0.             # <<<<<<<<<<<<<<
 *         cdef int T = 40
 *         while src_idx < num_src:
 */
  __pyx_v_weight_prime_sum = 0.;

  /* "cython_sampler.pyx":782
 *         cdef vector[double]* src_sample_weights
 *         cdef double weight_prime_sum = 0.
 *         cdef int T = 40             # <<<<<<<<<<<<<<
 *         while src_idx < num_src:
 *             src = src_set[src_idx]
 */
  __pyx_v_T = 40;

  /* "cython_sampler.pyx":783
 *         cdef double weight_prime_sum = 0.
 *         cdef int T = 40
 *         while src_idx < num_src:             # <<<<<<<<<<<<<<
 *             src = src_set[src_idx]
 *             #if self.sample_set0.find(src) == self.sample_set0.end():
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_src_idx < __pyx_v_num_src) != 0);
    if (!__pyx_t_1) break;

    /* "cython_sampler.pyx":784
 *         cdef int T = 40
 *         while src_idx < num_src:
 *             src = src_set[src_idx]             # <<<<<<<<<<<<<<
 *             #if self.sample_set0.find(src) == self.sample_set0.end():
 *             #    self.sample_set0[src] = vector[int]()
 */
    __pyx_v_src = (__pyx_v_src_set[__pyx_v_src_idx]);

    /* "cython_sampler.pyx":788
 *             #    self.sample_set0[src] = vector[int]()
 * 
 *             if src_idx % self.num_proc != p:             # <<<<<<<<<<<<<<
 *                 src_idx += 1
 *                 continue
 */
    if (unlikely(__pyx_v_self->__pyx_base.num_proc == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 788, __pyx_L1_error)
    }
    __pyx_t_1 = ((__Pyx_mod_int(__pyx_v_src_idx, __pyx_v_self->__pyx_base.num_proc) != __pyx_v_p) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":789
 * 
 *             if src_idx % self.num_proc != p:
 *                 src_idx += 1             # <<<<<<<<<<<<<<
 *                 continue
 *             n_arm = self.degree[src]
 */
      __pyx_v_src_idx = (__pyx_v_src_idx + 1);

      /* "cython_sampler.pyx":790
 *             if src_idx % self.num_proc != p:
 *                 src_idx += 1
 *                 continue             # <<<<<<<<<<<<<<
 *             n_arm = self.degree[src]
 *             if n_arm <= self.neighbor_limit:
 */
      goto __pyx_L3_continue;

      /* "cython_sampler.pyx":788
 *             #    self.sample_set0[src] = vector[int]()
 * 
 *             if src_idx % self.num_proc != p:             # <<<<<<<<<<<<<<
 *                 src_idx += 1
 *                 continue
 */
    }

    /* "cython_sampler.pyx":791
 *                 src_idx += 1
 *                 continue
 *             n_arm = self.degree[src]             # <<<<<<<<<<<<<<
 *             if n_arm <= self.neighbor_limit:
 *                 src_idx += 1
 */
    __pyx_v_n_arm = (__pyx_v_self->__pyx_base.degree[__pyx_v_src]);

    /* "cython_sampler.pyx":792
 *                 continue
 *             n_arm = self.degree[src]
 *             if n_arm <= self.neighbor_limit:             # <<<<<<<<<<<<<<
 *                 src_idx += 1
 *                 continue
 */
    __pyx_t_1 = ((__pyx_v_n_arm <= __pyx_v_self->__pyx_base.neighbor_limit) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":793
 *             n_arm = self.degree[src]
 *             if n_arm <= self.neighbor_limit:
 *                 src_idx += 1             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
      __pyx_v_src_idx = (__pyx_v_src_idx + 1);

      /* "cython_sampler.pyx":794
 *             if n_arm <= self.neighbor_limit:
 *                 src_idx += 1
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             #delta = delta/n_arm**2
 */
      goto __pyx_L3_continue;

      /* "cython_sampler.pyx":792
 *                 continue
 *             n_arm = self.degree[src]
 *             if n_arm <= self.neighbor_limit:             # <<<<<<<<<<<<<<
 *                 src_idx += 1
 *                 continue
 */
    }

    /* "cython_sampler.pyx":797
 * 
 *             #delta = delta/n_arm**2
 *             delta = 1./n_arm             # <<<<<<<<<<<<<<
 * 
 *             # update weights
 */
    if (unlikely(__pyx_v_n_arm == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 797, __pyx_L1_error)
    }
    __pyx_v_delta = (1. / ((double)__pyx_v_n_arm));

    /* "cython_sampler.pyx":800
 * 
 *             # update weights
 *             p_s = 0.             # <<<<<<<<<<<<<<
 *             i = src_start[src]
 *             while i < src_end[src]:
 */
    __pyx_v_p_s = 0.;

    /* "cython_sampler.pyx":801
 *             # update weights
 *             p_s = 0.
 *             i = src_start[src]             # <<<<<<<<<<<<<<
 *             while i < src_end[src]:
 *                 dst = dst_list[i]
 */
    __pyx_v_i = (__pyx_v_src_start[__pyx_v_src]);

    /* "cython_sampler.pyx":802
 *             p_s = 0.
 *             i = src_start[src]
 *             while i < src_end[src]:             # <<<<<<<<<<<<<<
 *                 dst = dst_list[i]
 *                 idx = self.sample_index[src][dst]
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_i < (__pyx_v_src_end[__pyx_v_src])) != 0);
      if (!__pyx_t_1) break;

      /* "cython_sampler.pyx":803
 *             i = src_start[src]
 *             while i < src_end[src]:
 *                 dst = dst_list[i]             # <<<<<<<<<<<<<<
 *                 idx = self.sample_index[src][dst]
 *                 p_s += self.sample_probs[src][idx]
 */
      __pyx_v_dst = (__pyx_v_dst_list[__pyx_v_i]);

      /* "cython_sampler.pyx":804
 *             while i < src_end[src]:
 *                 dst = dst_list[i]
 *                 idx = self.sample_index[src][dst]             # <<<<<<<<<<<<<<
 *                 p_s += self.sample_probs[src][idx]
 *                 i += 1
 */
      __pyx_v_idx = ((__pyx_v_self->__pyx_base.sample_index[__pyx_v_src])[__pyx_v_dst]);

      /* "cython_sampler.pyx":805
 *                 dst = dst_list[i]
 *                 idx = self.sample_index[src][dst]
 *                 p_s += self.sample_probs[src][idx]             # <<<<<<<<<<<<<<
 *                 i += 1
 *             i = src_start[src]
 */
      __pyx_v_p_s = (__pyx_v_p_s + ((__pyx_v_self->__pyx_base.sample_probs[__pyx_v_src])[__pyx_v_idx]));

      /* "cython_sampler.pyx":806
 *                 idx = self.sample_index[src][dst]
 *                 p_s += self.sample_probs[src][idx]
 *                 i += 1             # <<<<<<<<<<<<<<
 *             i = src_start[src]
 *             while i < src_end[src]:
 */
      __pyx_v_i = (__pyx_v_i + 1);
    }

    /* "cython_sampler.pyx":807
 *                 p_s += self.sample_probs[src][idx]
 *                 i += 1
 *             i = src_start[src]             # <<<<<<<<<<<<<<
 *             while i < src_end[src]:
 *                 dst = dst_list[i]
 */
    __pyx_v_i = (__pyx_v_src_start[__pyx_v_src]);

    /* "cython_sampler.pyx":808
 *                 i += 1
 *             i = src_start[src]
 *             while i < src_end[src]:             # <<<<<<<<<<<<<<
 *                 dst = dst_list[i]
 *                 if vec_find(self.sample_set0[src], dst):
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_i < (__pyx_v_src_end[__pyx_v_src])) != 0);
      if (!__pyx_t_1) break;

      /* "cython_sampler.pyx":809
 *             i = src_start[src]
 *             while i < src_end[src]:
 *                 dst = dst_list[i]             # <<<<<<<<<<<<<<
 *                 if vec_find(self.sample_set0[src], dst):
 *                     i += 1
 */
      __pyx_v_dst = (__pyx_v_dst_list[__pyx_v_i]);

      /* "cython_sampler.pyx":810
 *             while i < src_end[src]:
 *                 dst = dst_list[i]
 *                 if vec_find(self.sample_set0[src], dst):             # <<<<<<<<<<<<<<
 *                     i += 1
 *                     continue
 */
      __pyx_t_1 = (__pyx_f_14cython_sampler_vec_find((__pyx_v_self->__pyx_base.sample_set0[__pyx_v_src]), __pyx_v_dst) != 0);
      if (__pyx_t_1) {

        /* "cython_sampler.pyx":811
 *                 dst = dst_list[i]
 *                 if vec_find(self.sample_set0[src], dst):
 *                     i += 1             # <<<<<<<<<<<<<<
 *                     continue
 *                 idx = self.sample_index[src][dst]
 */
        __pyx_v_i = (__pyx_v_i + 1);

        /* "cython_sampler.pyx":812
 *                 if vec_find(self.sample_set0[src], dst):
 *                     i += 1
 *                     continue             # <<<<<<<<<<<<<<
 *                 idx = self.sample_index[src][dst]
 *                 att_idx = att_map[src][dst]
 */
        goto __pyx_L9_continue;

        /* "cython_sampler.pyx":810
 *             while i < src_end[src]:
 *                 dst = dst_list[i]
 *                 if vec_find(self.sample_set0[src], dst):             # <<<<<<<<<<<<<<
 *                     i += 1
 *                     continue
 */
      }

      /* "cython_sampler.pyx":813
 *                     i += 1
 *                     continue
 *                 idx = self.sample_index[src][dst]             # <<<<<<<<<<<<<<
 *                 att_idx = att_map[src][dst]
 *                 reward = att_list[att_idx] * p_s / self.neighbor_limit
 */
      __pyx_v_idx = ((__pyx_v_self->__pyx_base.sample_index[__pyx_v_src])[__pyx_v_dst]);

      /* "cython_sampler.pyx":814
 *                     continue
 *                 idx = self.sample_index[src][dst]
 *                 att_idx = att_map[src][dst]             # <<<<<<<<<<<<<<
 *                 reward = att_list[att_idx] * p_s / self.neighbor_limit
 *                 self.sample_weights[src][idx] += reward
 */
      __pyx_v_att_idx = ((__pyx_v_att_map[__pyx_v_src])[__pyx_v_dst]);

      /* "cython_sampler.pyx":815
 *                 idx = self.sample_index[src][dst]
 *                 att_idx = att_map[src][dst]
 *                 reward = att_list[att_idx] * p_s / self.neighbor_limit             # <<<<<<<<<<<<<<
 *                 self.sample_weights[src][idx] += reward
 * 
 */
      __pyx_t_2 = ((__pyx_v_att_list[__pyx_v_att_idx]) * __pyx_v_p_s);
      if (unlikely(__pyx_v_self->__pyx_base.neighbor_limit == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 815, __pyx_L1_error)
      }
      __pyx_v_reward = (__pyx_t_2 / ((double)__pyx_v_self->__pyx_base.neighbor_limit));

      /* "cython_sampler.pyx":816
 *                 att_idx = att_map[src][dst]
 *                 reward = att_list[att_idx] * p_s / self.neighbor_limit
 *                 self.sample_weights[src][idx] += reward             # <<<<<<<<<<<<<<
 * 
 *                 #reward = att_list[att_idx]**2 \
 */
      __pyx_t_3 = __pyx_v_src;
      __pyx_t_4 = __pyx_v_idx;
      ((__pyx_v_self->__pyx_base.sample_weights[__pyx_t_3])[__pyx_t_4]) = (((__pyx_v_self->__pyx_base.sample_weights[__pyx_t_3])[__pyx_t_4]) + __pyx_v_reward);

      /* "cython_sampler.pyx":824
 *                 #reward = exp(reward)
 *                 #self.sample_weights[src][idx] *= min([reward, 2.0])
 *                 i += 1             # <<<<<<<<<<<<<<
 *             src_idx += 1
 * 
 */
      __pyx_v_i = (__pyx_v_i + 1);
      __pyx_L9_continue:;
    }

    /* "cython_sampler.pyx":825
 *                 #self.sample_weights[src][idx] *= min([reward, 2.0])
 *                 i += 1
 *             src_idx += 1             # <<<<<<<<<<<<<<
 * 
 *             weight_list.clear()
 */
    __pyx_v_src_idx = (__pyx_v_src_idx + 1);

    /* "cython_sampler.pyx":827
 *             src_idx += 1
 * 
 *             weight_list.clear()             # <<<<<<<<<<<<<<
 *             weight_list.insert(
 *                     weight_list.begin(), self.sample_weights[src].begin(),
 */
    __pyx_v_weight_list.clear();

    /* "cython_sampler.pyx":828
 * 
 *             weight_list.clear()
 *             weight_list.insert(             # <<<<<<<<<<<<<<
 *                     weight_list.begin(), self.sample_weights[src].begin(),
 *                     self.sample_weights[src].end())
 */
    try {
      __pyx_v_weight_list.insert(__pyx_v_weight_list.begin(), (__pyx_v_self->__pyx_base.sample_weights[__pyx_v_src]).begin(), (__pyx_v_self->__pyx_base.sample_weights[__pyx_v_src]).end());
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 828, __pyx_L1_error)
    }

    /* "cython_sampler.pyx":831
 *                     weight_list.begin(), self.sample_weights[src].begin(),
 *                     self.sample_weights[src].end())
 *             sort(weight_list.begin(), weight_list.end())             # <<<<<<<<<<<<<<
 *             weight_sum = sum_double(weight_list)
 * 
 */
    std::sort<std::vector<double> ::iterator>(__pyx_v_weight_list.begin(), __pyx_v_weight_list.end());

    /* "cython_sampler.pyx":832
 *                     self.sample_weights[src].end())
 *             sort(weight_list.begin(), weight_list.end())
 *             weight_sum = sum_double(weight_list)             # <<<<<<<<<<<<<<
 * 
 *             # reset sample_set0
 */
    __pyx_v_weight_sum = __pyx_f_14cython_sampler_sum_double(__pyx_v_weight_list);

    /* "cython_sampler.pyx":835
 * 
 *             # reset sample_set0
 *             self.sample_set0[src].clear()             # <<<<<<<<<<<<<<
 *             self.sample_set0[src] = vector[int]()
 * 
 */
    (__pyx_v_self->__pyx_base.sample_set0[__pyx_v_src]).clear();

    /* "cython_sampler.pyx":836
 *             # reset sample_set0
 *             self.sample_set0[src].clear()
 *             self.sample_set0[src] = vector[int]()             # <<<<<<<<<<<<<<
 * 
 *             # decide alpha
 */
    try {
      __pyx_t_5 = std::vector<int> ();
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 836, __pyx_L1_error)
    }
    (__pyx_v_self->__pyx_base.sample_set0[__pyx_v_src]) = __pyx_t_5;

    /* "cython_sampler.pyx":839
 * 
 *             # decide alpha
 *             alpha = 0.             # <<<<<<<<<<<<<<
 *             C = (1./self.neighbor_limit - eta/n_arm)/(1-eta)
 *             C_sum = C*weight_sum
 */
    __pyx_v_alpha = 0.;

    /* "cython_sampler.pyx":840
 *             # decide alpha
 *             alpha = 0.
 *             C = (1./self.neighbor_limit - eta/n_arm)/(1-eta)             # <<<<<<<<<<<<<<
 *             C_sum = C*weight_sum
 *             if vec_max(weight_list) >= C_sum:
 */
    if (unlikely(__pyx_v_self->__pyx_base.neighbor_limit == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 840, __pyx_L1_error)
    }
    if (unlikely(__pyx_v_n_arm == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 840, __pyx_L1_error)
    }
    __pyx_t_2 = ((1. / ((double)__pyx_v_self->__pyx_base.neighbor_limit)) - (__pyx_v_eta / ((float)__pyx_v_n_arm)));
    __pyx_t_6 = (1.0 - __pyx_v_eta);
    if (unlikely(__pyx_t_6 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 840, __pyx_L1_error)
    }
    __pyx_v_C = (__pyx_t_2 / ((double)__pyx_t_6));

    /* "cython_sampler.pyx":841
 *             alpha = 0.
 *             C = (1./self.neighbor_limit - eta/n_arm)/(1-eta)
 *             C_sum = C*weight_sum             # <<<<<<<<<<<<<<
 *             if vec_max(weight_list) >= C_sum:
 *                 left_sum = 0.
 */
    __pyx_v_C_sum = (__pyx_v_C * __pyx_v_weight_sum);

    /* "cython_sampler.pyx":842
 *             C = (1./self.neighbor_limit - eta/n_arm)/(1-eta)
 *             C_sum = C*weight_sum
 *             if vec_max(weight_list) >= C_sum:             # <<<<<<<<<<<<<<
 *                 left_sum = 0.
 *                 N = weight_list.size()
 */
    __pyx_t_1 = ((__pyx_f_14cython_sampler_vec_max(__pyx_v_weight_list) >= __pyx_v_C_sum) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":843
 *             C_sum = C*weight_sum
 *             if vec_max(weight_list) >= C_sum:
 *                 left_sum = 0.             # <<<<<<<<<<<<<<
 *                 N = weight_list.size()
 *                 i = 0
 */
      __pyx_v_left_sum = 0.;

      /* "cython_sampler.pyx":844
 *             if vec_max(weight_list) >= C_sum:
 *                 left_sum = 0.
 *                 N = weight_list.size()             # <<<<<<<<<<<<<<
 *                 i = 0
 *                 while i < N-1:
 */
      __pyx_v_N = __pyx_v_weight_list.size();

      /* "cython_sampler.pyx":845
 *                 left_sum = 0.
 *                 N = weight_list.size()
 *                 i = 0             # <<<<<<<<<<<<<<
 *                 while i < N-1:
 *                     left_sum += weight_list[i]
 */
      __pyx_v_i = 0;

      /* "cython_sampler.pyx":846
 *                 N = weight_list.size()
 *                 i = 0
 *                 while i < N-1:             # <<<<<<<<<<<<<<
 *                     left_sum += weight_list[i]
 *                     if double_abs(1 - C*(N-i-1)) < 1e-6:
 */
      while (1) {
        __pyx_t_1 = ((__pyx_v_i < (__pyx_v_N - 1)) != 0);
        if (!__pyx_t_1) break;

        /* "cython_sampler.pyx":847
 *                 i = 0
 *                 while i < N-1:
 *                     left_sum += weight_list[i]             # <<<<<<<<<<<<<<
 *                     if double_abs(1 - C*(N-i-1)) < 1e-6:
 *                         i += 1
 */
        __pyx_v_left_sum = (__pyx_v_left_sum + (__pyx_v_weight_list[__pyx_v_i]));

        /* "cython_sampler.pyx":848
 *                 while i < N-1:
 *                     left_sum += weight_list[i]
 *                     if double_abs(1 - C*(N-i-1)) < 1e-6:             # <<<<<<<<<<<<<<
 *                         i += 1
 *                         continue
 */
        __pyx_t_1 = ((__pyx_f_14cython_sampler_double_abs((1.0 - (__pyx_v_C * ((__pyx_v_N - __pyx_v_i) - 1)))) < 1e-6) != 0);
        if (__pyx_t_1) {

          /* "cython_sampler.pyx":849
 *                     left_sum += weight_list[i]
 *                     if double_abs(1 - C*(N-i-1)) < 1e-6:
 *                         i += 1             # <<<<<<<<<<<<<<
 *                         continue
 *                     alpha_i = C*left_sum / (1 - C*(N-i-1))
 */
          __pyx_v_i = (__pyx_v_i + 1);

          /* "cython_sampler.pyx":850
 *                     if double_abs(1 - C*(N-i-1)) < 1e-6:
 *                         i += 1
 *                         continue             # <<<<<<<<<<<<<<
 *                     alpha_i = C*left_sum / (1 - C*(N-i-1))
 *                     if alpha_i > weight_list[i] and alpha_i <= weight_list[i+1]:
 */
          goto __pyx_L13_continue;

          /* "cython_sampler.pyx":848
 *                 while i < N-1:
 *                     left_sum += weight_list[i]
 *                     if double_abs(1 - C*(N-i-1)) < 1e-6:             # <<<<<<<<<<<<<<
 *                         i += 1
 *                         continue
 */
        }

        /* "cython_sampler.pyx":851
 *                         i += 1
 *                         continue
 *                     alpha_i = C*left_sum / (1 - C*(N-i-1))             # <<<<<<<<<<<<<<
 *                     if alpha_i > weight_list[i] and alpha_i <= weight_list[i+1]:
 *                         alpha = alpha_i
 */
        __pyx_t_2 = (__pyx_v_C * __pyx_v_left_sum);
        __pyx_t_7 = (1.0 - (__pyx_v_C * ((__pyx_v_N - __pyx_v_i) - 1)));
        if (unlikely(__pyx_t_7 == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 851, __pyx_L1_error)
        }
        __pyx_v_alpha_i = (__pyx_t_2 / __pyx_t_7);

        /* "cython_sampler.pyx":852
 *                         continue
 *                     alpha_i = C*left_sum / (1 - C*(N-i-1))
 *                     if alpha_i > weight_list[i] and alpha_i <= weight_list[i+1]:             # <<<<<<<<<<<<<<
 *                         alpha = alpha_i
 *                         break
 */
        __pyx_t_8 = ((__pyx_v_alpha_i > (__pyx_v_weight_list[__pyx_v_i])) != 0);
        if (__pyx_t_8) {
        } else {
          __pyx_t_1 = __pyx_t_8;
          goto __pyx_L17_bool_binop_done;
        }
        __pyx_t_8 = ((__pyx_v_alpha_i <= (__pyx_v_weight_list[(__pyx_v_i + 1)])) != 0);
        __pyx_t_1 = __pyx_t_8;
        __pyx_L17_bool_binop_done:;
        if (__pyx_t_1) {

          /* "cython_sampler.pyx":853
 *                     alpha_i = C*left_sum / (1 - C*(N-i-1))
 *                     if alpha_i > weight_list[i] and alpha_i <= weight_list[i+1]:
 *                         alpha = alpha_i             # <<<<<<<<<<<<<<
 *                         break
 *                     i += 1
 */
          __pyx_v_alpha = __pyx_v_alpha_i;

          /* "cython_sampler.pyx":854
 *                     if alpha_i > weight_list[i] and alpha_i <= weight_list[i+1]:
 *                         alpha = alpha_i
 *                         break             # <<<<<<<<<<<<<<
 *                     i += 1
 *                 if alpha == 0.:
 */
          goto __pyx_L14_break;

          /* "cython_sampler.pyx":852
 *                         continue
 *                     alpha_i = C*left_sum / (1 - C*(N-i-1))
 *                     if alpha_i > weight_list[i] and alpha_i <= weight_list[i+1]:             # <<<<<<<<<<<<<<
 *                         alpha = alpha_i
 *                         break
 */
        }

        /* "cython_sampler.pyx":855
 *                         alpha = alpha_i
 *                         break
 *                     i += 1             # <<<<<<<<<<<<<<
 *                 if alpha == 0.:
 *                     printf("Error! Not find alpha!")
 */
        __pyx_v_i = (__pyx_v_i + 1);
        __pyx_L13_continue:;
      }
      __pyx_L14_break:;

      /* "cython_sampler.pyx":856
 *                         break
 *                     i += 1
 *                 if alpha == 0.:             # <<<<<<<<<<<<<<
 *                     printf("Error! Not find alpha!")
 * 
 */
      __pyx_t_1 = ((__pyx_v_alpha == 0.) != 0);
      if (__pyx_t_1) {

        /* "cython_sampler.pyx":857
 *                     i += 1
 *                 if alpha == 0.:
 *                     printf("Error! Not find alpha!")             # <<<<<<<<<<<<<<
 * 
 *                 weight_prime.clear()
 */
        (void)(printf(((char const *)"Error! Not find alpha!")));

        /* "cython_sampler.pyx":856
 *                         break
 *                     i += 1
 *                 if alpha == 0.:             # <<<<<<<<<<<<<<
 *                     printf("Error! Not find alpha!")
 * 
 */
      }

      /* "cython_sampler.pyx":859
 *                     printf("Error! Not find alpha!")
 * 
 *                 weight_prime.clear()             # <<<<<<<<<<<<<<
 *                 weight_prime_sum = 0.
 *                 src_sample_weights = &self.sample_weights[src]
 */
      __pyx_v_weight_prime.clear();

      /* "cython_sampler.pyx":860
 * 
 *                 weight_prime.clear()
 *                 weight_prime_sum = 0.             # <<<<<<<<<<<<<<
 *                 src_sample_weights = &self.sample_weights[src]
 *                 i = 0
 */
      __pyx_v_weight_prime_sum = 0.;

      /* "cython_sampler.pyx":861
 *                 weight_prime.clear()
 *                 weight_prime_sum = 0.
 *                 src_sample_weights = &self.sample_weights[src]             # <<<<<<<<<<<<<<
 *                 i = 0
 *                 while i < n_arm:
 */
      __pyx_v_src_sample_weights = (&(__pyx_v_self->__pyx_base.sample_weights[__pyx_v_src]));

      /* "cython_sampler.pyx":862
 *                 weight_prime_sum = 0.
 *                 src_sample_weights = &self.sample_weights[src]
 *                 i = 0             # <<<<<<<<<<<<<<
 *                 while i < n_arm:
 *                     w = deref(src_sample_weights)[i]
 */
      __pyx_v_i = 0;

      /* "cython_sampler.pyx":863
 *                 src_sample_weights = &self.sample_weights[src]
 *                 i = 0
 *                 while i < n_arm:             # <<<<<<<<<<<<<<
 *                     w = deref(src_sample_weights)[i]
 *                     if w < alpha:
 */
      while (1) {
        __pyx_t_1 = ((__pyx_v_i < __pyx_v_n_arm) != 0);
        if (!__pyx_t_1) break;

        /* "cython_sampler.pyx":864
 *                 i = 0
 *                 while i < n_arm:
 *                     w = deref(src_sample_weights)[i]             # <<<<<<<<<<<<<<
 *                     if w < alpha:
 *                         weight_prime.push_back(w)
 */
        __pyx_v_w = ((*__pyx_v_src_sample_weights)[__pyx_v_i]);

        /* "cython_sampler.pyx":865
 *                 while i < n_arm:
 *                     w = deref(src_sample_weights)[i]
 *                     if w < alpha:             # <<<<<<<<<<<<<<
 *                         weight_prime.push_back(w)
 *                         weight_prime_sum += w
 */
        __pyx_t_1 = ((__pyx_v_w < __pyx_v_alpha) != 0);
        if (__pyx_t_1) {

          /* "cython_sampler.pyx":866
 *                     w = deref(src_sample_weights)[i]
 *                     if w < alpha:
 *                         weight_prime.push_back(w)             # <<<<<<<<<<<<<<
 *                         weight_prime_sum += w
 *                     else:
 */
          try {
            __pyx_v_weight_prime.push_back(__pyx_v_w);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 866, __pyx_L1_error)
          }

          /* "cython_sampler.pyx":867
 *                     if w < alpha:
 *                         weight_prime.push_back(w)
 *                         weight_prime_sum += w             # <<<<<<<<<<<<<<
 *                     else:
 *                         weight_prime.push_back(alpha)
 */
          __pyx_v_weight_prime_sum = (__pyx_v_weight_prime_sum + __pyx_v_w);

          /* "cython_sampler.pyx":865
 *                 while i < n_arm:
 *                     w = deref(src_sample_weights)[i]
 *                     if w < alpha:             # <<<<<<<<<<<<<<
 *                         weight_prime.push_back(w)
 *                         weight_prime_sum += w
 */
          goto __pyx_L22;
        }

        /* "cython_sampler.pyx":869
 *                         weight_prime_sum += w
 *                     else:
 *                         weight_prime.push_back(alpha)             # <<<<<<<<<<<<<<
 *                         weight_prime_sum += alpha
 *                         dst = self.adj[src][i]
 */
        /*else*/ {
          try {
            __pyx_v_weight_prime.push_back(__pyx_v_alpha);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 869, __pyx_L1_error)
          }

          /* "cython_sampler.pyx":870
 *                     else:
 *                         weight_prime.push_back(alpha)
 *                         weight_prime_sum += alpha             # <<<<<<<<<<<<<<
 *                         dst = self.adj[src][i]
 *                         self.sample_set0[src].push_back(dst)
 */
          __pyx_v_weight_prime_sum = (__pyx_v_weight_prime_sum + __pyx_v_alpha);

          /* "cython_sampler.pyx":871
 *                         weight_prime.push_back(alpha)
 *                         weight_prime_sum += alpha
 *                         dst = self.adj[src][i]             # <<<<<<<<<<<<<<
 *                         self.sample_set0[src].push_back(dst)
 *                     i += 1
 */
          __pyx_v_dst = ((__pyx_v_self->__pyx_base.adj[__pyx_v_src])[__pyx_v_i]);

          /* "cython_sampler.pyx":872
 *                         weight_prime_sum += alpha
 *                         dst = self.adj[src][i]
 *                         self.sample_set0[src].push_back(dst)             # <<<<<<<<<<<<<<
 *                     i += 1
 * 
 */
          try {
            (__pyx_v_self->__pyx_base.sample_set0[__pyx_v_src]).push_back(__pyx_v_dst);
          } catch(...) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            __Pyx_CppExn2PyErr();
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 872, __pyx_L1_error)
          }
        }
        __pyx_L22:;

        /* "cython_sampler.pyx":873
 *                         dst = self.adj[src][i]
 *                         self.sample_set0[src].push_back(dst)
 *                     i += 1             # <<<<<<<<<<<<<<
 * 
 *                 # update sample probs
 */
        __pyx_v_i = (__pyx_v_i + 1);
      }

      /* "cython_sampler.pyx":876
 * 
 *                 # update sample probs
 *                 i = 0             # <<<<<<<<<<<<<<
 *                 while i < n_arm:
 *                     self.sample_probs[src][i] = \
 */
      __pyx_v_i = 0;

      /* "cython_sampler.pyx":877
 *                 # update sample probs
 *                 i = 0
 *                 while i < n_arm:             # <<<<<<<<<<<<<<
 *                     self.sample_probs[src][i] = \
 *                         (eta*1./n_arm + (1-eta)*weight_prime[i]/weight_prime_sum)\
 */
      while (1) {
        __pyx_t_1 = ((__pyx_v_i < __pyx_v_n_arm) != 0);
        if (!__pyx_t_1) break;

        /* "cython_sampler.pyx":879
 *                 while i < n_arm:
 *                     self.sample_probs[src][i] = \
 *                         (eta*1./n_arm + (1-eta)*weight_prime[i]/weight_prime_sum)\             # <<<<<<<<<<<<<<
 *                         *self.neighbor_limit
 *                     i += 1
 */
        __pyx_t_7 = (__pyx_v_eta * 1.);
        if (unlikely(__pyx_v_n_arm == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 879, __pyx_L1_error)
        }
        __pyx_t_2 = ((1.0 - __pyx_v_eta) * (__pyx_v_weight_prime[__pyx_v_i]));
        if (unlikely(__pyx_v_weight_prime_sum == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 879, __pyx_L1_error)
        }

        /* "cython_sampler.pyx":878
 *                 i = 0
 *                 while i < n_arm:
 *                     self.sample_probs[src][i] = \             # <<<<<<<<<<<<<<
 *                         (eta*1./n_arm + (1-eta)*weight_prime[i]/weight_prime_sum)\
 *                         *self.neighbor_limit
 */
        ((__pyx_v_self->__pyx_base.sample_probs[__pyx_v_src])[__pyx_v_i]) = (((__pyx_t_7 / ((double)__pyx_v_n_arm)) + (__pyx_t_2 / __pyx_v_weight_prime_sum)) * __pyx_v_self->__pyx_base.neighbor_limit);

        /* "cython_sampler.pyx":881
 *                         (eta*1./n_arm + (1-eta)*weight_prime[i]/weight_prime_sum)\
 *                         *self.neighbor_limit
 *                     i += 1             # <<<<<<<<<<<<<<
 *             else:
 *                 # update sample probs
 */
        __pyx_v_i = (__pyx_v_i + 1);
      }

      /* "cython_sampler.pyx":842
 *             C = (1./self.neighbor_limit - eta/n_arm)/(1-eta)
 *             C_sum = C*weight_sum
 *             if vec_max(weight_list) >= C_sum:             # <<<<<<<<<<<<<<
 *                 left_sum = 0.
 *                 N = weight_list.size()
 */
      goto __pyx_L12;
    }

    /* "cython_sampler.pyx":884
 *             else:
 *                 # update sample probs
 *                 i = 0             # <<<<<<<<<<<<<<
 *                 src_sample_weights = &self.sample_weights[src]
 *                 while i < n_arm:
 */
    /*else*/ {
      __pyx_v_i = 0;

      /* "cython_sampler.pyx":885
 *                 # update sample probs
 *                 i = 0
 *                 src_sample_weights = &self.sample_weights[src]             # <<<<<<<<<<<<<<
 *                 while i < n_arm:
 *                     self.sample_probs[src][i] = \
 */
      __pyx_v_src_sample_weights = (&(__pyx_v_self->__pyx_base.sample_weights[__pyx_v_src]));

      /* "cython_sampler.pyx":886
 *                 i = 0
 *                 src_sample_weights = &self.sample_weights[src]
 *                 while i < n_arm:             # <<<<<<<<<<<<<<
 *                     self.sample_probs[src][i] = \
 *                         (eta*1./n_arm + (1-eta)*deref(src_sample_weights)[i]/weight_sum)\
 */
      while (1) {
        __pyx_t_1 = ((__pyx_v_i < __pyx_v_n_arm) != 0);
        if (!__pyx_t_1) break;

        /* "cython_sampler.pyx":888
 *                 while i < n_arm:
 *                     self.sample_probs[src][i] = \
 *                         (eta*1./n_arm + (1-eta)*deref(src_sample_weights)[i]/weight_sum)\             # <<<<<<<<<<<<<<
 *                         *self.neighbor_limit
 *                     i += 1
 */
        __pyx_t_2 = (__pyx_v_eta * 1.);
        if (unlikely(__pyx_v_n_arm == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 888, __pyx_L1_error)
        }
        __pyx_t_7 = ((1.0 - __pyx_v_eta) * ((*__pyx_v_src_sample_weights)[__pyx_v_i]));
        if (unlikely(__pyx_v_weight_sum == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 888, __pyx_L1_error)
        }

        /* "cython_sampler.pyx":887
 *                 src_sample_weights = &self.sample_weights[src]
 *                 while i < n_arm:
 *                     self.sample_probs[src][i] = \             # <<<<<<<<<<<<<<
 *                         (eta*1./n_arm + (1-eta)*deref(src_sample_weights)[i]/weight_sum)\
 *                         *self.neighbor_limit
 */
        ((__pyx_v_self->__pyx_base.sample_probs[__pyx_v_src])[__pyx_v_i]) = (((__pyx_t_2 / ((double)__pyx_v_n_arm)) + (__pyx_t_7 / __pyx_v_weight_sum)) * __pyx_v_self->__pyx_base.neighbor_limit);

        /* "cython_sampler.pyx":890
 *                         (eta*1./n_arm + (1-eta)*deref(src_sample_weights)[i]/weight_sum)\
 *                         *self.neighbor_limit
 *                     i += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_v_i = (__pyx_v_i + 1);
      }
    }
    __pyx_L12:;
    __pyx_L3_continue:;
  }

  /* "cython_sampler.pyx":759
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void update_sample_weights(             # <<<<<<<<<<<<<<
 *             self, unordered_map[int,unordered_map[int,int]]& att_map,
 *             unordered_map[int,int]& src_start, unordered_map[int,int]& src_end,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cython_sampler.BanditMPSampler.update_sample_weights", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
}

/* "cython_sampler.pyx":895
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     def sample_graph(self, py_roots):             # <<<<<<<<<<<<<<
 *         cdef vector[int] roots
 *         cutils.npy2vec_int(py_roots, roots)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14cython_sampler_15BanditMPSampler_5sample_graph(PyObject *__pyx_v_self, PyObject *__pyx_v_py_roots); /*proto*/
static PyObject *__pyx_pw_14cython_sampler_15BanditMPSampler_5sample_graph(PyObject *__pyx_v_self, PyObject *__pyx_v_py_roots) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sample_graph (wrapper)", 0);
  __pyx_r = __pyx_pf_14cython_sampler_15BanditMPSampler_4sample_graph(((struct __pyx_obj_14cython_sampler_BanditMPSampler *)__pyx_v_self), ((PyObject *)__pyx_v_py_roots));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14cython_sampler_15BanditMPSampler_4sample_graph(struct __pyx_obj_14cython_sampler_BanditMPSampler *__pyx_v_self, PyObject *__pyx_v_py_roots) {
  std::vector<int>  __pyx_v_roots;
  std::vector<int>  __pyx_v_edges;
  std::unordered_set<int>  __pyx_v_n_depth;
  int __pyx_v_num_data;
  int __pyx_v_p;
  std::vector<std::vector<int> >  __pyx_v_edges_all;
  std::vector<std::unordered_set<int> >  __pyx_v_n_depth_all;
  std::unordered_set<int> ::iterator __pyx_v_it;
  std::vector<int> ::iterator __pyx_v_found;
  int __pyx_v_i;
  int __pyx_v_edge_size;
  CYTHON_UNUSED int __pyx_v_k;
  std::vector<int>  __pyx_v_n_depth_vec;
  struct __pyx_obj_12cython_utils_array_wrapper_int *__pyx_v_w_edges = 0;
  PyObject *__pyx_v_np_edges = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  std::vector<int>  __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("sample_graph", 0);

  /* "cython_sampler.pyx":897
 *     def sample_graph(self, py_roots):
 *         cdef vector[int] roots
 *         cutils.npy2vec_int(py_roots, roots)             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[int] edges
 */
  if (!(likely(((__pyx_v_py_roots) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_py_roots, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 897, __pyx_L1_error)
  __pyx_f_12cython_utils_npy2vec_int(((PyArrayObject *)__pyx_v_py_roots), __pyx_v_roots);

  /* "cython_sampler.pyx":903
 * 
 *         # 1st layer
 *         cdef int num_data = roots.size()             # <<<<<<<<<<<<<<
 *         cdef int p = 0
 *         cdef vector[vector[int]] edges_all
 */
  __pyx_v_num_data = __pyx_v_roots.size();

  /* "cython_sampler.pyx":904
 *         # 1st layer
 *         cdef int num_data = roots.size()
 *         cdef int p = 0             # <<<<<<<<<<<<<<
 *         cdef vector[vector[int]] edges_all
 *         cdef vector[unordered_set[int]] n_depth_all
 */
  __pyx_v_p = 0;

  /* "cython_sampler.pyx":907
 *         cdef vector[vector[int]] edges_all
 *         cdef vector[unordered_set[int]] n_depth_all
 *         edges_all.resize(self.num_proc)             # <<<<<<<<<<<<<<
 *         n_depth_all.resize(self.num_proc)
 *         with nogil, parallel(num_threads=self.num_proc):
 */
  try {
    __pyx_v_edges_all.resize(__pyx_v_self->__pyx_base.num_proc);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 907, __pyx_L1_error)
  }

  /* "cython_sampler.pyx":908
 *         cdef vector[unordered_set[int]] n_depth_all
 *         edges_all.resize(self.num_proc)
 *         n_depth_all.resize(self.num_proc)             # <<<<<<<<<<<<<<
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):
 */
  try {
    __pyx_v_n_depth_all.resize(__pyx_v_self->__pyx_base.num_proc);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 908, __pyx_L1_error)
  }

  /* "cython_sampler.pyx":909
 *         edges_all.resize(self.num_proc)
 *         n_depth_all.resize(self.num_proc)
 *         with nogil, parallel(num_threads=self.num_proc):             # <<<<<<<<<<<<<<
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.c_sample_graph_v1(p, num_data, roots, edges_all[p], n_depth_all[p])
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            #ifdef _OPENMP
            #pragma omp parallel  private(__pyx_t_1, __pyx_t_2, __pyx_t_3) num_threads(__pyx_v_self->__pyx_base.num_proc)
            #endif /* _OPENMP */
            {

                /* "cython_sampler.pyx":910
 *         n_depth_all.resize(self.num_proc)
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):             # <<<<<<<<<<<<<<
 *                 self.c_sample_graph_v1(p, num_data, roots, edges_all[p], n_depth_all[p])
 * 
 */
                __pyx_t_1 = __pyx_v_self->__pyx_base.num_proc;
                if (1 == 0) abort();
                {
                    __pyx_t_3 = (__pyx_t_1 - 0 + 1 - 1/abs(1)) / 1;
                    if (__pyx_t_3 > 0)
                    {
                        #ifdef _OPENMP
                        #pragma omp for firstprivate(__pyx_v_p) lastprivate(__pyx_v_p) schedule(dynamic)
                        #endif /* _OPENMP */
                        for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_3; __pyx_t_2++){
                            {
                                __pyx_v_p = (int)(0 + 1 * __pyx_t_2);

                                /* "cython_sampler.pyx":911
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.c_sample_graph_v1(p, num_data, roots, edges_all[p], n_depth_all[p])             # <<<<<<<<<<<<<<
 * 
 *         cdef unordered_set[int].iterator it
 */
                                ((struct __pyx_vtabstruct_14cython_sampler_BanditMPSampler *)__pyx_v_self->__pyx_base.__pyx_vtab)->c_sample_graph_v1(__pyx_v_self, __pyx_v_p, __pyx_v_num_data, __pyx_v_roots, (__pyx_v_edges_all[__pyx_v_p]), (__pyx_v_n_depth_all[__pyx_v_p]));
                            }
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "cython_sampler.pyx":909
 *         edges_all.resize(self.num_proc)
 *         n_depth_all.resize(self.num_proc)
 *         with nogil, parallel(num_threads=self.num_proc):             # <<<<<<<<<<<<<<
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.c_sample_graph_v1(p, num_data, roots, edges_all[p], n_depth_all[p])
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "cython_sampler.pyx":916
 *         cdef vector[int].iterator found
 * 
 *         cdef int i = 0             # <<<<<<<<<<<<<<
 *         cdef int edge_size = edges.size()
 *         while i < self.num_proc:
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":917
 * 
 *         cdef int i = 0
 *         cdef int edge_size = edges.size()             # <<<<<<<<<<<<<<
 *         while i < self.num_proc:
 *             edge_size += edges_all[i].size()
 */
  __pyx_v_edge_size = __pyx_v_edges.size();

  /* "cython_sampler.pyx":918
 *         cdef int i = 0
 *         cdef int edge_size = edges.size()
 *         while i < self.num_proc:             # <<<<<<<<<<<<<<
 *             edge_size += edges_all[i].size()
 *             i += 1
 */
  while (1) {
    __pyx_t_4 = ((__pyx_v_i < __pyx_v_self->__pyx_base.num_proc) != 0);
    if (!__pyx_t_4) break;

    /* "cython_sampler.pyx":919
 *         cdef int edge_size = edges.size()
 *         while i < self.num_proc:
 *             edge_size += edges_all[i].size()             # <<<<<<<<<<<<<<
 *             i += 1
 *         edges.reserve(edge_size)
 */
    __pyx_v_edge_size = (__pyx_v_edge_size + (__pyx_v_edges_all[__pyx_v_i]).size());

    /* "cython_sampler.pyx":920
 *         while i < self.num_proc:
 *             edge_size += edges_all[i].size()
 *             i += 1             # <<<<<<<<<<<<<<
 *         edges.reserve(edge_size)
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cython_sampler.pyx":921
 *             edge_size += edges_all[i].size()
 *             i += 1
 *         edges.reserve(edge_size)             # <<<<<<<<<<<<<<
 * 
 *         i = 0
 */
  __pyx_v_edges.reserve(__pyx_v_edge_size);

  /* "cython_sampler.pyx":923
 *         edges.reserve(edge_size)
 * 
 *         i = 0             # <<<<<<<<<<<<<<
 *         cdef int k = 0
 *         while i < self.num_proc:
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":924
 * 
 *         i = 0
 *         cdef int k = 0             # <<<<<<<<<<<<<<
 *         while i < self.num_proc:
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())
 */
  __pyx_v_k = 0;

  /* "cython_sampler.pyx":925
 *         i = 0
 *         cdef int k = 0
 *         while i < self.num_proc:             # <<<<<<<<<<<<<<
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())
 *             it = n_depth_all[i].begin()
 */
  while (1) {
    __pyx_t_4 = ((__pyx_v_i < __pyx_v_self->__pyx_base.num_proc) != 0);
    if (!__pyx_t_4) break;

    /* "cython_sampler.pyx":926
 *         cdef int k = 0
 *         while i < self.num_proc:
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())             # <<<<<<<<<<<<<<
 *             it = n_depth_all[i].begin()
 *             while it != n_depth_all[i].end():
 */
    try {
      __pyx_v_edges.insert(__pyx_v_edges.end(), (__pyx_v_edges_all[__pyx_v_i]).begin(), (__pyx_v_edges_all[__pyx_v_i]).end());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 926, __pyx_L1_error)
    }

    /* "cython_sampler.pyx":927
 *         while i < self.num_proc:
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())
 *             it = n_depth_all[i].begin()             # <<<<<<<<<<<<<<
 *             while it != n_depth_all[i].end():
 *                 found = find[vector[int].iterator, int](roots.begin(), roots.end(), deref(it))
 */
    __pyx_v_it = (__pyx_v_n_depth_all[__pyx_v_i]).begin();

    /* "cython_sampler.pyx":928
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())
 *             it = n_depth_all[i].begin()
 *             while it != n_depth_all[i].end():             # <<<<<<<<<<<<<<
 *                 found = find[vector[int].iterator, int](roots.begin(), roots.end(), deref(it))
 *                 if found != roots.end():
 */
    while (1) {
      __pyx_t_4 = ((__pyx_v_it != (__pyx_v_n_depth_all[__pyx_v_i]).end()) != 0);
      if (!__pyx_t_4) break;

      /* "cython_sampler.pyx":929
 *             it = n_depth_all[i].begin()
 *             while it != n_depth_all[i].end():
 *                 found = find[vector[int].iterator, int](roots.begin(), roots.end(), deref(it))             # <<<<<<<<<<<<<<
 *                 if found != roots.end():
 *                     inc(it)
 */
      __pyx_v_found = std::find<std::vector<int> ::iterator,int>(__pyx_v_roots.begin(), __pyx_v_roots.end(), (*__pyx_v_it));

      /* "cython_sampler.pyx":930
 *             while it != n_depth_all[i].end():
 *                 found = find[vector[int].iterator, int](roots.begin(), roots.end(), deref(it))
 *                 if found != roots.end():             # <<<<<<<<<<<<<<
 *                     inc(it)
 *                     continue
 */
      __pyx_t_4 = ((__pyx_v_found != __pyx_v_roots.end()) != 0);
      if (__pyx_t_4) {

        /* "cython_sampler.pyx":931
 *                 found = find[vector[int].iterator, int](roots.begin(), roots.end(), deref(it))
 *                 if found != roots.end():
 *                     inc(it)             # <<<<<<<<<<<<<<
 *                     continue
 *                 n_depth.insert(deref(it))
 */
        (void)((++__pyx_v_it));

        /* "cython_sampler.pyx":932
 *                 if found != roots.end():
 *                     inc(it)
 *                     continue             # <<<<<<<<<<<<<<
 *                 n_depth.insert(deref(it))
 *                 inc(it)
 */
        goto __pyx_L22_continue;

        /* "cython_sampler.pyx":930
 *             while it != n_depth_all[i].end():
 *                 found = find[vector[int].iterator, int](roots.begin(), roots.end(), deref(it))
 *                 if found != roots.end():             # <<<<<<<<<<<<<<
 *                     inc(it)
 *                     continue
 */
      }

      /* "cython_sampler.pyx":933
 *                     inc(it)
 *                     continue
 *                 n_depth.insert(deref(it))             # <<<<<<<<<<<<<<
 *                 inc(it)
 *             i += 1
 */
      (void)(__pyx_v_n_depth.insert((*__pyx_v_it)));

      /* "cython_sampler.pyx":934
 *                     continue
 *                 n_depth.insert(deref(it))
 *                 inc(it)             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
      (void)((++__pyx_v_it));
      __pyx_L22_continue:;
    }

    /* "cython_sampler.pyx":935
 *                 n_depth.insert(deref(it))
 *                 inc(it)
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 *         # 2nd layer
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cython_sampler.pyx":938
 * 
 *         # 2nd layer
 *         cdef vector[int] n_depth_vec = vector[int](n_depth.size())             # <<<<<<<<<<<<<<
 *         it = n_depth.begin()
 *         i = 0
 */
  try {
    __pyx_t_5 = std::vector<int> (__pyx_v_n_depth.size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 938, __pyx_L1_error)
  }
  __pyx_v_n_depth_vec = __pyx_t_5;

  /* "cython_sampler.pyx":939
 *         # 2nd layer
 *         cdef vector[int] n_depth_vec = vector[int](n_depth.size())
 *         it = n_depth.begin()             # <<<<<<<<<<<<<<
 *         i = 0
 *         while it != n_depth.end():
 */
  __pyx_v_it = __pyx_v_n_depth.begin();

  /* "cython_sampler.pyx":940
 *         cdef vector[int] n_depth_vec = vector[int](n_depth.size())
 *         it = n_depth.begin()
 *         i = 0             # <<<<<<<<<<<<<<
 *         while it != n_depth.end():
 *             n_depth_vec[i] = deref(it)
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":941
 *         it = n_depth.begin()
 *         i = 0
 *         while it != n_depth.end():             # <<<<<<<<<<<<<<
 *             n_depth_vec[i] = deref(it)
 *             inc(it)
 */
  while (1) {
    __pyx_t_4 = ((__pyx_v_it != __pyx_v_n_depth.end()) != 0);
    if (!__pyx_t_4) break;

    /* "cython_sampler.pyx":942
 *         i = 0
 *         while it != n_depth.end():
 *             n_depth_vec[i] = deref(it)             # <<<<<<<<<<<<<<
 *             inc(it)
 *             i += 1
 */
    (__pyx_v_n_depth_vec[__pyx_v_i]) = (*__pyx_v_it);

    /* "cython_sampler.pyx":943
 *         while it != n_depth.end():
 *             n_depth_vec[i] = deref(it)
 *             inc(it)             # <<<<<<<<<<<<<<
 *             i += 1
 *         num_data = n_depth_vec.size()
 */
    (void)((++__pyx_v_it));

    /* "cython_sampler.pyx":944
 *             n_depth_vec[i] = deref(it)
 *             inc(it)
 *             i += 1             # <<<<<<<<<<<<<<
 *         num_data = n_depth_vec.size()
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cython_sampler.pyx":945
 *             inc(it)
 *             i += 1
 *         num_data = n_depth_vec.size()             # <<<<<<<<<<<<<<
 * 
 *         edges_all.clear()
 */
  __pyx_v_num_data = __pyx_v_n_depth_vec.size();

  /* "cython_sampler.pyx":947
 *         num_data = n_depth_vec.size()
 * 
 *         edges_all.clear()             # <<<<<<<<<<<<<<
 *         edges_all.resize(self.num_proc)
 *         with nogil, parallel(num_threads=self.num_proc):
 */
  __pyx_v_edges_all.clear();

  /* "cython_sampler.pyx":948
 * 
 *         edges_all.clear()
 *         edges_all.resize(self.num_proc)             # <<<<<<<<<<<<<<
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):
 */
  try {
    __pyx_v_edges_all.resize(__pyx_v_self->__pyx_base.num_proc);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 948, __pyx_L1_error)
  }

  /* "cython_sampler.pyx":949
 *         edges_all.clear()
 *         edges_all.resize(self.num_proc)
 *         with nogil, parallel(num_threads=self.num_proc):             # <<<<<<<<<<<<<<
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.c_sample_graph_v2(p, num_data, n_depth_vec, edges_all[p])
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            #ifdef _OPENMP
            #pragma omp parallel  private(__pyx_t_1, __pyx_t_2, __pyx_t_3) num_threads(__pyx_v_self->__pyx_base.num_proc)
            #endif /* _OPENMP */
            {

                /* "cython_sampler.pyx":950
 *         edges_all.resize(self.num_proc)
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):             # <<<<<<<<<<<<<<
 *                 self.c_sample_graph_v2(p, num_data, n_depth_vec, edges_all[p])
 *         i = 0
 */
                __pyx_t_3 = __pyx_v_self->__pyx_base.num_proc;
                if (1 == 0) abort();
                {
                    __pyx_t_1 = (__pyx_t_3 - 0 + 1 - 1/abs(1)) / 1;
                    if (__pyx_t_1 > 0)
                    {
                        #ifdef _OPENMP
                        #pragma omp for firstprivate(__pyx_v_p) lastprivate(__pyx_v_p) schedule(dynamic)
                        #endif /* _OPENMP */
                        for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2++){
                            {
                                __pyx_v_p = (int)(0 + 1 * __pyx_t_2);

                                /* "cython_sampler.pyx":951
 *         with nogil, parallel(num_threads=self.num_proc):
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.c_sample_graph_v2(p, num_data, n_depth_vec, edges_all[p])             # <<<<<<<<<<<<<<
 *         i = 0
 *         edge_size = edges.size()
 */
                                ((struct __pyx_vtabstruct_14cython_sampler_BanditMPSampler *)__pyx_v_self->__pyx_base.__pyx_vtab)->c_sample_graph_v2(__pyx_v_self, __pyx_v_p, __pyx_v_num_data, __pyx_v_n_depth_vec, (__pyx_v_edges_all[__pyx_v_p]));
                            }
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "cython_sampler.pyx":949
 *         edges_all.clear()
 *         edges_all.resize(self.num_proc)
 *         with nogil, parallel(num_threads=self.num_proc):             # <<<<<<<<<<<<<<
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.c_sample_graph_v2(p, num_data, n_depth_vec, edges_all[p])
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L29;
        }
        __pyx_L29:;
      }
  }

  /* "cython_sampler.pyx":952
 *             for p in prange(self.num_proc, schedule='dynamic'):
 *                 self.c_sample_graph_v2(p, num_data, n_depth_vec, edges_all[p])
 *         i = 0             # <<<<<<<<<<<<<<
 *         edge_size = edges.size()
 *         while i < self.num_proc:
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":953
 *                 self.c_sample_graph_v2(p, num_data, n_depth_vec, edges_all[p])
 *         i = 0
 *         edge_size = edges.size()             # <<<<<<<<<<<<<<
 *         while i < self.num_proc:
 *             edge_size += edges_all[i].size()
 */
  __pyx_v_edge_size = __pyx_v_edges.size();

  /* "cython_sampler.pyx":954
 *         i = 0
 *         edge_size = edges.size()
 *         while i < self.num_proc:             # <<<<<<<<<<<<<<
 *             edge_size += edges_all[i].size()
 *             i += 1
 */
  while (1) {
    __pyx_t_4 = ((__pyx_v_i < __pyx_v_self->__pyx_base.num_proc) != 0);
    if (!__pyx_t_4) break;

    /* "cython_sampler.pyx":955
 *         edge_size = edges.size()
 *         while i < self.num_proc:
 *             edge_size += edges_all[i].size()             # <<<<<<<<<<<<<<
 *             i += 1
 *         edges.reserve(edge_size)
 */
    __pyx_v_edge_size = (__pyx_v_edge_size + (__pyx_v_edges_all[__pyx_v_i]).size());

    /* "cython_sampler.pyx":956
 *         while i < self.num_proc:
 *             edge_size += edges_all[i].size()
 *             i += 1             # <<<<<<<<<<<<<<
 *         edges.reserve(edge_size)
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cython_sampler.pyx":957
 *             edge_size += edges_all[i].size()
 *             i += 1
 *         edges.reserve(edge_size)             # <<<<<<<<<<<<<<
 * 
 *         i = 0
 */
  __pyx_v_edges.reserve(__pyx_v_edge_size);

  /* "cython_sampler.pyx":959
 *         edges.reserve(edge_size)
 * 
 *         i = 0             # <<<<<<<<<<<<<<
 *         while i < self.num_proc:
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":960
 * 
 *         i = 0
 *         while i < self.num_proc:             # <<<<<<<<<<<<<<
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())
 *             i += 1
 */
  while (1) {
    __pyx_t_4 = ((__pyx_v_i < __pyx_v_self->__pyx_base.num_proc) != 0);
    if (!__pyx_t_4) break;

    /* "cython_sampler.pyx":961
 *         i = 0
 *         while i < self.num_proc:
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
    try {
      __pyx_v_edges.insert(__pyx_v_edges.end(), (__pyx_v_edges_all[__pyx_v_i]).begin(), (__pyx_v_edges_all[__pyx_v_i]).end());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 961, __pyx_L1_error)
    }

    /* "cython_sampler.pyx":962
 *         while i < self.num_proc:
 *             edges.insert(edges.end(), edges_all[i].begin(), edges_all[i].end())
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 *         # sort edges
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cython_sampler.pyx":967
 *         #sort[vector[int].iterator, f_type](edges.begin(), edges.end(), compare)
 * 
 *         cdef cutils.array_wrapper_int w_edges = cutils.array_wrapper_int()             # <<<<<<<<<<<<<<
 *         w_edges.set_data(edges)
 *         np_edges = np.frombuffer(w_edges, dtype=np.int32)
 */
  __pyx_t_6 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_12cython_utils_array_wrapper_int)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_w_edges = ((struct __pyx_obj_12cython_utils_array_wrapper_int *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "cython_sampler.pyx":968
 * 
 *         cdef cutils.array_wrapper_int w_edges = cutils.array_wrapper_int()
 *         w_edges.set_data(edges)             # <<<<<<<<<<<<<<
 *         np_edges = np.frombuffer(w_edges, dtype=np.int32)
 *         np_edges = np_edges.reshape([-1,2])
 */
  ((struct __pyx_vtabstruct_12cython_utils_array_wrapper_int *)__pyx_v_w_edges->__pyx_vtab)->set_data(__pyx_v_w_edges, __pyx_v_edges);

  /* "cython_sampler.pyx":969
 *         cdef cutils.array_wrapper_int w_edges = cutils.array_wrapper_int()
 *         w_edges.set_data(edges)
 *         np_edges = np.frombuffer(w_edges, dtype=np.int32)             # <<<<<<<<<<<<<<
 *         np_edges = np_edges.reshape([-1,2])
 *         return np_edges
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_frombuffer); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(((PyObject *)__pyx_v_w_edges));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_w_edges));
  PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_v_w_edges));
  __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_int32); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_10) < 0) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, __pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_np_edges = __pyx_t_10;
  __pyx_t_10 = 0;

  /* "cython_sampler.pyx":970
 *         w_edges.set_data(edges)
 *         np_edges = np.frombuffer(w_edges, dtype=np.int32)
 *         np_edges = np_edges.reshape([-1,2])             # <<<<<<<<<<<<<<
 *         return np_edges
 * 
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_np_edges, __pyx_n_s_reshape); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = PyList_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_int_neg_1);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_int_2);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_10 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF_SET(__pyx_v_np_edges, __pyx_t_10);
  __pyx_t_10 = 0;

  /* "cython_sampler.pyx":971
 *         np_edges = np.frombuffer(w_edges, dtype=np.int32)
 *         np_edges = np_edges.reshape([-1,2])
 *         return np_edges             # <<<<<<<<<<<<<<
 * 
 *     @cython.wraparound(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_np_edges);
  __pyx_r = __pyx_v_np_edges;
  goto __pyx_L0;

  /* "cython_sampler.pyx":895
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     def sample_graph(self, py_roots):             # <<<<<<<<<<<<<<
 *         cdef vector[int] roots
 *         cutils.npy2vec_int(py_roots, roots)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("cython_sampler.BanditMPSampler.sample_graph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_w_edges);
  __Pyx_XDECREF(__pyx_v_np_edges);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython_sampler.pyx":975
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void c_sample_graph_v1(self, int p, int num_data, vector[int]& roots,             # <<<<<<<<<<<<<<
 *                                 vector[int]& edges, unordered_set[int]& n_depth) nogil:
 *         cdef int i = 0
 */

static void __pyx_f_14cython_sampler_15BanditMPSampler_c_sample_graph_v1(struct __pyx_obj_14cython_sampler_BanditMPSampler *__pyx_v_self, int __pyx_v_p, int __pyx_v_num_data, std::vector<int>  &__pyx_v_roots, std::vector<int>  &__pyx_v_edges, std::unordered_set<int>  &__pyx_v_n_depth) {
  int __pyx_v_i;
  CYTHON_UNUSED int __pyx_v_sample_size;
  int __pyx_v_node;
  int __pyx_t_1;

  /* "cython_sampler.pyx":977
 *     cdef void c_sample_graph_v1(self, int p, int num_data, vector[int]& roots,
 *                                 vector[int]& edges, unordered_set[int]& n_depth) nogil:
 *         cdef int i = 0             # <<<<<<<<<<<<<<
 *         cdef int sample_size
 *         cdef int node
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":980
 *         cdef int sample_size
 *         cdef int node
 *         while i < num_data:             # <<<<<<<<<<<<<<
 *             if i % self.num_proc != p:
 *                 i += 1
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_i < __pyx_v_num_data) != 0);
    if (!__pyx_t_1) break;

    /* "cython_sampler.pyx":981
 *         cdef int node
 *         while i < num_data:
 *             if i % self.num_proc != p:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    if (unlikely(__pyx_v_self->__pyx_base.num_proc == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 981, __pyx_L1_error)
    }
    __pyx_t_1 = ((__Pyx_mod_int(__pyx_v_i, __pyx_v_self->__pyx_base.num_proc) != __pyx_v_p) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":982
 *         while i < num_data:
 *             if i % self.num_proc != p:
 *                 i += 1             # <<<<<<<<<<<<<<
 *                 continue
 *             node = roots[i]
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "cython_sampler.pyx":983
 *             if i % self.num_proc != p:
 *                 i += 1
 *                 continue             # <<<<<<<<<<<<<<
 *             node = roots[i]
 *             sample_size = self.sample_neighbors_v1(node, edges, n_depth)
 */
      goto __pyx_L3_continue;

      /* "cython_sampler.pyx":981
 *         cdef int node
 *         while i < num_data:
 *             if i % self.num_proc != p:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    }

    /* "cython_sampler.pyx":984
 *                 i += 1
 *                 continue
 *             node = roots[i]             # <<<<<<<<<<<<<<
 *             sample_size = self.sample_neighbors_v1(node, edges, n_depth)
 *             i += 1
 */
    __pyx_v_node = (__pyx_v_roots[__pyx_v_i]);

    /* "cython_sampler.pyx":985
 *                 continue
 *             node = roots[i]
 *             sample_size = self.sample_neighbors_v1(node, edges, n_depth)             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
    __pyx_v_sample_size = ((struct __pyx_vtabstruct_14cython_sampler_BanditMPSampler *)__pyx_v_self->__pyx_base.__pyx_vtab)->sample_neighbors_v1(__pyx_v_self, __pyx_v_node, __pyx_v_edges, __pyx_v_n_depth);

    /* "cython_sampler.pyx":986
 *             node = roots[i]
 *             sample_size = self.sample_neighbors_v1(node, edges, n_depth)
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);
    __pyx_L3_continue:;
  }

  /* "cython_sampler.pyx":975
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void c_sample_graph_v1(self, int p, int num_data, vector[int]& roots,             # <<<<<<<<<<<<<<
 *                                 vector[int]& edges, unordered_set[int]& n_depth) nogil:
 *         cdef int i = 0
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cython_sampler.BanditMPSampler.c_sample_graph_v1", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
}

/* "cython_sampler.pyx":991
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void c_sample_graph_v2(self, int p, int num_data, vector[int]& roots,             # <<<<<<<<<<<<<<
 *                                 vector[int]& edges) nogil:
 *         cdef int i = 0
 */

static void __pyx_f_14cython_sampler_15BanditMPSampler_c_sample_graph_v2(struct __pyx_obj_14cython_sampler_BanditMPSampler *__pyx_v_self, int __pyx_v_p, int __pyx_v_num_data, std::vector<int>  &__pyx_v_roots, std::vector<int>  &__pyx_v_edges) {
  int __pyx_v_i;
  int __pyx_v_node;
  int __pyx_t_1;

  /* "cython_sampler.pyx":993
 *     cdef void c_sample_graph_v2(self, int p, int num_data, vector[int]& roots,
 *                                 vector[int]& edges) nogil:
 *         cdef int i = 0             # <<<<<<<<<<<<<<
 *         cdef int node
 *         while i < num_data:
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":995
 *         cdef int i = 0
 *         cdef int node
 *         while i < num_data:             # <<<<<<<<<<<<<<
 *             if i % self.num_proc != p:
 *                 i += 1
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_i < __pyx_v_num_data) != 0);
    if (!__pyx_t_1) break;

    /* "cython_sampler.pyx":996
 *         cdef int node
 *         while i < num_data:
 *             if i % self.num_proc != p:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    if (unlikely(__pyx_v_self->__pyx_base.num_proc == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 996, __pyx_L1_error)
    }
    __pyx_t_1 = ((__Pyx_mod_int(__pyx_v_i, __pyx_v_self->__pyx_base.num_proc) != __pyx_v_p) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":997
 *         while i < num_data:
 *             if i % self.num_proc != p:
 *                 i += 1             # <<<<<<<<<<<<<<
 *                 continue
 *             node = roots[i]
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "cython_sampler.pyx":998
 *             if i % self.num_proc != p:
 *                 i += 1
 *                 continue             # <<<<<<<<<<<<<<
 *             node = roots[i]
 *             self.sample_neighbors_v2(node, edges)
 */
      goto __pyx_L3_continue;

      /* "cython_sampler.pyx":996
 *         cdef int node
 *         while i < num_data:
 *             if i % self.num_proc != p:             # <<<<<<<<<<<<<<
 *                 i += 1
 *                 continue
 */
    }

    /* "cython_sampler.pyx":999
 *                 i += 1
 *                 continue
 *             node = roots[i]             # <<<<<<<<<<<<<<
 *             self.sample_neighbors_v2(node, edges)
 *             i += 1
 */
    __pyx_v_node = (__pyx_v_roots[__pyx_v_i]);

    /* "cython_sampler.pyx":1000
 *                 continue
 *             node = roots[i]
 *             self.sample_neighbors_v2(node, edges)             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
    ((struct __pyx_vtabstruct_14cython_sampler_BanditMPSampler *)__pyx_v_self->__pyx_base.__pyx_vtab)->sample_neighbors_v2(__pyx_v_self, __pyx_v_node, __pyx_v_edges);

    /* "cython_sampler.pyx":1001
 *             node = roots[i]
 *             self.sample_neighbors_v2(node, edges)
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);
    __pyx_L3_continue:;
  }

  /* "cython_sampler.pyx":991
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void c_sample_graph_v2(self, int p, int num_data, vector[int]& roots,             # <<<<<<<<<<<<<<
 *                                 vector[int]& edges) nogil:
 *         cdef int i = 0
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cython_sampler.BanditMPSampler.c_sample_graph_v2", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
}

/* "cython_sampler.pyx":1006
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef int sample_neighbors_v1(self, int node, vector[int]& edges,             # <<<<<<<<<<<<<<
 *                                  unordered_set[int]& n_depth) nogil:
 *         cdef int sample_size = 0
 */

static int __pyx_f_14cython_sampler_15BanditMPSampler_sample_neighbors_v1(struct __pyx_obj_14cython_sampler_BanditMPSampler *__pyx_v_self, int __pyx_v_node, std::vector<int>  &__pyx_v_edges, std::unordered_set<int>  &__pyx_v_n_depth) {
  int __pyx_v_sample_size;
  int __pyx_v_degree;
  int __pyx_v_edge_size;
  std::vector<int>  *__pyx_v_neighbors;
  std::vector<int> ::iterator __pyx_v_it;
  int __pyx_v_i;
  std::vector<int>  __pyx_v_samples;
  int __pyx_v_sample_id;
  std::vector<double>  *__pyx_v_sample_probs;
  int __pyx_r;
  int __pyx_t_1;

  /* "cython_sampler.pyx":1008
 *     cdef int sample_neighbors_v1(self, int node, vector[int]& edges,
 *                                  unordered_set[int]& n_depth) nogil:
 *         cdef int sample_size = 0             # <<<<<<<<<<<<<<
 *         cdef int degree
 *         cdef int edge_size
 */
  __pyx_v_sample_size = 0;

  /* "cython_sampler.pyx":1011
 *         cdef int degree
 *         cdef int edge_size
 *         cdef vector[int]* neighbors = &self.adj[node]             # <<<<<<<<<<<<<<
 *         degree = self.degree[node]
 *         edge_size = edges.size()
 */
  __pyx_v_neighbors = (&(__pyx_v_self->__pyx_base.adj[__pyx_v_node]));

  /* "cython_sampler.pyx":1012
 *         cdef int edge_size
 *         cdef vector[int]* neighbors = &self.adj[node]
 *         degree = self.degree[node]             # <<<<<<<<<<<<<<
 *         edge_size = edges.size()
 *         cdef vector[int].iterator it
 */
  __pyx_v_degree = (__pyx_v_self->__pyx_base.degree[__pyx_v_node]);

  /* "cython_sampler.pyx":1013
 *         cdef vector[int]* neighbors = &self.adj[node]
 *         degree = self.degree[node]
 *         edge_size = edges.size()             # <<<<<<<<<<<<<<
 *         cdef vector[int].iterator it
 *         cdef int i
 */
  __pyx_v_edge_size = __pyx_v_edges.size();

  /* "cython_sampler.pyx":1019
 *         cdef int sample_id
 *         cdef vector[double] probs
 *         cdef vector[double]* sample_probs = &self.sample_probs[node]             # <<<<<<<<<<<<<<
 *         if degree <= self.neighbor_limit:
 *             edges.resize(edge_size + degree*2)
 */
  __pyx_v_sample_probs = (&(__pyx_v_self->__pyx_base.sample_probs[__pyx_v_node]));

  /* "cython_sampler.pyx":1020
 *         cdef vector[double] probs
 *         cdef vector[double]* sample_probs = &self.sample_probs[node]
 *         if degree <= self.neighbor_limit:             # <<<<<<<<<<<<<<
 *             edges.resize(edge_size + degree*2)
 *             i = 0
 */
  __pyx_t_1 = ((__pyx_v_degree <= __pyx_v_self->__pyx_base.neighbor_limit) != 0);
  if (__pyx_t_1) {

    /* "cython_sampler.pyx":1021
 *         cdef vector[double]* sample_probs = &self.sample_probs[node]
 *         if degree <= self.neighbor_limit:
 *             edges.resize(edge_size + degree*2)             # <<<<<<<<<<<<<<
 *             i = 0
 *             while i < degree:
 */
    try {
      __pyx_v_edges.resize((__pyx_v_edge_size + (__pyx_v_degree * 2)));
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 1021, __pyx_L1_error)
    }

    /* "cython_sampler.pyx":1022
 *         if degree <= self.neighbor_limit:
 *             edges.resize(edge_size + degree*2)
 *             i = 0             # <<<<<<<<<<<<<<
 *             while i < degree:
 *                 edges[edge_size+2*i] = node
 */
    __pyx_v_i = 0;

    /* "cython_sampler.pyx":1023
 *             edges.resize(edge_size + degree*2)
 *             i = 0
 *             while i < degree:             # <<<<<<<<<<<<<<
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_i < __pyx_v_degree) != 0);
      if (!__pyx_t_1) break;

      /* "cython_sampler.pyx":1024
 *             i = 0
 *             while i < degree:
 *                 edges[edge_size+2*i] = node             # <<<<<<<<<<<<<<
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]
 *                 n_depth.insert(deref(neighbors)[i])
 */
      (__pyx_v_edges[(__pyx_v_edge_size + (2 * __pyx_v_i))]) = __pyx_v_node;

      /* "cython_sampler.pyx":1025
 *             while i < degree:
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]             # <<<<<<<<<<<<<<
 *                 n_depth.insert(deref(neighbors)[i])
 *                 inc(it)
 */
      (__pyx_v_edges[((__pyx_v_edge_size + (2 * __pyx_v_i)) + 1)]) = ((*__pyx_v_neighbors)[__pyx_v_i]);

      /* "cython_sampler.pyx":1026
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]
 *                 n_depth.insert(deref(neighbors)[i])             # <<<<<<<<<<<<<<
 *                 inc(it)
 *                 i += 1
 */
      (void)(__pyx_v_n_depth.insert(((*__pyx_v_neighbors)[__pyx_v_i])));

      /* "cython_sampler.pyx":1027
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]
 *                 n_depth.insert(deref(neighbors)[i])
 *                 inc(it)             # <<<<<<<<<<<<<<
 *                 i += 1
 *             sample_size = degree
 */
      (void)((++__pyx_v_it));

      /* "cython_sampler.pyx":1028
 *                 n_depth.insert(deref(neighbors)[i])
 *                 inc(it)
 *                 i += 1             # <<<<<<<<<<<<<<
 *             sample_size = degree
 *         else:
 */
      __pyx_v_i = (__pyx_v_i + 1);
    }

    /* "cython_sampler.pyx":1029
 *                 inc(it)
 *                 i += 1
 *             sample_size = degree             # <<<<<<<<<<<<<<
 *         else:
 *             edges.resize(edge_size + self.neighbor_limit*2)
 */
    __pyx_v_sample_size = __pyx_v_degree;

    /* "cython_sampler.pyx":1020
 *         cdef vector[double] probs
 *         cdef vector[double]* sample_probs = &self.sample_probs[node]
 *         if degree <= self.neighbor_limit:             # <<<<<<<<<<<<<<
 *             edges.resize(edge_size + degree*2)
 *             i = 0
 */
    goto __pyx_L3;
  }

  /* "cython_sampler.pyx":1031
 *             sample_size = degree
 *         else:
 *             edges.resize(edge_size + self.neighbor_limit*2)             # <<<<<<<<<<<<<<
 *             samples = random_choice(deref(neighbors), deref(sample_probs), self.neighbor_limit)
 * 
 */
  /*else*/ {
    try {
      __pyx_v_edges.resize((__pyx_v_edge_size + (__pyx_v_self->__pyx_base.neighbor_limit * 2)));
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 1031, __pyx_L1_error)
    }

    /* "cython_sampler.pyx":1032
 *         else:
 *             edges.resize(edge_size + self.neighbor_limit*2)
 *             samples = random_choice(deref(neighbors), deref(sample_probs), self.neighbor_limit)             # <<<<<<<<<<<<<<
 * 
 *             i = 0
 */
    __pyx_v_samples = __pyx_f_14cython_sampler_random_choice((*__pyx_v_neighbors), (*__pyx_v_sample_probs), __pyx_v_self->__pyx_base.neighbor_limit);

    /* "cython_sampler.pyx":1034
 *             samples = random_choice(deref(neighbors), deref(sample_probs), self.neighbor_limit)
 * 
 *             i = 0             # <<<<<<<<<<<<<<
 *             while i < self.neighbor_limit:
 *                 sample_id = samples[i]
 */
    __pyx_v_i = 0;

    /* "cython_sampler.pyx":1035
 * 
 *             i = 0
 *             while i < self.neighbor_limit:             # <<<<<<<<<<<<<<
 *                 sample_id = samples[i]
 *                 edges[edge_size+2*i] = node
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_i < __pyx_v_self->__pyx_base.neighbor_limit) != 0);
      if (!__pyx_t_1) break;

      /* "cython_sampler.pyx":1036
 *             i = 0
 *             while i < self.neighbor_limit:
 *                 sample_id = samples[i]             # <<<<<<<<<<<<<<
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = sample_id
 */
      __pyx_v_sample_id = (__pyx_v_samples[__pyx_v_i]);

      /* "cython_sampler.pyx":1037
 *             while i < self.neighbor_limit:
 *                 sample_id = samples[i]
 *                 edges[edge_size+2*i] = node             # <<<<<<<<<<<<<<
 *                 edges[edge_size+2*i+1] = sample_id
 *                 n_depth.insert(sample_id)
 */
      (__pyx_v_edges[(__pyx_v_edge_size + (2 * __pyx_v_i))]) = __pyx_v_node;

      /* "cython_sampler.pyx":1038
 *                 sample_id = samples[i]
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = sample_id             # <<<<<<<<<<<<<<
 *                 n_depth.insert(sample_id)
 *                 sample_size += 1
 */
      (__pyx_v_edges[((__pyx_v_edge_size + (2 * __pyx_v_i)) + 1)]) = __pyx_v_sample_id;

      /* "cython_sampler.pyx":1039
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = sample_id
 *                 n_depth.insert(sample_id)             # <<<<<<<<<<<<<<
 *                 sample_size += 1
 *                 i += 1
 */
      (void)(__pyx_v_n_depth.insert(__pyx_v_sample_id));

      /* "cython_sampler.pyx":1040
 *                 edges[edge_size+2*i+1] = sample_id
 *                 n_depth.insert(sample_id)
 *                 sample_size += 1             # <<<<<<<<<<<<<<
 *                 i += 1
 *         return sample_size
 */
      __pyx_v_sample_size = (__pyx_v_sample_size + 1);

      /* "cython_sampler.pyx":1041
 *                 n_depth.insert(sample_id)
 *                 sample_size += 1
 *                 i += 1             # <<<<<<<<<<<<<<
 *         return sample_size
 * 
 */
      __pyx_v_i = (__pyx_v_i + 1);
    }
  }
  __pyx_L3:;

  /* "cython_sampler.pyx":1042
 *                 sample_size += 1
 *                 i += 1
 *         return sample_size             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_sample_size;
  goto __pyx_L0;

  /* "cython_sampler.pyx":1006
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef int sample_neighbors_v1(self, int node, vector[int]& edges,             # <<<<<<<<<<<<<<
 *                                  unordered_set[int]& n_depth) nogil:
 *         cdef int sample_size = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cython_sampler.BanditMPSampler.sample_neighbors_v1", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "cython_sampler.pyx":1047
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void sample_neighbors_v2(self, int node, vector[int]& edges) nogil:             # <<<<<<<<<<<<<<
 *         cdef int degree
 *         cdef int edge_size
 */

static void __pyx_f_14cython_sampler_15BanditMPSampler_sample_neighbors_v2(struct __pyx_obj_14cython_sampler_BanditMPSampler *__pyx_v_self, int __pyx_v_node, std::vector<int>  &__pyx_v_edges) {
  int __pyx_v_degree;
  int __pyx_v_edge_size;
  std::vector<int>  *__pyx_v_neighbors;
  std::vector<int> ::iterator __pyx_v_it;
  int __pyx_v_i;
  std::vector<int>  __pyx_v_samples;
  std::vector<double>  *__pyx_v_sample_probs;
  int __pyx_t_1;

  /* "cython_sampler.pyx":1050
 *         cdef int degree
 *         cdef int edge_size
 *         cdef vector[int]* neighbors = &self.adj[node]             # <<<<<<<<<<<<<<
 *         degree = self.degree[node]
 *         edge_size = edges.size()
 */
  __pyx_v_neighbors = (&(__pyx_v_self->__pyx_base.adj[__pyx_v_node]));

  /* "cython_sampler.pyx":1051
 *         cdef int edge_size
 *         cdef vector[int]* neighbors = &self.adj[node]
 *         degree = self.degree[node]             # <<<<<<<<<<<<<<
 *         edge_size = edges.size()
 *         cdef vector[int].iterator it
 */
  __pyx_v_degree = (__pyx_v_self->__pyx_base.degree[__pyx_v_node]);

  /* "cython_sampler.pyx":1052
 *         cdef vector[int]* neighbors = &self.adj[node]
 *         degree = self.degree[node]
 *         edge_size = edges.size()             # <<<<<<<<<<<<<<
 *         cdef vector[int].iterator it
 *         cdef int i
 */
  __pyx_v_edge_size = __pyx_v_edges.size();

  /* "cython_sampler.pyx":1057
 *         cdef vector[int] samples
 *         cdef vector[double] probs
 *         cdef vector[double]* sample_probs = &self.sample_probs[node]             # <<<<<<<<<<<<<<
 *         if degree <= self.neighbor_limit:
 *             edges.resize(edge_size + degree*2)
 */
  __pyx_v_sample_probs = (&(__pyx_v_self->__pyx_base.sample_probs[__pyx_v_node]));

  /* "cython_sampler.pyx":1058
 *         cdef vector[double] probs
 *         cdef vector[double]* sample_probs = &self.sample_probs[node]
 *         if degree <= self.neighbor_limit:             # <<<<<<<<<<<<<<
 *             edges.resize(edge_size + degree*2)
 *             i = 0
 */
  __pyx_t_1 = ((__pyx_v_degree <= __pyx_v_self->__pyx_base.neighbor_limit) != 0);
  if (__pyx_t_1) {

    /* "cython_sampler.pyx":1059
 *         cdef vector[double]* sample_probs = &self.sample_probs[node]
 *         if degree <= self.neighbor_limit:
 *             edges.resize(edge_size + degree*2)             # <<<<<<<<<<<<<<
 *             i = 0
 *             while i < degree:
 */
    try {
      __pyx_v_edges.resize((__pyx_v_edge_size + (__pyx_v_degree * 2)));
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 1059, __pyx_L1_error)
    }

    /* "cython_sampler.pyx":1060
 *         if degree <= self.neighbor_limit:
 *             edges.resize(edge_size + degree*2)
 *             i = 0             # <<<<<<<<<<<<<<
 *             while i < degree:
 *                 edges[edge_size+2*i] = node
 */
    __pyx_v_i = 0;

    /* "cython_sampler.pyx":1061
 *             edges.resize(edge_size + degree*2)
 *             i = 0
 *             while i < degree:             # <<<<<<<<<<<<<<
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_i < __pyx_v_degree) != 0);
      if (!__pyx_t_1) break;

      /* "cython_sampler.pyx":1062
 *             i = 0
 *             while i < degree:
 *                 edges[edge_size+2*i] = node             # <<<<<<<<<<<<<<
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]
 *                 inc(it)
 */
      (__pyx_v_edges[(__pyx_v_edge_size + (2 * __pyx_v_i))]) = __pyx_v_node;

      /* "cython_sampler.pyx":1063
 *             while i < degree:
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]             # <<<<<<<<<<<<<<
 *                 inc(it)
 *                 i += 1
 */
      (__pyx_v_edges[((__pyx_v_edge_size + (2 * __pyx_v_i)) + 1)]) = ((*__pyx_v_neighbors)[__pyx_v_i]);

      /* "cython_sampler.pyx":1064
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]
 *                 inc(it)             # <<<<<<<<<<<<<<
 *                 i += 1
 *         else:
 */
      (void)((++__pyx_v_it));

      /* "cython_sampler.pyx":1065
 *                 edges[edge_size+2*i+1] = deref(neighbors)[i]
 *                 inc(it)
 *                 i += 1             # <<<<<<<<<<<<<<
 *         else:
 *             edges.resize(edge_size + self.neighbor_limit*2)
 */
      __pyx_v_i = (__pyx_v_i + 1);
    }

    /* "cython_sampler.pyx":1058
 *         cdef vector[double] probs
 *         cdef vector[double]* sample_probs = &self.sample_probs[node]
 *         if degree <= self.neighbor_limit:             # <<<<<<<<<<<<<<
 *             edges.resize(edge_size + degree*2)
 *             i = 0
 */
    goto __pyx_L3;
  }

  /* "cython_sampler.pyx":1067
 *                 i += 1
 *         else:
 *             edges.resize(edge_size + self.neighbor_limit*2)             # <<<<<<<<<<<<<<
 *             samples = random_choice(deref(neighbors), deref(sample_probs), self.neighbor_limit)
 * 
 */
  /*else*/ {
    try {
      __pyx_v_edges.resize((__pyx_v_edge_size + (__pyx_v_self->__pyx_base.neighbor_limit * 2)));
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 1067, __pyx_L1_error)
    }

    /* "cython_sampler.pyx":1068
 *         else:
 *             edges.resize(edge_size + self.neighbor_limit*2)
 *             samples = random_choice(deref(neighbors), deref(sample_probs), self.neighbor_limit)             # <<<<<<<<<<<<<<
 * 
 *             i = 0
 */
    __pyx_v_samples = __pyx_f_14cython_sampler_random_choice((*__pyx_v_neighbors), (*__pyx_v_sample_probs), __pyx_v_self->__pyx_base.neighbor_limit);

    /* "cython_sampler.pyx":1070
 *             samples = random_choice(deref(neighbors), deref(sample_probs), self.neighbor_limit)
 * 
 *             i = 0             # <<<<<<<<<<<<<<
 *             while i < self.neighbor_limit:
 *                 edges[edge_size+2*i] = node
 */
    __pyx_v_i = 0;

    /* "cython_sampler.pyx":1071
 * 
 *             i = 0
 *             while i < self.neighbor_limit:             # <<<<<<<<<<<<<<
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = samples[i]
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_i < __pyx_v_self->__pyx_base.neighbor_limit) != 0);
      if (!__pyx_t_1) break;

      /* "cython_sampler.pyx":1072
 *             i = 0
 *             while i < self.neighbor_limit:
 *                 edges[edge_size+2*i] = node             # <<<<<<<<<<<<<<
 *                 edges[edge_size+2*i+1] = samples[i]
 *                 i += 1
 */
      (__pyx_v_edges[(__pyx_v_edge_size + (2 * __pyx_v_i))]) = __pyx_v_node;

      /* "cython_sampler.pyx":1073
 *             while i < self.neighbor_limit:
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = samples[i]             # <<<<<<<<<<<<<<
 *                 i += 1
 * 
 */
      (__pyx_v_edges[((__pyx_v_edge_size + (2 * __pyx_v_i)) + 1)]) = (__pyx_v_samples[__pyx_v_i]);

      /* "cython_sampler.pyx":1074
 *                 edges[edge_size+2*i] = node
 *                 edges[edge_size+2*i+1] = samples[i]
 *                 i += 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_i = (__pyx_v_i + 1);
    }
  }
  __pyx_L3:;

  /* "cython_sampler.pyx":1047
 *     @cython.wraparound(False)
 *     @cython.boundscheck(False)
 *     cdef void sample_neighbors_v2(self, int node, vector[int]& edges) nogil:             # <<<<<<<<<<<<<<
 *         cdef int degree
 *         cdef int edge_size
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cython_sampler.BanditMPSampler.sample_neighbors_v2", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_L0:;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14cython_sampler_15BanditMPSampler_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14cython_sampler_15BanditMPSampler_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14cython_sampler_15BanditMPSampler_6__reduce_cython__(((struct __pyx_obj_14cython_sampler_BanditMPSampler *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14cython_sampler_15BanditMPSampler_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14cython_sampler_BanditMPSampler *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cython_sampler.BanditMPSampler.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14cython_sampler_15BanditMPSampler_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14cython_sampler_15BanditMPSampler_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14cython_sampler_15BanditMPSampler_8__setstate_cython__(((struct __pyx_obj_14cython_sampler_BanditMPSampler *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14cython_sampler_15BanditMPSampler_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14cython_sampler_BanditMPSampler *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cython_sampler.BanditMPSampler.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython_sampler.pyx":1091
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * cdef vector[int] random_choice(             # <<<<<<<<<<<<<<
 *         vector[int]& ids, vector[double]& input_probs, int sample_size) nogil:
 *     cdef vector[int] samples = vector[int](sample_size)
 */

static std::vector<int>  __pyx_f_14cython_sampler_random_choice(std::vector<int>  &__pyx_v_ids, std::vector<double>  &__pyx_v_input_probs, int __pyx_v_sample_size) {
  std::vector<int>  __pyx_v_samples;
  int __pyx_v_n;
  std::vector<double>  __pyx_v_p;
  int __pyx_v_i;
  std::vector<int>  __pyx_v_found;
  std::vector<double>  __pyx_v_x;
  std::vector<double>  __pyx_v_cdf;
  std::vector<int>  __pyx_v_new;
  std::vector<int>  __pyx_v_indices;
  int __pyx_v_n_uniq;
  int __pyx_v_n_indices;
  std::vector<int>  __pyx_r;
  std::vector<int>  __pyx_t_1;
  std::vector<double>  __pyx_t_2;
  int __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5;

  /* "cython_sampler.pyx":1093
 * cdef vector[int] random_choice(
 *         vector[int]& ids, vector[double]& input_probs, int sample_size) nogil:
 *     cdef vector[int] samples = vector[int](sample_size)             # <<<<<<<<<<<<<<
 * 
 *     cdef int n = ids.size()
 */
  try {
    __pyx_t_1 = std::vector<int> (__pyx_v_sample_size);
  } catch(...) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_CppExn2PyErr();
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(0, 1093, __pyx_L1_error)
  }
  __pyx_v_samples = __pyx_t_1;

  /* "cython_sampler.pyx":1095
 *     cdef vector[int] samples = vector[int](sample_size)
 * 
 *     cdef int n = ids.size()             # <<<<<<<<<<<<<<
 *     cdef vector[double] p = vector[double](n)
 *     p.insert(p.begin(), input_probs.begin(), input_probs.end())
 */
  __pyx_v_n = __pyx_v_ids.size();

  /* "cython_sampler.pyx":1096
 * 
 *     cdef int n = ids.size()
 *     cdef vector[double] p = vector[double](n)             # <<<<<<<<<<<<<<
 *     p.insert(p.begin(), input_probs.begin(), input_probs.end())
 * 
 */
  try {
    __pyx_t_2 = std::vector<double> (__pyx_v_n);
  } catch(...) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_CppExn2PyErr();
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(0, 1096, __pyx_L1_error)
  }
  __pyx_v_p = __pyx_t_2;

  /* "cython_sampler.pyx":1097
 *     cdef int n = ids.size()
 *     cdef vector[double] p = vector[double](n)
 *     p.insert(p.begin(), input_probs.begin(), input_probs.end())             # <<<<<<<<<<<<<<
 * 
 *     cdef int i = 0
 */
  try {
    __pyx_v_p.insert(__pyx_v_p.begin(), __pyx_v_input_probs.begin(), __pyx_v_input_probs.end());
  } catch(...) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_CppExn2PyErr();
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(0, 1097, __pyx_L1_error)
  }

  /* "cython_sampler.pyx":1099
 *     p.insert(p.begin(), input_probs.begin(), input_probs.end())
 * 
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     cdef vector[int] found = vector[int](sample_size)
 *     cdef vector[double] x
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":1100
 * 
 *     cdef int i = 0
 *     cdef vector[int] found = vector[int](sample_size)             # <<<<<<<<<<<<<<
 *     cdef vector[double] x
 *     cdef vector[double] cdf
 */
  try {
    __pyx_t_1 = std::vector<int> (__pyx_v_sample_size);
  } catch(...) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_CppExn2PyErr();
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(0, 1100, __pyx_L1_error)
  }
  __pyx_v_found = __pyx_t_1;

  /* "cython_sampler.pyx":1105
 *     cdef vector[int] new
 *     cdef vector[int] indices
 *     cdef int n_uniq = 0             # <<<<<<<<<<<<<<
 *     cdef int n_indices
 *     while n_uniq < sample_size:
 */
  __pyx_v_n_uniq = 0;

  /* "cython_sampler.pyx":1107
 *     cdef int n_uniq = 0
 *     cdef int n_indices
 *     while n_uniq < sample_size:             # <<<<<<<<<<<<<<
 *         # random initial x
 *         x.clear()
 */
  while (1) {
    __pyx_t_3 = ((__pyx_v_n_uniq < __pyx_v_sample_size) != 0);
    if (!__pyx_t_3) break;

    /* "cython_sampler.pyx":1109
 *     while n_uniq < sample_size:
 *         # random initial x
 *         x.clear()             # <<<<<<<<<<<<<<
 *         x.resize(sample_size - n_uniq)
 *         i = 0
 */
    __pyx_v_x.clear();

    /* "cython_sampler.pyx":1110
 *         # random initial x
 *         x.clear()
 *         x.resize(sample_size - n_uniq)             # <<<<<<<<<<<<<<
 *         i = 0
 *         while i < sample_size - n_uniq:
 */
    try {
      __pyx_v_x.resize((__pyx_v_sample_size - __pyx_v_n_uniq));
    } catch(...) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      __Pyx_CppExn2PyErr();
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 1110, __pyx_L1_error)
    }

    /* "cython_sampler.pyx":1111
 *         x.clear()
 *         x.resize(sample_size - n_uniq)
 *         i = 0             # <<<<<<<<<<<<<<
 *         while i < sample_size - n_uniq:
 *             x[i] = (<double> rand()) / RAND_MAX
 */
    __pyx_v_i = 0;

    /* "cython_sampler.pyx":1112
 *         x.resize(sample_size - n_uniq)
 *         i = 0
 *         while i < sample_size - n_uniq:             # <<<<<<<<<<<<<<
 *             x[i] = (<double> rand()) / RAND_MAX
 *             i += 1
 */
    while (1) {
      __pyx_t_3 = ((__pyx_v_i < (__pyx_v_sample_size - __pyx_v_n_uniq)) != 0);
      if (!__pyx_t_3) break;

      /* "cython_sampler.pyx":1113
 *         i = 0
 *         while i < sample_size - n_uniq:
 *             x[i] = (<double> rand()) / RAND_MAX             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
      __pyx_t_4 = ((double)rand());
      if (unlikely(RAND_MAX == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 1113, __pyx_L1_error)
      }
      (__pyx_v_x[__pyx_v_i]) = (__pyx_t_4 / ((double)RAND_MAX));

      /* "cython_sampler.pyx":1114
 *         while i < sample_size - n_uniq:
 *             x[i] = (<double> rand()) / RAND_MAX
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 *         # update probs
 */
      __pyx_v_i = (__pyx_v_i + 1);
    }

    /* "cython_sampler.pyx":1117
 * 
 *         # update probs
 *         if n_uniq > 0:             # <<<<<<<<<<<<<<
 *             i = 0
 *             while i < sample_size:
 */
    __pyx_t_3 = ((__pyx_v_n_uniq > 0) != 0);
    if (__pyx_t_3) {

      /* "cython_sampler.pyx":1118
 *         # update probs
 *         if n_uniq > 0:
 *             i = 0             # <<<<<<<<<<<<<<
 *             while i < sample_size:
 *                 p[found[i]] = 0.
 */
      __pyx_v_i = 0;

      /* "cython_sampler.pyx":1119
 *         if n_uniq > 0:
 *             i = 0
 *             while i < sample_size:             # <<<<<<<<<<<<<<
 *                 p[found[i]] = 0.
 *                 i += 1
 */
      while (1) {
        __pyx_t_3 = ((__pyx_v_i < __pyx_v_sample_size) != 0);
        if (!__pyx_t_3) break;

        /* "cython_sampler.pyx":1120
 *             i = 0
 *             while i < sample_size:
 *                 p[found[i]] = 0.             # <<<<<<<<<<<<<<
 *                 i += 1
 * 
 */
        (__pyx_v_p[(__pyx_v_found[__pyx_v_i])]) = 0.;

        /* "cython_sampler.pyx":1121
 *             while i < sample_size:
 *                 p[found[i]] = 0.
 *                 i += 1             # <<<<<<<<<<<<<<
 * 
 *         # compute cdf
 */
        __pyx_v_i = (__pyx_v_i + 1);
      }

      /* "cython_sampler.pyx":1117
 * 
 *         # update probs
 *         if n_uniq > 0:             # <<<<<<<<<<<<<<
 *             i = 0
 *             while i < sample_size:
 */
    }

    /* "cython_sampler.pyx":1124
 * 
 *         # compute cdf
 *         cdf = cumsum(p)             # <<<<<<<<<<<<<<
 *         i = 0
 *         while i < n:
 */
    __pyx_v_cdf = __pyx_f_14cython_sampler_cumsum(__pyx_v_p);

    /* "cython_sampler.pyx":1125
 *         # compute cdf
 *         cdf = cumsum(p)
 *         i = 0             # <<<<<<<<<<<<<<
 *         while i < n:
 *             cdf[i] = cdf[i] / cdf[n-1]
 */
    __pyx_v_i = 0;

    /* "cython_sampler.pyx":1126
 *         cdf = cumsum(p)
 *         i = 0
 *         while i < n:             # <<<<<<<<<<<<<<
 *             cdf[i] = cdf[i] / cdf[n-1]
 *             i += 1
 */
    while (1) {
      __pyx_t_3 = ((__pyx_v_i < __pyx_v_n) != 0);
      if (!__pyx_t_3) break;

      /* "cython_sampler.pyx":1127
 *         i = 0
 *         while i < n:
 *             cdf[i] = cdf[i] / cdf[n-1]             # <<<<<<<<<<<<<<
 *             i += 1
 * 
 */
      __pyx_t_4 = (__pyx_v_cdf[__pyx_v_i]);
      __pyx_t_5 = (__pyx_v_cdf[(__pyx_v_n - 1)]);
      if (unlikely(__pyx_t_5 == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 1127, __pyx_L1_error)
      }
      (__pyx_v_cdf[__pyx_v_i]) = (__pyx_t_4 / __pyx_t_5);

      /* "cython_sampler.pyx":1128
 *         while i < n:
 *             cdf[i] = cdf[i] / cdf[n-1]
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 *         # search sorted
 */
      __pyx_v_i = (__pyx_v_i + 1);
    }

    /* "cython_sampler.pyx":1131
 * 
 *         # search sorted
 *         new = searchsorted(cdf, x)             # <<<<<<<<<<<<<<
 *         indices = unique_index(new)
 * 
 */
    __pyx_v_new = __pyx_f_14cython_sampler_searchsorted(__pyx_v_cdf, __pyx_v_x);

    /* "cython_sampler.pyx":1132
 *         # search sorted
 *         new = searchsorted(cdf, x)
 *         indices = unique_index(new)             # <<<<<<<<<<<<<<
 * 
 *         # update found
 */
    __pyx_v_indices = __pyx_f_14cython_sampler_unique_index(__pyx_v_new);

    /* "cython_sampler.pyx":1135
 * 
 *         # update found
 *         i = 0             # <<<<<<<<<<<<<<
 *         n_indices = indices.size()
 *         while i < n_indices:
 */
    __pyx_v_i = 0;

    /* "cython_sampler.pyx":1136
 *         # update found
 *         i = 0
 *         n_indices = indices.size()             # <<<<<<<<<<<<<<
 *         while i < n_indices:
 *             found[n_uniq+i] = new[indices[i]]
 */
    __pyx_v_n_indices = __pyx_v_indices.size();

    /* "cython_sampler.pyx":1137
 *         i = 0
 *         n_indices = indices.size()
 *         while i < n_indices:             # <<<<<<<<<<<<<<
 *             found[n_uniq+i] = new[indices[i]]
 *             i += 1
 */
    while (1) {
      __pyx_t_3 = ((__pyx_v_i < __pyx_v_n_indices) != 0);
      if (!__pyx_t_3) break;

      /* "cython_sampler.pyx":1138
 *         n_indices = indices.size()
 *         while i < n_indices:
 *             found[n_uniq+i] = new[indices[i]]             # <<<<<<<<<<<<<<
 *             i += 1
 *         n_uniq += n_indices
 */
      (__pyx_v_found[(__pyx_v_n_uniq + __pyx_v_i)]) = (__pyx_v_new[(__pyx_v_indices[__pyx_v_i])]);

      /* "cython_sampler.pyx":1139
 *         while i < n_indices:
 *             found[n_uniq+i] = new[indices[i]]
 *             i += 1             # <<<<<<<<<<<<<<
 *         n_uniq += n_indices
 * 
 */
      __pyx_v_i = (__pyx_v_i + 1);
    }

    /* "cython_sampler.pyx":1140
 *             found[n_uniq+i] = new[indices[i]]
 *             i += 1
 *         n_uniq += n_indices             # <<<<<<<<<<<<<<
 * 
 *     # generate samples
 */
    __pyx_v_n_uniq = (__pyx_v_n_uniq + __pyx_v_n_indices);
  }

  /* "cython_sampler.pyx":1143
 * 
 *     # generate samples
 *     i = 0             # <<<<<<<<<<<<<<
 *     while i < sample_size:
 *         samples[i] = ids[found[i]]
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":1144
 *     # generate samples
 *     i = 0
 *     while i < sample_size:             # <<<<<<<<<<<<<<
 *         samples[i] = ids[found[i]]
 *         i += 1
 */
  while (1) {
    __pyx_t_3 = ((__pyx_v_i < __pyx_v_sample_size) != 0);
    if (!__pyx_t_3) break;

    /* "cython_sampler.pyx":1145
 *     i = 0
 *     while i < sample_size:
 *         samples[i] = ids[found[i]]             # <<<<<<<<<<<<<<
 *         i += 1
 *     return samples
 */
    (__pyx_v_samples[__pyx_v_i]) = (__pyx_v_ids[(__pyx_v_found[__pyx_v_i])]);

    /* "cython_sampler.pyx":1146
 *     while i < sample_size:
 *         samples[i] = ids[found[i]]
 *         i += 1             # <<<<<<<<<<<<<<
 *     return samples
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cython_sampler.pyx":1147
 *         samples[i] = ids[found[i]]
 *         i += 1
 *     return samples             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_samples;
  goto __pyx_L0;

  /* "cython_sampler.pyx":1091
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * cdef vector[int] random_choice(             # <<<<<<<<<<<<<<
 *         vector[int]& ids, vector[double]& input_probs, int sample_size) nogil:
 *     cdef vector[int] samples = vector[int](sample_size)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cython_sampler.random_choice", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  return __pyx_r;
}

/* "cython_sampler.pyx":1152
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * cdef double sum_double(vector[double]& x) nogil:             # <<<<<<<<<<<<<<
 *     cdef double val = 0.
 *     cdef int i = 0
 */

static double __pyx_f_14cython_sampler_sum_double(std::vector<double>  &__pyx_v_x) {
  double __pyx_v_val;
  int __pyx_v_i;
  int __pyx_v_n;
  double __pyx_r;
  int __pyx_t_1;

  /* "cython_sampler.pyx":1153
 * @cython.boundscheck(False)
 * cdef double sum_double(vector[double]& x) nogil:
 *     cdef double val = 0.             # <<<<<<<<<<<<<<
 *     cdef int i = 0
 *     cdef int n = x.size()
 */
  __pyx_v_val = 0.;

  /* "cython_sampler.pyx":1154
 * cdef double sum_double(vector[double]& x) nogil:
 *     cdef double val = 0.
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     cdef int n = x.size()
 *     while i < n:
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":1155
 *     cdef double val = 0.
 *     cdef int i = 0
 *     cdef int n = x.size()             # <<<<<<<<<<<<<<
 *     while i < n:
 *         val += x[i]
 */
  __pyx_v_n = __pyx_v_x.size();

  /* "cython_sampler.pyx":1156
 *     cdef int i = 0
 *     cdef int n = x.size()
 *     while i < n:             # <<<<<<<<<<<<<<
 *         val += x[i]
 *         i += 1
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_i < __pyx_v_n) != 0);
    if (!__pyx_t_1) break;

    /* "cython_sampler.pyx":1157
 *     cdef int n = x.size()
 *     while i < n:
 *         val += x[i]             # <<<<<<<<<<<<<<
 *         i += 1
 *     return val
 */
    __pyx_v_val = (__pyx_v_val + (__pyx_v_x[__pyx_v_i]));

    /* "cython_sampler.pyx":1158
 *     while i < n:
 *         val += x[i]
 *         i += 1             # <<<<<<<<<<<<<<
 *     return val
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cython_sampler.pyx":1159
 *         val += x[i]
 *         i += 1
 *     return val             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_val;
  goto __pyx_L0;

  /* "cython_sampler.pyx":1152
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * cdef double sum_double(vector[double]& x) nogil:             # <<<<<<<<<<<<<<
 *     cdef double val = 0.
 *     cdef int i = 0
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "cython_sampler.pyx":1237
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * cdef vector[double] cumsum(vector[double]& probs) nogil:             # <<<<<<<<<<<<<<
 *     cdef int n = probs.size()
 *     cdef vector[double] results = vector[double](n)
 */

static std::vector<double>  __pyx_f_14cython_sampler_cumsum(std::vector<double>  &__pyx_v_probs) {
  int __pyx_v_n;
  std::vector<double>  __pyx_v_results;
  int __pyx_v_i;
  std::vector<double>  __pyx_r;
  std::vector<double>  __pyx_t_1;
  int __pyx_t_2;

  /* "cython_sampler.pyx":1238
 * @cython.boundscheck(False)
 * cdef vector[double] cumsum(vector[double]& probs) nogil:
 *     cdef int n = probs.size()             # <<<<<<<<<<<<<<
 *     cdef vector[double] results = vector[double](n)
 *     results[0] = probs[0]
 */
  __pyx_v_n = __pyx_v_probs.size();

  /* "cython_sampler.pyx":1239
 * cdef vector[double] cumsum(vector[double]& probs) nogil:
 *     cdef int n = probs.size()
 *     cdef vector[double] results = vector[double](n)             # <<<<<<<<<<<<<<
 *     results[0] = probs[0]
 *     cdef int i = 1
 */
  try {
    __pyx_t_1 = std::vector<double> (__pyx_v_n);
  } catch(...) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_CppExn2PyErr();
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(0, 1239, __pyx_L1_error)
  }
  __pyx_v_results = __pyx_t_1;

  /* "cython_sampler.pyx":1240
 *     cdef int n = probs.size()
 *     cdef vector[double] results = vector[double](n)
 *     results[0] = probs[0]             # <<<<<<<<<<<<<<
 *     cdef int i = 1
 *     while i < n:
 */
  (__pyx_v_results[0]) = (__pyx_v_probs[0]);

  /* "cython_sampler.pyx":1241
 *     cdef vector[double] results = vector[double](n)
 *     results[0] = probs[0]
 *     cdef int i = 1             # <<<<<<<<<<<<<<
 *     while i < n:
 *         results[i] = probs[i] + results[i-1]
 */
  __pyx_v_i = 1;

  /* "cython_sampler.pyx":1242
 *     results[0] = probs[0]
 *     cdef int i = 1
 *     while i < n:             # <<<<<<<<<<<<<<
 *         results[i] = probs[i] + results[i-1]
 *         i += 1
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_i < __pyx_v_n) != 0);
    if (!__pyx_t_2) break;

    /* "cython_sampler.pyx":1243
 *     cdef int i = 1
 *     while i < n:
 *         results[i] = probs[i] + results[i-1]             # <<<<<<<<<<<<<<
 *         i += 1
 *     return results
 */
    (__pyx_v_results[__pyx_v_i]) = ((__pyx_v_probs[__pyx_v_i]) + (__pyx_v_results[(__pyx_v_i - 1)]));

    /* "cython_sampler.pyx":1244
 *     while i < n:
 *         results[i] = probs[i] + results[i-1]
 *         i += 1             # <<<<<<<<<<<<<<
 *     return results
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cython_sampler.pyx":1245
 *         results[i] = probs[i] + results[i-1]
 *         i += 1
 *     return results             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_results;
  goto __pyx_L0;

  /* "cython_sampler.pyx":1237
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * cdef vector[double] cumsum(vector[double]& probs) nogil:             # <<<<<<<<<<<<<<
 *     cdef int n = probs.size()
 *     cdef vector[double] results = vector[double](n)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cython_sampler.cumsum", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  return __pyx_r;
}

/* "cython_sampler.pyx":1250
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * cdef int searchsorted_one(vector[double]& cdf, double x) nogil:             # <<<<<<<<<<<<<<
 *     cdef int n = cdf.size()
 *     cdef int i = 0
 */

static int __pyx_f_14cython_sampler_searchsorted_one(std::vector<double>  &__pyx_v_cdf, double __pyx_v_x) {
  int __pyx_v_n;
  int __pyx_v_i;
  int __pyx_r;
  int __pyx_t_1;

  /* "cython_sampler.pyx":1251
 * @cython.boundscheck(False)
 * cdef int searchsorted_one(vector[double]& cdf, double x) nogil:
 *     cdef int n = cdf.size()             # <<<<<<<<<<<<<<
 *     cdef int i = 0
 *     while i < n:
 */
  __pyx_v_n = __pyx_v_cdf.size();

  /* "cython_sampler.pyx":1252
 * cdef int searchsorted_one(vector[double]& cdf, double x) nogil:
 *     cdef int n = cdf.size()
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     while i < n:
 *         if x < cdf[i]:
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":1253
 *     cdef int n = cdf.size()
 *     cdef int i = 0
 *     while i < n:             # <<<<<<<<<<<<<<
 *         if x < cdf[i]:
 *             break
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_i < __pyx_v_n) != 0);
    if (!__pyx_t_1) break;

    /* "cython_sampler.pyx":1254
 *     cdef int i = 0
 *     while i < n:
 *         if x < cdf[i]:             # <<<<<<<<<<<<<<
 *             break
 *         i += 1
 */
    __pyx_t_1 = ((__pyx_v_x < (__pyx_v_cdf[__pyx_v_i])) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":1255
 *     while i < n:
 *         if x < cdf[i]:
 *             break             # <<<<<<<<<<<<<<
 *         i += 1
 *     return i
 */
      goto __pyx_L4_break;

      /* "cython_sampler.pyx":1254
 *     cdef int i = 0
 *     while i < n:
 *         if x < cdf[i]:             # <<<<<<<<<<<<<<
 *             break
 *         i += 1
 */
    }

    /* "cython_sampler.pyx":1256
 *         if x < cdf[i]:
 *             break
 *         i += 1             # <<<<<<<<<<<<<<
 *     return i
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }
  __pyx_L4_break:;

  /* "cython_sampler.pyx":1257
 *             break
 *         i += 1
 *     return i             # <<<<<<<<<<<<<<
 * 
 * @cython.wraparound(False)
 */
  __pyx_r = __pyx_v_i;
  goto __pyx_L0;

  /* "cython_sampler.pyx":1250
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * cdef int searchsorted_one(vector[double]& cdf, double x) nogil:             # <<<<<<<<<<<<<<
 *     cdef int n = cdf.size()
 *     cdef int i = 0
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "cython_sampler.pyx":1261
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * cdef vector[int] searchsorted(vector[double]& cdf, vector[double]& x) nogil:             # <<<<<<<<<<<<<<
 *     cdef int n = x.size()
 *     cdef int i = 0
 */

static std::vector<int>  __pyx_f_14cython_sampler_searchsorted(std::vector<double>  &__pyx_v_cdf, std::vector<double>  &__pyx_v_x) {
  int __pyx_v_n;
  int __pyx_v_i;
  std::vector<int>  __pyx_v_results;
  std::vector<int>  __pyx_r;
  std::vector<int>  __pyx_t_1;
  int __pyx_t_2;

  /* "cython_sampler.pyx":1262
 * @cython.boundscheck(False)
 * cdef vector[int] searchsorted(vector[double]& cdf, vector[double]& x) nogil:
 *     cdef int n = x.size()             # <<<<<<<<<<<<<<
 *     cdef int i = 0
 *     cdef vector[int] results = vector[int](n)
 */
  __pyx_v_n = __pyx_v_x.size();

  /* "cython_sampler.pyx":1263
 * cdef vector[int] searchsorted(vector[double]& cdf, vector[double]& x) nogil:
 *     cdef int n = x.size()
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     cdef vector[int] results = vector[int](n)
 *     while i < n:
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":1264
 *     cdef int n = x.size()
 *     cdef int i = 0
 *     cdef vector[int] results = vector[int](n)             # <<<<<<<<<<<<<<
 *     while i < n:
 *         results[i] = searchsorted_one(cdf, x[i])
 */
  try {
    __pyx_t_1 = std::vector<int> (__pyx_v_n);
  } catch(...) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_CppExn2PyErr();
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(0, 1264, __pyx_L1_error)
  }
  __pyx_v_results = __pyx_t_1;

  /* "cython_sampler.pyx":1265
 *     cdef int i = 0
 *     cdef vector[int] results = vector[int](n)
 *     while i < n:             # <<<<<<<<<<<<<<
 *         results[i] = searchsorted_one(cdf, x[i])
 *         i += 1
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_i < __pyx_v_n) != 0);
    if (!__pyx_t_2) break;

    /* "cython_sampler.pyx":1266
 *     cdef vector[int] results = vector[int](n)
 *     while i < n:
 *         results[i] = searchsorted_one(cdf, x[i])             # <<<<<<<<<<<<<<
 *         i += 1
 *     return results
 */
    (__pyx_v_results[__pyx_v_i]) = __pyx_f_14cython_sampler_searchsorted_one(__pyx_v_cdf, (__pyx_v_x[__pyx_v_i]));

    /* "cython_sampler.pyx":1267
 *     while i < n:
 *         results[i] = searchsorted_one(cdf, x[i])
 *         i += 1             # <<<<<<<<<<<<<<
 *     return results
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cython_sampler.pyx":1268
 *         results[i] = searchsorted_one(cdf, x[i])
 *         i += 1
 *     return results             # <<<<<<<<<<<<<<
 * 
 * @cython.wraparound(False)
 */
  __pyx_r = __pyx_v_results;
  goto __pyx_L0;

  /* "cython_sampler.pyx":1261
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * cdef vector[int] searchsorted(vector[double]& cdf, vector[double]& x) nogil:             # <<<<<<<<<<<<<<
 *     cdef int n = x.size()
 *     cdef int i = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cython_sampler.searchsorted", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  return __pyx_r;
}

/* "cython_sampler.pyx":1272
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * cdef vector[int] unique_index(vector[int]& new) nogil:             # <<<<<<<<<<<<<<
 *     cdef unordered_set[int] new_set
 *     cdef int i = 0
 */

static std::vector<int>  __pyx_f_14cython_sampler_unique_index(std::vector<int>  &__pyx_v_new) {
  std::unordered_set<int>  __pyx_v_new_set;
  int __pyx_v_i;
  int __pyx_v_n_new;
  int __pyx_v_n;
  std::vector<int>  __pyx_v_results;
  std::vector<int> ::iterator __pyx_v_found;
  std::unordered_set<int> ::iterator __pyx_v_it;
  std::vector<int>  __pyx_r;
  int __pyx_t_1;
  std::vector<int>  __pyx_t_2;

  /* "cython_sampler.pyx":1274
 * cdef vector[int] unique_index(vector[int]& new) nogil:
 *     cdef unordered_set[int] new_set
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     cdef int n_new = new.size()
 *     while i < n_new:
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":1275
 *     cdef unordered_set[int] new_set
 *     cdef int i = 0
 *     cdef int n_new = new.size()             # <<<<<<<<<<<<<<
 *     while i < n_new:
 *         new_set.insert(new[i])
 */
  __pyx_v_n_new = __pyx_v_new.size();

  /* "cython_sampler.pyx":1276
 *     cdef int i = 0
 *     cdef int n_new = new.size()
 *     while i < n_new:             # <<<<<<<<<<<<<<
 *         new_set.insert(new[i])
 *         i += 1
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_i < __pyx_v_n_new) != 0);
    if (!__pyx_t_1) break;

    /* "cython_sampler.pyx":1277
 *     cdef int n_new = new.size()
 *     while i < n_new:
 *         new_set.insert(new[i])             # <<<<<<<<<<<<<<
 *         i += 1
 * 
 */
    (void)(__pyx_v_new_set.insert((__pyx_v_new[__pyx_v_i])));

    /* "cython_sampler.pyx":1278
 *     while i < n_new:
 *         new_set.insert(new[i])
 *         i += 1             # <<<<<<<<<<<<<<
 * 
 *     cdef int n = new_set.size()
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cython_sampler.pyx":1280
 *         i += 1
 * 
 *     cdef int n = new_set.size()             # <<<<<<<<<<<<<<
 *     cdef vector[int] results = vector[int](n)
 *     cdef vector[int].iterator found
 */
  __pyx_v_n = __pyx_v_new_set.size();

  /* "cython_sampler.pyx":1281
 * 
 *     cdef int n = new_set.size()
 *     cdef vector[int] results = vector[int](n)             # <<<<<<<<<<<<<<
 *     cdef vector[int].iterator found
 *     cdef unordered_set[int].iterator it = new_set.begin()
 */
  try {
    __pyx_t_2 = std::vector<int> (__pyx_v_n);
  } catch(...) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_CppExn2PyErr();
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(0, 1281, __pyx_L1_error)
  }
  __pyx_v_results = __pyx_t_2;

  /* "cython_sampler.pyx":1283
 *     cdef vector[int] results = vector[int](n)
 *     cdef vector[int].iterator found
 *     cdef unordered_set[int].iterator it = new_set.begin()             # <<<<<<<<<<<<<<
 *     i = 0
 *     while it != new_set.end():
 */
  __pyx_v_it = __pyx_v_new_set.begin();

  /* "cython_sampler.pyx":1284
 *     cdef vector[int].iterator found
 *     cdef unordered_set[int].iterator it = new_set.begin()
 *     i = 0             # <<<<<<<<<<<<<<
 *     while it != new_set.end():
 *         found = find[vector[int].iterator, int](new.begin(), new.end(), deref(it))
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":1285
 *     cdef unordered_set[int].iterator it = new_set.begin()
 *     i = 0
 *     while it != new_set.end():             # <<<<<<<<<<<<<<
 *         found = find[vector[int].iterator, int](new.begin(), new.end(), deref(it))
 *         results[i] = found - new.begin()
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it != __pyx_v_new_set.end()) != 0);
    if (!__pyx_t_1) break;

    /* "cython_sampler.pyx":1286
 *     i = 0
 *     while it != new_set.end():
 *         found = find[vector[int].iterator, int](new.begin(), new.end(), deref(it))             # <<<<<<<<<<<<<<
 *         results[i] = found - new.begin()
 *         inc(it)
 */
    __pyx_v_found = std::find<std::vector<int> ::iterator,int>(__pyx_v_new.begin(), __pyx_v_new.end(), (*__pyx_v_it));

    /* "cython_sampler.pyx":1287
 *     while it != new_set.end():
 *         found = find[vector[int].iterator, int](new.begin(), new.end(), deref(it))
 *         results[i] = found - new.begin()             # <<<<<<<<<<<<<<
 *         inc(it)
 *         i += 1
 */
    (__pyx_v_results[__pyx_v_i]) = (__pyx_v_found - __pyx_v_new.begin());

    /* "cython_sampler.pyx":1288
 *         found = find[vector[int].iterator, int](new.begin(), new.end(), deref(it))
 *         results[i] = found - new.begin()
 *         inc(it)             # <<<<<<<<<<<<<<
 *         i += 1
 *     sort(results.begin(), results.end())
 */
    (void)((++__pyx_v_it));

    /* "cython_sampler.pyx":1289
 *         results[i] = found - new.begin()
 *         inc(it)
 *         i += 1             # <<<<<<<<<<<<<<
 *     sort(results.begin(), results.end())
 *     return results
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cython_sampler.pyx":1290
 *         inc(it)
 *         i += 1
 *     sort(results.begin(), results.end())             # <<<<<<<<<<<<<<
 *     return results
 * 
 */
  std::sort<std::vector<int> ::iterator>(__pyx_v_results.begin(), __pyx_v_results.end());

  /* "cython_sampler.pyx":1291
 *         i += 1
 *     sort(results.begin(), results.end())
 *     return results             # <<<<<<<<<<<<<<
 * 
 * @cython.wraparound(False)
 */
  __pyx_r = __pyx_v_results;
  goto __pyx_L0;

  /* "cython_sampler.pyx":1272
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * cdef vector[int] unique_index(vector[int]& new) nogil:             # <<<<<<<<<<<<<<
 *     cdef unordered_set[int] new_set
 *     cdef int i = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cython_sampler.unique_index", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  return __pyx_r;
}

/* "cython_sampler.pyx":1295
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * cdef bool vec_find(vector[int]& vec, int x) nogil:             # <<<<<<<<<<<<<<
 *     cdef vector[int].iterator found
 *     found = find[vector[int].iterator, int](vec.begin(), vec.end(), x)
 */

static bool __pyx_f_14cython_sampler_vec_find(std::vector<int>  &__pyx_v_vec, int __pyx_v_x) {
  std::vector<int> ::iterator __pyx_v_found;
  bool __pyx_r;

  /* "cython_sampler.pyx":1297
 * cdef bool vec_find(vector[int]& vec, int x) nogil:
 *     cdef vector[int].iterator found
 *     found = find[vector[int].iterator, int](vec.begin(), vec.end(), x)             # <<<<<<<<<<<<<<
 *     return found != vec.end()
 * 
 */
  __pyx_v_found = std::find<std::vector<int> ::iterator,int>(__pyx_v_vec.begin(), __pyx_v_vec.end(), __pyx_v_x);

  /* "cython_sampler.pyx":1298
 *     cdef vector[int].iterator found
 *     found = find[vector[int].iterator, int](vec.begin(), vec.end(), x)
 *     return found != vec.end()             # <<<<<<<<<<<<<<
 * 
 * @cython.wraparound(False)
 */
  __pyx_r = (__pyx_v_found != __pyx_v_vec.end());
  goto __pyx_L0;

  /* "cython_sampler.pyx":1295
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * cdef bool vec_find(vector[int]& vec, int x) nogil:             # <<<<<<<<<<<<<<
 *     cdef vector[int].iterator found
 *     found = find[vector[int].iterator, int](vec.begin(), vec.end(), x)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "cython_sampler.pyx":1302
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * cdef double vec_max(vector[double]& vec) nogil:             # <<<<<<<<<<<<<<
 *     cdef double max_val = 0
 *     cdef vector[double].iterator it
 */

static double __pyx_f_14cython_sampler_vec_max(std::vector<double>  &__pyx_v_vec) {
  double __pyx_v_max_val;
  std::vector<double> ::iterator __pyx_v_it;
  double __pyx_r;
  int __pyx_t_1;

  /* "cython_sampler.pyx":1303
 * @cython.boundscheck(False)
 * cdef double vec_max(vector[double]& vec) nogil:
 *     cdef double max_val = 0             # <<<<<<<<<<<<<<
 *     cdef vector[double].iterator it
 *     it = vec.begin()
 */
  __pyx_v_max_val = 0.0;

  /* "cython_sampler.pyx":1305
 *     cdef double max_val = 0
 *     cdef vector[double].iterator it
 *     it = vec.begin()             # <<<<<<<<<<<<<<
 *     while it != vec.end():
 *         if deref(it) > max_val:
 */
  __pyx_v_it = __pyx_v_vec.begin();

  /* "cython_sampler.pyx":1306
 *     cdef vector[double].iterator it
 *     it = vec.begin()
 *     while it != vec.end():             # <<<<<<<<<<<<<<
 *         if deref(it) > max_val:
 *             max_val = deref(it)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_it != __pyx_v_vec.end()) != 0);
    if (!__pyx_t_1) break;

    /* "cython_sampler.pyx":1307
 *     it = vec.begin()
 *     while it != vec.end():
 *         if deref(it) > max_val:             # <<<<<<<<<<<<<<
 *             max_val = deref(it)
 *         inc(it)
 */
    __pyx_t_1 = (((*__pyx_v_it) > __pyx_v_max_val) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":1308
 *     while it != vec.end():
 *         if deref(it) > max_val:
 *             max_val = deref(it)             # <<<<<<<<<<<<<<
 *         inc(it)
 *     return max_val
 */
      __pyx_v_max_val = (*__pyx_v_it);

      /* "cython_sampler.pyx":1307
 *     it = vec.begin()
 *     while it != vec.end():
 *         if deref(it) > max_val:             # <<<<<<<<<<<<<<
 *             max_val = deref(it)
 *         inc(it)
 */
    }

    /* "cython_sampler.pyx":1309
 *         if deref(it) > max_val:
 *             max_val = deref(it)
 *         inc(it)             # <<<<<<<<<<<<<<
 *     return max_val
 * 
 */
    (void)((++__pyx_v_it));
  }

  /* "cython_sampler.pyx":1310
 *             max_val = deref(it)
 *         inc(it)
 *     return max_val             # <<<<<<<<<<<<<<
 * 
 * @cython.wraparound(False)
 */
  __pyx_r = __pyx_v_max_val;
  goto __pyx_L0;

  /* "cython_sampler.pyx":1302
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * cdef double vec_max(vector[double]& vec) nogil:             # <<<<<<<<<<<<<<
 *     cdef double max_val = 0
 *     cdef vector[double].iterator it
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "cython_sampler.pyx":1314
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * cdef double double_abs(double x) nogil:             # <<<<<<<<<<<<<<
 *     if x >= 0:
 *         return x
 */

static double __pyx_f_14cython_sampler_double_abs(double __pyx_v_x) {
  double __pyx_r;
  int __pyx_t_1;

  /* "cython_sampler.pyx":1315
 * @cython.boundscheck(False)
 * cdef double double_abs(double x) nogil:
 *     if x >= 0:             # <<<<<<<<<<<<<<
 *         return x
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_x >= 0.0) != 0);
  if (__pyx_t_1) {

    /* "cython_sampler.pyx":1316
 * cdef double double_abs(double x) nogil:
 *     if x >= 0:
 *         return x             # <<<<<<<<<<<<<<
 *     else:
 *         return -x
 */
    __pyx_r = __pyx_v_x;
    goto __pyx_L0;

    /* "cython_sampler.pyx":1315
 * @cython.boundscheck(False)
 * cdef double double_abs(double x) nogil:
 *     if x >= 0:             # <<<<<<<<<<<<<<
 *         return x
 *     else:
 */
  }

  /* "cython_sampler.pyx":1318
 *         return x
 *     else:
 *         return -x             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_r = (-__pyx_v_x);
    goto __pyx_L0;
  }

  /* "cython_sampler.pyx":1314
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * cdef double double_abs(double x) nogil:             # <<<<<<<<<<<<<<
 *     if x >= 0:
 *         return x
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "cython_sampler.pyx":1321
 * 
 * 
 * def depround_test(py_ids, py_probs, sample_size):             # <<<<<<<<<<<<<<
 *     cdef vector[int] ids
 *     cutils.npy2vec_int(py_ids, ids)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14cython_sampler_1depround_test(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_14cython_sampler_1depround_test = {"depround_test", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14cython_sampler_1depround_test, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_14cython_sampler_1depround_test(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_py_ids = 0;
  PyObject *__pyx_v_py_probs = 0;
  PyObject *__pyx_v_sample_size = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("depround_test (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_py_ids,&__pyx_n_s_py_probs,&__pyx_n_s_sample_size,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_py_ids)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_py_probs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("depround_test", 1, 3, 3, 1); __PYX_ERR(0, 1321, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sample_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("depround_test", 1, 3, 3, 2); __PYX_ERR(0, 1321, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "depround_test") < 0)) __PYX_ERR(0, 1321, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_py_ids = values[0];
    __pyx_v_py_probs = values[1];
    __pyx_v_sample_size = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("depround_test", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1321, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cython_sampler.depround_test", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14cython_sampler_depround_test(__pyx_self, __pyx_v_py_ids, __pyx_v_py_probs, __pyx_v_sample_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14cython_sampler_depround_test(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_py_ids, PyObject *__pyx_v_py_probs, PyObject *__pyx_v_sample_size) {
  std::vector<int>  __pyx_v_ids;
  std::vector<double>  __pyx_v_probs;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("depround_test", 0);

  /* "cython_sampler.pyx":1323
 * def depround_test(py_ids, py_probs, sample_size):
 *     cdef vector[int] ids
 *     cutils.npy2vec_int(py_ids, ids)             # <<<<<<<<<<<<<<
 *     cdef vector[double] probs
 *     cutils.npy2vec_double(py_probs, probs)
 */
  if (!(likely(((__pyx_v_py_ids) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_py_ids, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1323, __pyx_L1_error)
  __pyx_f_12cython_utils_npy2vec_int(((PyArrayObject *)__pyx_v_py_ids), __pyx_v_ids);

  /* "cython_sampler.pyx":1325
 *     cutils.npy2vec_int(py_ids, ids)
 *     cdef vector[double] probs
 *     cutils.npy2vec_double(py_probs, probs)             # <<<<<<<<<<<<<<
 * 
 *     return depround(ids, probs, sample_size)
 */
  if (!(likely(((__pyx_v_py_probs) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_py_probs, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1325, __pyx_L1_error)
  __pyx_f_12cython_utils_npy2vec_double(((PyArrayObject *)__pyx_v_py_probs), __pyx_v_probs);

  /* "cython_sampler.pyx":1327
 *     cutils.npy2vec_double(py_probs, probs)
 * 
 *     return depround(ids, probs, sample_size)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_sample_size); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1327, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_vector_to_py_int(__pyx_f_14cython_sampler_depround(__pyx_v_ids, __pyx_v_probs, __pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cython_sampler.pyx":1321
 * 
 * 
 * def depround_test(py_ids, py_probs, sample_size):             # <<<<<<<<<<<<<<
 *     cdef vector[int] ids
 *     cutils.npy2vec_int(py_ids, ids)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cython_sampler.depround_test", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython_sampler.pyx":1332
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * cdef vector[int] depround(             # <<<<<<<<<<<<<<
 *         vector[int]& ids, vector[double]& input_probs, int sample_size) nogil:
 *     #srand48(time(NULL))
 */

static std::vector<int>  __pyx_f_14cython_sampler_depround(std::vector<int>  &__pyx_v_ids, std::vector<double>  &__pyx_v_input_probs, int __pyx_v_sample_size) {
  std::vector<int>  __pyx_v_samples;
  int __pyx_v_p_size;
  std::vector<double>  __pyx_v_probs;
  double __pyx_v_epsilon;
  std::vector<int>  __pyx_v_possible_list;
  int __pyx_v_count;
  int __pyx_v_k;
  double __pyx_v_abs_p;
  double __pyx_v_abs_1_p;
  int __pyx_v_idx1;
  int __pyx_v_i;
  int __pyx_v_idx2;
  int __pyx_v_j;
  double __pyx_v_alpha;
  double __pyx_v_beta;
  std::vector<int>  __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  long __pyx_t_4;
  float __pyx_t_5;
  double __pyx_t_6;

  /* "cython_sampler.pyx":1338
 * 
 *     # copy input_probs
 *     cdef int p_size = input_probs.size()             # <<<<<<<<<<<<<<
 *     cdef vector[double] probs
 *     probs.reserve(p_size)
 */
  __pyx_v_p_size = __pyx_v_input_probs.size();

  /* "cython_sampler.pyx":1340
 *     cdef int p_size = input_probs.size()
 *     cdef vector[double] probs
 *     probs.reserve(p_size)             # <<<<<<<<<<<<<<
 *     probs.insert(probs.end(), input_probs.begin(), input_probs.end())
 * 
 */
  __pyx_v_probs.reserve(__pyx_v_p_size);

  /* "cython_sampler.pyx":1341
 *     cdef vector[double] probs
 *     probs.reserve(p_size)
 *     probs.insert(probs.end(), input_probs.begin(), input_probs.end())             # <<<<<<<<<<<<<<
 * 
 *     cdef double epsilon = 1e-6
 */
  try {
    __pyx_v_probs.insert(__pyx_v_probs.end(), __pyx_v_input_probs.begin(), __pyx_v_input_probs.end());
  } catch(...) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_CppExn2PyErr();
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(0, 1341, __pyx_L1_error)
  }

  /* "cython_sampler.pyx":1343
 *     probs.insert(probs.end(), input_probs.begin(), input_probs.end())
 * 
 *     cdef double epsilon = 1e-6             # <<<<<<<<<<<<<<
 *     cdef vector[int] possible_list
 *     possible_list.resize(p_size)
 */
  __pyx_v_epsilon = 1e-6;

  /* "cython_sampler.pyx":1345
 *     cdef double epsilon = 1e-6
 *     cdef vector[int] possible_list
 *     possible_list.resize(p_size)             # <<<<<<<<<<<<<<
 *     cdef int count = 0
 *     cdef int k = 0
 */
  try {
    __pyx_v_possible_list.resize(__pyx_v_p_size);
  } catch(...) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_CppExn2PyErr();
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(0, 1345, __pyx_L1_error)
  }

  /* "cython_sampler.pyx":1346
 *     cdef vector[int] possible_list
 *     possible_list.resize(p_size)
 *     cdef int count = 0             # <<<<<<<<<<<<<<
 *     cdef int k = 0
 *     cdef double abs_p
 */
  __pyx_v_count = 0;

  /* "cython_sampler.pyx":1347
 *     possible_list.resize(p_size)
 *     cdef int count = 0
 *     cdef int k = 0             # <<<<<<<<<<<<<<
 *     cdef double abs_p
 *     cdef double abs_1_p
 */
  __pyx_v_k = 0;

  /* "cython_sampler.pyx":1352
 * 
 *     # search possible list
 *     while k < p_size:             # <<<<<<<<<<<<<<
 *         abs_p = probs[k]
 *         if abs_p < 0:
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_k < __pyx_v_p_size) != 0);
    if (!__pyx_t_1) break;

    /* "cython_sampler.pyx":1353
 *     # search possible list
 *     while k < p_size:
 *         abs_p = probs[k]             # <<<<<<<<<<<<<<
 *         if abs_p < 0:
 *             abs_p = -abs_p
 */
    __pyx_v_abs_p = (__pyx_v_probs[__pyx_v_k]);

    /* "cython_sampler.pyx":1354
 *     while k < p_size:
 *         abs_p = probs[k]
 *         if abs_p < 0:             # <<<<<<<<<<<<<<
 *             abs_p = -abs_p
 *         abs_1_p = 1 - probs[k]
 */
    __pyx_t_1 = ((__pyx_v_abs_p < 0.0) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":1355
 *         abs_p = probs[k]
 *         if abs_p < 0:
 *             abs_p = -abs_p             # <<<<<<<<<<<<<<
 *         abs_1_p = 1 - probs[k]
 *         if abs_1_p < 0:
 */
      __pyx_v_abs_p = (-__pyx_v_abs_p);

      /* "cython_sampler.pyx":1354
 *     while k < p_size:
 *         abs_p = probs[k]
 *         if abs_p < 0:             # <<<<<<<<<<<<<<
 *             abs_p = -abs_p
 *         abs_1_p = 1 - probs[k]
 */
    }

    /* "cython_sampler.pyx":1356
 *         if abs_p < 0:
 *             abs_p = -abs_p
 *         abs_1_p = 1 - probs[k]             # <<<<<<<<<<<<<<
 *         if abs_1_p < 0:
 *             abs_1_p = -abs_1_p
 */
    __pyx_v_abs_1_p = (1.0 - (__pyx_v_probs[__pyx_v_k]));

    /* "cython_sampler.pyx":1357
 *             abs_p = -abs_p
 *         abs_1_p = 1 - probs[k]
 *         if abs_1_p < 0:             # <<<<<<<<<<<<<<
 *             abs_1_p = -abs_1_p
 *         if abs_p >= epsilon and abs_1_p >= epsilon:
 */
    __pyx_t_1 = ((__pyx_v_abs_1_p < 0.0) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":1358
 *         abs_1_p = 1 - probs[k]
 *         if abs_1_p < 0:
 *             abs_1_p = -abs_1_p             # <<<<<<<<<<<<<<
 *         if abs_p >= epsilon and abs_1_p >= epsilon:
 *             possible_list[count] = k
 */
      __pyx_v_abs_1_p = (-__pyx_v_abs_1_p);

      /* "cython_sampler.pyx":1357
 *             abs_p = -abs_p
 *         abs_1_p = 1 - probs[k]
 *         if abs_1_p < 0:             # <<<<<<<<<<<<<<
 *             abs_1_p = -abs_1_p
 *         if abs_p >= epsilon and abs_1_p >= epsilon:
 */
    }

    /* "cython_sampler.pyx":1359
 *         if abs_1_p < 0:
 *             abs_1_p = -abs_1_p
 *         if abs_p >= epsilon and abs_1_p >= epsilon:             # <<<<<<<<<<<<<<
 *             possible_list[count] = k
 *             count += 1
 */
    __pyx_t_2 = ((__pyx_v_abs_p >= __pyx_v_epsilon) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_abs_1_p >= __pyx_v_epsilon) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":1360
 *             abs_1_p = -abs_1_p
 *         if abs_p >= epsilon and abs_1_p >= epsilon:
 *             possible_list[count] = k             # <<<<<<<<<<<<<<
 *             count += 1
 *         k += 1
 */
      (__pyx_v_possible_list[__pyx_v_count]) = __pyx_v_k;

      /* "cython_sampler.pyx":1361
 *         if abs_p >= epsilon and abs_1_p >= epsilon:
 *             possible_list[count] = k
 *             count += 1             # <<<<<<<<<<<<<<
 *         k += 1
 * 
 */
      __pyx_v_count = (__pyx_v_count + 1);

      /* "cython_sampler.pyx":1359
 *         if abs_1_p < 0:
 *             abs_1_p = -abs_1_p
 *         if abs_p >= epsilon and abs_1_p >= epsilon:             # <<<<<<<<<<<<<<
 *             possible_list[count] = k
 *             count += 1
 */
    }

    /* "cython_sampler.pyx":1362
 *             possible_list[count] = k
 *             count += 1
 *         k += 1             # <<<<<<<<<<<<<<
 * 
 *     # random pick distinct i, j
 */
    __pyx_v_k = (__pyx_v_k + 1);
  }

  /* "cython_sampler.pyx":1365
 * 
 *     # random pick distinct i, j
 *     cdef int idx1 = rand() % count             # <<<<<<<<<<<<<<
 *     cdef int i = possible_list[idx1]
 *     cdef int idx2 = rand() % (count - 1)
 */
  __pyx_t_3 = rand();
  if (unlikely(__pyx_v_count == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(0, 1365, __pyx_L1_error)
  }
  __pyx_v_idx1 = __Pyx_mod_int(__pyx_t_3, __pyx_v_count);

  /* "cython_sampler.pyx":1366
 *     # random pick distinct i, j
 *     cdef int idx1 = rand() % count
 *     cdef int i = possible_list[idx1]             # <<<<<<<<<<<<<<
 *     cdef int idx2 = rand() % (count - 1)
 *     if idx2 >= idx1:
 */
  __pyx_v_i = (__pyx_v_possible_list[__pyx_v_idx1]);

  /* "cython_sampler.pyx":1367
 *     cdef int idx1 = rand() % count
 *     cdef int i = possible_list[idx1]
 *     cdef int idx2 = rand() % (count - 1)             # <<<<<<<<<<<<<<
 *     if idx2 >= idx1:
 *         idx2 += 1
 */
  __pyx_t_3 = rand();
  __pyx_t_4 = (__pyx_v_count - 1);
  if (unlikely(__pyx_t_4 == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(0, 1367, __pyx_L1_error)
  }
  __pyx_v_idx2 = __Pyx_mod_long(__pyx_t_3, __pyx_t_4);

  /* "cython_sampler.pyx":1368
 *     cdef int i = possible_list[idx1]
 *     cdef int idx2 = rand() % (count - 1)
 *     if idx2 >= idx1:             # <<<<<<<<<<<<<<
 *         idx2 += 1
 *     cdef int j = possible_list[idx2]
 */
  __pyx_t_1 = ((__pyx_v_idx2 >= __pyx_v_idx1) != 0);
  if (__pyx_t_1) {

    /* "cython_sampler.pyx":1369
 *     cdef int idx2 = rand() % (count - 1)
 *     if idx2 >= idx1:
 *         idx2 += 1             # <<<<<<<<<<<<<<
 *     cdef int j = possible_list[idx2]
 * 
 */
    __pyx_v_idx2 = (__pyx_v_idx2 + 1);

    /* "cython_sampler.pyx":1368
 *     cdef int i = possible_list[idx1]
 *     cdef int idx2 = rand() % (count - 1)
 *     if idx2 >= idx1:             # <<<<<<<<<<<<<<
 *         idx2 += 1
 *     cdef int j = possible_list[idx2]
 */
  }

  /* "cython_sampler.pyx":1370
 *     if idx2 >= idx1:
 *         idx2 += 1
 *     cdef int j = possible_list[idx2]             # <<<<<<<<<<<<<<
 * 
 *     # update probs[i], probs[j]
 */
  __pyx_v_j = (__pyx_v_possible_list[__pyx_v_idx2]);

  /* "cython_sampler.pyx":1375
 *     cdef double alpha
 *     cdef double beta
 *     while count > 1:             # <<<<<<<<<<<<<<
 *         alpha = 1 - probs[i]
 *         if alpha > probs[j]:
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_count > 1) != 0);
    if (!__pyx_t_1) break;

    /* "cython_sampler.pyx":1376
 *     cdef double beta
 *     while count > 1:
 *         alpha = 1 - probs[i]             # <<<<<<<<<<<<<<
 *         if alpha > probs[j]:
 *             alpha = probs[j]
 */
    __pyx_v_alpha = (1.0 - (__pyx_v_probs[__pyx_v_i]));

    /* "cython_sampler.pyx":1377
 *     while count > 1:
 *         alpha = 1 - probs[i]
 *         if alpha > probs[j]:             # <<<<<<<<<<<<<<
 *             alpha = probs[j]
 *         beta = probs[i]
 */
    __pyx_t_1 = ((__pyx_v_alpha > (__pyx_v_probs[__pyx_v_j])) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":1378
 *         alpha = 1 - probs[i]
 *         if alpha > probs[j]:
 *             alpha = probs[j]             # <<<<<<<<<<<<<<
 *         beta = probs[i]
 *         if beta > 1 - probs[j]:
 */
      __pyx_v_alpha = (__pyx_v_probs[__pyx_v_j]);

      /* "cython_sampler.pyx":1377
 *     while count > 1:
 *         alpha = 1 - probs[i]
 *         if alpha > probs[j]:             # <<<<<<<<<<<<<<
 *             alpha = probs[j]
 *         beta = probs[i]
 */
    }

    /* "cython_sampler.pyx":1379
 *         if alpha > probs[j]:
 *             alpha = probs[j]
 *         beta = probs[i]             # <<<<<<<<<<<<<<
 *         if beta > 1 - probs[j]:
 *             beta = 1 - probs[j]
 */
    __pyx_v_beta = (__pyx_v_probs[__pyx_v_i]);

    /* "cython_sampler.pyx":1380
 *             alpha = probs[j]
 *         beta = probs[i]
 *         if beta > 1 - probs[j]:             # <<<<<<<<<<<<<<
 *             beta = 1 - probs[j]
 *         if (<float> rand())/RAND_MAX < beta/(alpha+beta) :
 */
    __pyx_t_1 = ((__pyx_v_beta > (1.0 - (__pyx_v_probs[__pyx_v_j]))) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":1381
 *         beta = probs[i]
 *         if beta > 1 - probs[j]:
 *             beta = 1 - probs[j]             # <<<<<<<<<<<<<<
 *         if (<float> rand())/RAND_MAX < beta/(alpha+beta) :
 *             probs[i] += alpha
 */
      __pyx_v_beta = (1.0 - (__pyx_v_probs[__pyx_v_j]));

      /* "cython_sampler.pyx":1380
 *             alpha = probs[j]
 *         beta = probs[i]
 *         if beta > 1 - probs[j]:             # <<<<<<<<<<<<<<
 *             beta = 1 - probs[j]
 *         if (<float> rand())/RAND_MAX < beta/(alpha+beta) :
 */
    }

    /* "cython_sampler.pyx":1382
 *         if beta > 1 - probs[j]:
 *             beta = 1 - probs[j]
 *         if (<float> rand())/RAND_MAX < beta/(alpha+beta) :             # <<<<<<<<<<<<<<
 *             probs[i] += alpha
 *             probs[j] -= alpha
 */
    __pyx_t_5 = ((float)rand());
    if (unlikely(RAND_MAX == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 1382, __pyx_L1_error)
    }
    __pyx_t_6 = (__pyx_v_alpha + __pyx_v_beta);
    if (unlikely(__pyx_t_6 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      __Pyx_PyGILState_Release(__pyx_gilstate_save);
      #endif
      __PYX_ERR(0, 1382, __pyx_L1_error)
    }
    __pyx_t_1 = (((__pyx_t_5 / ((float)RAND_MAX)) < (__pyx_v_beta / __pyx_t_6)) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":1383
 *             beta = 1 - probs[j]
 *         if (<float> rand())/RAND_MAX < beta/(alpha+beta) :
 *             probs[i] += alpha             # <<<<<<<<<<<<<<
 *             probs[j] -= alpha
 *         else:
 */
      __pyx_t_3 = __pyx_v_i;
      (__pyx_v_probs[__pyx_t_3]) = ((__pyx_v_probs[__pyx_t_3]) + __pyx_v_alpha);

      /* "cython_sampler.pyx":1384
 *         if (<float> rand())/RAND_MAX < beta/(alpha+beta) :
 *             probs[i] += alpha
 *             probs[j] -= alpha             # <<<<<<<<<<<<<<
 *         else:
 *             probs[i] -= beta
 */
      __pyx_t_3 = __pyx_v_j;
      (__pyx_v_probs[__pyx_t_3]) = ((__pyx_v_probs[__pyx_t_3]) - __pyx_v_alpha);

      /* "cython_sampler.pyx":1382
 *         if beta > 1 - probs[j]:
 *             beta = 1 - probs[j]
 *         if (<float> rand())/RAND_MAX < beta/(alpha+beta) :             # <<<<<<<<<<<<<<
 *             probs[i] += alpha
 *             probs[j] -= alpha
 */
      goto __pyx_L15;
    }

    /* "cython_sampler.pyx":1386
 *             probs[j] -= alpha
 *         else:
 *             probs[i] -= beta             # <<<<<<<<<<<<<<
 *             probs[j] += beta
 * 
 */
    /*else*/ {
      __pyx_t_3 = __pyx_v_i;
      (__pyx_v_probs[__pyx_t_3]) = ((__pyx_v_probs[__pyx_t_3]) - __pyx_v_beta);

      /* "cython_sampler.pyx":1387
 *         else:
 *             probs[i] -= beta
 *             probs[j] += beta             # <<<<<<<<<<<<<<
 * 
 *         count = 0
 */
      __pyx_t_3 = __pyx_v_j;
      (__pyx_v_probs[__pyx_t_3]) = ((__pyx_v_probs[__pyx_t_3]) + __pyx_v_beta);
    }
    __pyx_L15:;

    /* "cython_sampler.pyx":1389
 *             probs[j] += beta
 * 
 *         count = 0             # <<<<<<<<<<<<<<
 *         k = 0
 *         while k < p_size:
 */
    __pyx_v_count = 0;

    /* "cython_sampler.pyx":1390
 * 
 *         count = 0
 *         k = 0             # <<<<<<<<<<<<<<
 *         while k < p_size:
 *             abs_p = probs[k]
 */
    __pyx_v_k = 0;

    /* "cython_sampler.pyx":1391
 *         count = 0
 *         k = 0
 *         while k < p_size:             # <<<<<<<<<<<<<<
 *             abs_p = probs[k]
 *             if abs_p < 0:
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_k < __pyx_v_p_size) != 0);
      if (!__pyx_t_1) break;

      /* "cython_sampler.pyx":1392
 *         k = 0
 *         while k < p_size:
 *             abs_p = probs[k]             # <<<<<<<<<<<<<<
 *             if abs_p < 0:
 *                 abs_p = -abs_p
 */
      __pyx_v_abs_p = (__pyx_v_probs[__pyx_v_k]);

      /* "cython_sampler.pyx":1393
 *         while k < p_size:
 *             abs_p = probs[k]
 *             if abs_p < 0:             # <<<<<<<<<<<<<<
 *                 abs_p = -abs_p
 *             abs_1_p = 1 - probs[k]
 */
      __pyx_t_1 = ((__pyx_v_abs_p < 0.0) != 0);
      if (__pyx_t_1) {

        /* "cython_sampler.pyx":1394
 *             abs_p = probs[k]
 *             if abs_p < 0:
 *                 abs_p = -abs_p             # <<<<<<<<<<<<<<
 *             abs_1_p = 1 - probs[k]
 *             if abs_1_p < 0:
 */
        __pyx_v_abs_p = (-__pyx_v_abs_p);

        /* "cython_sampler.pyx":1393
 *         while k < p_size:
 *             abs_p = probs[k]
 *             if abs_p < 0:             # <<<<<<<<<<<<<<
 *                 abs_p = -abs_p
 *             abs_1_p = 1 - probs[k]
 */
      }

      /* "cython_sampler.pyx":1395
 *             if abs_p < 0:
 *                 abs_p = -abs_p
 *             abs_1_p = 1 - probs[k]             # <<<<<<<<<<<<<<
 *             if abs_1_p < 0:
 *                 abs_1_p = -abs_1_p
 */
      __pyx_v_abs_1_p = (1.0 - (__pyx_v_probs[__pyx_v_k]));

      /* "cython_sampler.pyx":1396
 *                 abs_p = -abs_p
 *             abs_1_p = 1 - probs[k]
 *             if abs_1_p < 0:             # <<<<<<<<<<<<<<
 *                 abs_1_p = -abs_1_p
 *             if abs_p >= epsilon and abs_1_p >= epsilon:
 */
      __pyx_t_1 = ((__pyx_v_abs_1_p < 0.0) != 0);
      if (__pyx_t_1) {

        /* "cython_sampler.pyx":1397
 *             abs_1_p = 1 - probs[k]
 *             if abs_1_p < 0:
 *                 abs_1_p = -abs_1_p             # <<<<<<<<<<<<<<
 *             if abs_p >= epsilon and abs_1_p >= epsilon:
 *                 possible_list[count] = k
 */
        __pyx_v_abs_1_p = (-__pyx_v_abs_1_p);

        /* "cython_sampler.pyx":1396
 *                 abs_p = -abs_p
 *             abs_1_p = 1 - probs[k]
 *             if abs_1_p < 0:             # <<<<<<<<<<<<<<
 *                 abs_1_p = -abs_1_p
 *             if abs_p >= epsilon and abs_1_p >= epsilon:
 */
      }

      /* "cython_sampler.pyx":1398
 *             if abs_1_p < 0:
 *                 abs_1_p = -abs_1_p
 *             if abs_p >= epsilon and abs_1_p >= epsilon:             # <<<<<<<<<<<<<<
 *                 possible_list[count] = k
 *                 count += 1
 */
      __pyx_t_2 = ((__pyx_v_abs_p >= __pyx_v_epsilon) != 0);
      if (__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L21_bool_binop_done;
      }
      __pyx_t_2 = ((__pyx_v_abs_1_p >= __pyx_v_epsilon) != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L21_bool_binop_done:;
      if (__pyx_t_1) {

        /* "cython_sampler.pyx":1399
 *                 abs_1_p = -abs_1_p
 *             if abs_p >= epsilon and abs_1_p >= epsilon:
 *                 possible_list[count] = k             # <<<<<<<<<<<<<<
 *                 count += 1
 *             k += 1
 */
        (__pyx_v_possible_list[__pyx_v_count]) = __pyx_v_k;

        /* "cython_sampler.pyx":1400
 *             if abs_p >= epsilon and abs_1_p >= epsilon:
 *                 possible_list[count] = k
 *                 count += 1             # <<<<<<<<<<<<<<
 *             k += 1
 * 
 */
        __pyx_v_count = (__pyx_v_count + 1);

        /* "cython_sampler.pyx":1398
 *             if abs_1_p < 0:
 *                 abs_1_p = -abs_1_p
 *             if abs_p >= epsilon and abs_1_p >= epsilon:             # <<<<<<<<<<<<<<
 *                 possible_list[count] = k
 *                 count += 1
 */
      }

      /* "cython_sampler.pyx":1401
 *                 possible_list[count] = k
 *                 count += 1
 *             k += 1             # <<<<<<<<<<<<<<
 * 
 *         if count > 1:
 */
      __pyx_v_k = (__pyx_v_k + 1);
    }

    /* "cython_sampler.pyx":1403
 *             k += 1
 * 
 *         if count > 1:             # <<<<<<<<<<<<<<
 *             idx1 = rand() % count
 *             i = possible_list[idx1]
 */
    __pyx_t_1 = ((__pyx_v_count > 1) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":1404
 * 
 *         if count > 1:
 *             idx1 = rand() % count             # <<<<<<<<<<<<<<
 *             i = possible_list[idx1]
 *             idx2 = rand() % (count - 1)
 */
      __pyx_t_3 = rand();
      if (unlikely(__pyx_v_count == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 1404, __pyx_L1_error)
      }
      __pyx_v_idx1 = __Pyx_mod_int(__pyx_t_3, __pyx_v_count);

      /* "cython_sampler.pyx":1405
 *         if count > 1:
 *             idx1 = rand() % count
 *             i = possible_list[idx1]             # <<<<<<<<<<<<<<
 *             idx2 = rand() % (count - 1)
 *             if idx2 >= idx1:
 */
      __pyx_v_i = (__pyx_v_possible_list[__pyx_v_idx1]);

      /* "cython_sampler.pyx":1406
 *             idx1 = rand() % count
 *             i = possible_list[idx1]
 *             idx2 = rand() % (count - 1)             # <<<<<<<<<<<<<<
 *             if idx2 >= idx1:
 *                 idx2 += 1
 */
      __pyx_t_3 = rand();
      __pyx_t_4 = (__pyx_v_count - 1);
      if (unlikely(__pyx_t_4 == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 1406, __pyx_L1_error)
      }
      __pyx_v_idx2 = __Pyx_mod_long(__pyx_t_3, __pyx_t_4);

      /* "cython_sampler.pyx":1407
 *             i = possible_list[idx1]
 *             idx2 = rand() % (count - 1)
 *             if idx2 >= idx1:             # <<<<<<<<<<<<<<
 *                 idx2 += 1
 *             j = possible_list[idx2]
 */
      __pyx_t_1 = ((__pyx_v_idx2 >= __pyx_v_idx1) != 0);
      if (__pyx_t_1) {

        /* "cython_sampler.pyx":1408
 *             idx2 = rand() % (count - 1)
 *             if idx2 >= idx1:
 *                 idx2 += 1             # <<<<<<<<<<<<<<
 *             j = possible_list[idx2]
 * 
 */
        __pyx_v_idx2 = (__pyx_v_idx2 + 1);

        /* "cython_sampler.pyx":1407
 *             i = possible_list[idx1]
 *             idx2 = rand() % (count - 1)
 *             if idx2 >= idx1:             # <<<<<<<<<<<<<<
 *                 idx2 += 1
 *             j = possible_list[idx2]
 */
      }

      /* "cython_sampler.pyx":1409
 *             if idx2 >= idx1:
 *                 idx2 += 1
 *             j = possible_list[idx2]             # <<<<<<<<<<<<<<
 * 
 *     # sample ids
 */
      __pyx_v_j = (__pyx_v_possible_list[__pyx_v_idx2]);

      /* "cython_sampler.pyx":1403
 *             k += 1
 * 
 *         if count > 1:             # <<<<<<<<<<<<<<
 *             idx1 = rand() % count
 *             i = possible_list[idx1]
 */
    }
  }

  /* "cython_sampler.pyx":1412
 * 
 *     # sample ids
 *     i = 0             # <<<<<<<<<<<<<<
 *     while i < p_size:
 *         if double_abs(1-probs[i]) < epsilon:
 */
  __pyx_v_i = 0;

  /* "cython_sampler.pyx":1413
 *     # sample ids
 *     i = 0
 *     while i < p_size:             # <<<<<<<<<<<<<<
 *         if double_abs(1-probs[i]) < epsilon:
 *             samples.push_back(ids[i])
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_i < __pyx_v_p_size) != 0);
    if (!__pyx_t_1) break;

    /* "cython_sampler.pyx":1414
 *     i = 0
 *     while i < p_size:
 *         if double_abs(1-probs[i]) < epsilon:             # <<<<<<<<<<<<<<
 *             samples.push_back(ids[i])
 *         i += 1
 */
    __pyx_t_1 = ((__pyx_f_14cython_sampler_double_abs((1.0 - (__pyx_v_probs[__pyx_v_i]))) < __pyx_v_epsilon) != 0);
    if (__pyx_t_1) {

      /* "cython_sampler.pyx":1415
 *     while i < p_size:
 *         if double_abs(1-probs[i]) < epsilon:
 *             samples.push_back(ids[i])             # <<<<<<<<<<<<<<
 *         i += 1
 *     if samples.size() != sample_size:
 */
      try {
        __pyx_v_samples.push_back((__pyx_v_ids[__pyx_v_i]));
      } catch(...) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        __Pyx_CppExn2PyErr();
        #ifdef WITH_THREAD
        __Pyx_PyGILState_Release(__pyx_gilstate_save);
        #endif
        __PYX_ERR(0, 1415, __pyx_L1_error)
      }

      /* "cython_sampler.pyx":1414
 *     i = 0
 *     while i < p_size:
 *         if double_abs(1-probs[i]) < epsilon:             # <<<<<<<<<<<<<<
 *             samples.push_back(ids[i])
 *         i += 1
 */
    }

    /* "cython_sampler.pyx":1416
 *         if double_abs(1-probs[i]) < epsilon:
 *             samples.push_back(ids[i])
 *         i += 1             # <<<<<<<<<<<<<<
 *     if samples.size() != sample_size:
 *         printf("Error! DepRound samples wrong number")
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cython_sampler.pyx":1417
 *             samples.push_back(ids[i])
 *         i += 1
 *     if samples.size() != sample_size:             # <<<<<<<<<<<<<<
 *         printf("Error! DepRound samples wrong number")
 * 
 */
  __pyx_t_1 = ((__pyx_v_samples.size() != __pyx_v_sample_size) != 0);
  if (__pyx_t_1) {

    /* "cython_sampler.pyx":1418
 *         i += 1
 *     if samples.size() != sample_size:
 *         printf("Error! DepRound samples wrong number")             # <<<<<<<<<<<<<<
 * 
 *     return samples
 */
    (void)(printf(((char const *)"Error! DepRound samples wrong number")));

    /* "cython_sampler.pyx":1417
 *             samples.push_back(ids[i])
 *         i += 1
 *     if samples.size() != sample_size:             # <<<<<<<<<<<<<<
 *         printf("Error! DepRound samples wrong number")
 * 
 */
  }

  /* "cython_sampler.pyx":1420
 *         printf("Error! DepRound samples wrong number")
 * 
 *     return samples             # <<<<<<<<<<<<<<
 */
  __pyx_r = __pyx_v_samples;
  goto __pyx_L0;

  /* "cython_sampler.pyx":1332
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * cdef vector[int] depround(             # <<<<<<<<<<<<<<
 *         vector[int]& ids, vector[double]& input_probs, int sample_size) nogil:
 *     #srand48(time(NULL))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cython_sampler.depround", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyArray_Descr *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  char *__pyx_t_9;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":265
 * 
 *             cdef int i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *             cdef int i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":271
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_ARRAY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 272, __pyx_L1_error)

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":275
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_ARRAY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 276, __pyx_L1_error)

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":279
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * 2) * ((size_t)__pyx_v_ndim))));

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":286
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":287
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L9;
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":289
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L9:;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":291
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":296
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = <dtype>PyArray_DESCR(self)
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":297
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_7 = PyArray_DESCR(__pyx_v_self);
  __pyx_t_3 = ((PyObject *)__pyx_t_7);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":300
 *             cdef int offset
 * 
 *             info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not PyDataType_HASFIELDS(descr):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":302
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(PyDataType_HASFIELDS(__pyx_v_descr) != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":303
 * 
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L15_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_L15_next_or:;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":305
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L14_bool_binop_done:;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_1)) {

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":306
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 306, __pyx_L1_error)

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":307
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;
      case NPY_UBYTE:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":308
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      __pyx_v_f = ((char *)"B");
      break;
      case NPY_SHORT:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":309
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      __pyx_v_f = ((char *)"h");
      break;
      case NPY_USHORT:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":310
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      __pyx_v_f = ((char *)"H");
      break;
      case NPY_INT:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":311
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      __pyx_v_f = ((char *)"i");
      break;
      case NPY_UINT:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":312
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      __pyx_v_f = ((char *)"I");
      break;
      case NPY_LONG:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":313
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      __pyx_v_f = ((char *)"l");
      break;
      case NPY_ULONG:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":314
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      __pyx_v_f = ((char *)"L");
      break;
      case NPY_LONGLONG:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":315
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      __pyx_v_f = ((char *)"q");
      break;
      case NPY_ULONGLONG:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":316
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      __pyx_v_f = ((char *)"Q");
      break;
      case NPY_FLOAT:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":317
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      __pyx_v_f = ((char *)"f");
      break;
      case NPY_DOUBLE:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":318
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      __pyx_v_f = ((char *)"d");
      break;
      case NPY_LONGDOUBLE:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":319
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      __pyx_v_f = ((char *)"g");
      break;
      case NPY_CFLOAT:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":320
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      __pyx_v_f = ((char *)"Zf");
      break;
      case NPY_CDOUBLE:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":321
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      __pyx_v_f = ((char *)"Zd");
      break;
      case NPY_CLONGDOUBLE:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":322
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      __pyx_v_f = ((char *)"Zg");
      break;
      case NPY_OBJECT:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":323
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":325
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 325, __pyx_L1_error)
      break;
    }

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":326
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":327
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":302
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":329
 *                 return
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)PyObject_Malloc(0xFF));

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":330
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":331
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":332
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(2, 332, __pyx_L1_error)
    __pyx_v_f = __pyx_t_9;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":335
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":337
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":338
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":339
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)
 */
    PyObject_Free(__pyx_v_info->format);

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":338
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":340
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":341
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    PyObject_Free(__pyx_v_info->strides);

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":340
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":337
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":822
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":824
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":825
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":824
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":828
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":831
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":834
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":837
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":838
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":837
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":847
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":848
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":851
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(2, 851, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 851, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 851, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":852
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 852, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 852, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(2, 852, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":853
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(2, 853, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 853, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(2, 853, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":855
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 855, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (unlikely(__pyx_t_6)) {

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":856
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 856, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 856, __pyx_L1_error)

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":855
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":858
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":859
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":858
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_6)) {

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":860
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 860, __pyx_L1_error)

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":858
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":870
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 870, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 870, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 870, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":871
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":872
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":873
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":875
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":877
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":878
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 878, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":879
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (unlikely(__pyx_t_6)) {

        /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":880
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 880, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(2, 880, __pyx_L1_error)

        /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":879
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":883
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 883, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 883, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 883, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":884
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 884, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 884, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 884, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":885
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 885, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 885, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 885, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":886
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 886, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 886, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 886, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":887
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 887, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 887, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 887, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":888
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 888, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 888, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 888, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":889
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 889, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 889, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":890
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 890, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 890, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 890, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":891
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 891, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 891, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 891, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":892
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 892, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 892, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 892, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":893
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 893, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 893, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 893, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":894
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 894, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 894, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":895
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 895, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 895, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 895, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":896
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 896, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 896, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 896, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":897
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 897, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 897, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 897, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":898
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 898, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 898, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 898, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":899
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 899, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 899, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 899, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(__pyx_t_6)) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":901
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 901, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 901, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(2, 901, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":902
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":877
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":906
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(2, 906, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":851
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":907
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1022
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1023
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1024
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1022
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1026
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1027
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1028
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1029
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1028
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1030
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1026
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1034
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1035
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1036
 * cdef inline int import_array() except -1:
 *     try:
 *         _import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1036, __pyx_L3_error)

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1035
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1037
 *     try:
 *         _import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1037, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1038
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1038, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1038, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1035
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1034
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1040
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1041
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1042
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1042, __pyx_L3_error)

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1041
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1043
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1043, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1044
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1044, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1044, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1041
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1040
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1046
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1047
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1048
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1048, __pyx_L3_error)

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1047
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1049
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1049, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1050
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1050, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1050, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1047
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1046
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cython_utils.pxd":34
 *     cdef void set_data(self,vector[long]& data)
 * 
 * cdef inline void npy2vec_int(np.ndarray[int,ndim=1,mode='c'] nda, vector[int]& vec):             # <<<<<<<<<<<<<<
 *     cdef int size = nda.size
 *     cdef int* vec_c = &(nda[0])
 */

static CYTHON_INLINE void __pyx_f_12cython_utils_npy2vec_int(PyArrayObject *__pyx_v_nda, std::vector<int>  &__pyx_v_vec) {
  int __pyx_v_size;
  int *__pyx_v_vec_c;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_nda;
  __Pyx_Buffer __pyx_pybuffer_nda;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  __Pyx_RefNannySetupContext("npy2vec_int", 0);
  __pyx_pybuffer_nda.pybuffer.buf = NULL;
  __pyx_pybuffer_nda.refcount = 0;
  __pyx_pybuffernd_nda.data = NULL;
  __pyx_pybuffernd_nda.rcbuffer = &__pyx_pybuffer_nda;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_nda.rcbuffer->pybuffer, (PyObject*)__pyx_v_nda, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(3, 34, __pyx_L1_error)
  }
  __pyx_pybuffernd_nda.diminfo[0].strides = __pyx_pybuffernd_nda.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_nda.diminfo[0].shape = __pyx_pybuffernd_nda.rcbuffer->pybuffer.shape[0];

  /* "cython_utils.pxd":35
 * 
 * cdef inline void npy2vec_int(np.ndarray[int,ndim=1,mode='c'] nda, vector[int]& vec):
 *     cdef int size = nda.size             # <<<<<<<<<<<<<<
 *     cdef int* vec_c = &(nda[0])
 *     vec.assign(vec_c,vec_c+size)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_nda), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_size = __pyx_t_2;

  /* "cython_utils.pxd":36
 * cdef inline void npy2vec_int(np.ndarray[int,ndim=1,mode='c'] nda, vector[int]& vec):
 *     cdef int size = nda.size
 *     cdef int* vec_c = &(nda[0])             # <<<<<<<<<<<<<<
 *     vec.assign(vec_c,vec_c+size)
 * 
 */
  __pyx_t_3 = 0;
  __pyx_t_2 = -1;
  if (__pyx_t_3 < 0) {
    __pyx_t_3 += __pyx_pybuffernd_nda.diminfo[0].shape;
    if (unlikely(__pyx_t_3 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_3 >= __pyx_pybuffernd_nda.diminfo[0].shape)) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(3, 36, __pyx_L1_error)
  }
  __pyx_v_vec_c = (&(*__Pyx_BufPtrCContig1d(int *, __pyx_pybuffernd_nda.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_nda.diminfo[0].strides)));

  /* "cython_utils.pxd":37
 *     cdef int size = nda.size
 *     cdef int* vec_c = &(nda[0])
 *     vec.assign(vec_c,vec_c+size)             # <<<<<<<<<<<<<<
 * 
 * cdef inline void npy2vec_long(np.ndarray[long,ndim=1,mode='c'] nda, vector[long]& vec):
 */
  try {
    __pyx_v_vec.assign(__pyx_v_vec_c, (__pyx_v_vec_c + __pyx_v_size));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 37, __pyx_L1_error)
  }

  /* "cython_utils.pxd":34
 *     cdef void set_data(self,vector[long]& data)
 * 
 * cdef inline void npy2vec_int(np.ndarray[int,ndim=1,mode='c'] nda, vector[int]& vec):             # <<<<<<<<<<<<<<
 *     cdef int size = nda.size
 *     cdef int* vec_c = &(nda[0])
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_nda.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("cython_utils.npy2vec_int", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_nda.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
}

/* "cython_utils.pxd":39
 *     vec.assign(vec_c,vec_c+size)
 * 
 * cdef inline void npy2vec_long(np.ndarray[long,ndim=1,mode='c'] nda, vector[long]& vec):             # <<<<<<<<<<<<<<
 *     cdef int size = nda.size
 *     cdef long* vec_c = &(nda[0])
 */

static CYTHON_INLINE void __pyx_f_12cython_utils_npy2vec_long(PyArrayObject *__pyx_v_nda, std::vector<long>  &__pyx_v_vec) {
  int __pyx_v_size;
  long *__pyx_v_vec_c;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_nda;
  __Pyx_Buffer __pyx_pybuffer_nda;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  __Pyx_RefNannySetupContext("npy2vec_long", 0);
  __pyx_pybuffer_nda.pybuffer.buf = NULL;
  __pyx_pybuffer_nda.refcount = 0;
  __pyx_pybuffernd_nda.data = NULL;
  __pyx_pybuffernd_nda.rcbuffer = &__pyx_pybuffer_nda;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_nda.rcbuffer->pybuffer, (PyObject*)__pyx_v_nda, &__Pyx_TypeInfo_long, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(3, 39, __pyx_L1_error)
  }
  __pyx_pybuffernd_nda.diminfo[0].strides = __pyx_pybuffernd_nda.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_nda.diminfo[0].shape = __pyx_pybuffernd_nda.rcbuffer->pybuffer.shape[0];

  /* "cython_utils.pxd":40
 * 
 * cdef inline void npy2vec_long(np.ndarray[long,ndim=1,mode='c'] nda, vector[long]& vec):
 *     cdef int size = nda.size             # <<<<<<<<<<<<<<
 *     cdef long* vec_c = &(nda[0])
 *     vec.assign(vec_c,vec_c+size)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_nda), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_size = __pyx_t_2;

  /* "cython_utils.pxd":41
 * cdef inline void npy2vec_long(np.ndarray[long,ndim=1,mode='c'] nda, vector[long]& vec):
 *     cdef int size = nda.size
 *     cdef long* vec_c = &(nda[0])             # <<<<<<<<<<<<<<
 *     vec.assign(vec_c,vec_c+size)
 * 
 */
  __pyx_t_3 = 0;
  __pyx_t_2 = -1;
  if (__pyx_t_3 < 0) {
    __pyx_t_3 += __pyx_pybuffernd_nda.diminfo[0].shape;
    if (unlikely(__pyx_t_3 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_3 >= __pyx_pybuffernd_nda.diminfo[0].shape)) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(3, 41, __pyx_L1_error)
  }
  __pyx_v_vec_c = (&(*__Pyx_BufPtrCContig1d(long *, __pyx_pybuffernd_nda.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_nda.diminfo[0].strides)));

  /* "cython_utils.pxd":42
 *     cdef int size = nda.size
 *     cdef long* vec_c = &(nda[0])
 *     vec.assign(vec_c,vec_c+size)             # <<<<<<<<<<<<<<
 * 
 * cdef inline void npy2vec_float(np.ndarray[float,ndim=1,mode='c'] nda, vector[float]& vec):
 */
  try {
    __pyx_v_vec.assign(__pyx_v_vec_c, (__pyx_v_vec_c + __pyx_v_size));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 42, __pyx_L1_error)
  }

  /* "cython_utils.pxd":39
 *     vec.assign(vec_c,vec_c+size)
 * 
 * cdef inline void npy2vec_long(np.ndarray[long,ndim=1,mode='c'] nda, vector[long]& vec):             # <<<<<<<<<<<<<<
 *     cdef int size = nda.size
 *     cdef long* vec_c = &(nda[0])
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_nda.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("cython_utils.npy2vec_long", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_nda.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
}

/* "cython_utils.pxd":44
 *     vec.assign(vec_c,vec_c+size)
 * 
 * cdef inline void npy2vec_float(np.ndarray[float,ndim=1,mode='c'] nda, vector[float]& vec):             # <<<<<<<<<<<<<<
 *     cdef int size = nda.size
 *     cdef float* vec_c = &(nda[0])
 */

static CYTHON_INLINE void __pyx_f_12cython_utils_npy2vec_float(PyArrayObject *__pyx_v_nda, std::vector<float>  &__pyx_v_vec) {
  int __pyx_v_size;
  float *__pyx_v_vec_c;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_nda;
  __Pyx_Buffer __pyx_pybuffer_nda;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  __Pyx_RefNannySetupContext("npy2vec_float", 0);
  __pyx_pybuffer_nda.pybuffer.buf = NULL;
  __pyx_pybuffer_nda.refcount = 0;
  __pyx_pybuffernd_nda.data = NULL;
  __pyx_pybuffernd_nda.rcbuffer = &__pyx_pybuffer_nda;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_nda.rcbuffer->pybuffer, (PyObject*)__pyx_v_nda, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(3, 44, __pyx_L1_error)
  }
  __pyx_pybuffernd_nda.diminfo[0].strides = __pyx_pybuffernd_nda.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_nda.diminfo[0].shape = __pyx_pybuffernd_nda.rcbuffer->pybuffer.shape[0];

  /* "cython_utils.pxd":45
 * 
 * cdef inline void npy2vec_float(np.ndarray[float,ndim=1,mode='c'] nda, vector[float]& vec):
 *     cdef int size = nda.size             # <<<<<<<<<<<<<<
 *     cdef float* vec_c = &(nda[0])
 *     vec.assign(vec_c,vec_c+size)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_nda), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_size = __pyx_t_2;

  /* "cython_utils.pxd":46
 * cdef inline void npy2vec_float(np.ndarray[float,ndim=1,mode='c'] nda, vector[float]& vec):
 *     cdef int size = nda.size
 *     cdef float* vec_c = &(nda[0])             # <<<<<<<<<<<<<<
 *     vec.assign(vec_c,vec_c+size)
 * 
 */
  __pyx_t_3 = 0;
  __pyx_t_2 = -1;
  if (__pyx_t_3 < 0) {
    __pyx_t_3 += __pyx_pybuffernd_nda.diminfo[0].shape;
    if (unlikely(__pyx_t_3 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_3 >= __pyx_pybuffernd_nda.diminfo[0].shape)) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(3, 46, __pyx_L1_error)
  }
  __pyx_v_vec_c = (&(*__Pyx_BufPtrCContig1d(float *, __pyx_pybuffernd_nda.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_nda.diminfo[0].strides)));

  /* "cython_utils.pxd":47
 *     cdef int size = nda.size
 *     cdef float* vec_c = &(nda[0])
 *     vec.assign(vec_c,vec_c+size)             # <<<<<<<<<<<<<<
 * 
 * cdef inline void npy2vec_double(np.ndarray[double,ndim=1,mode='c'] nda, vector[double]& vec):
 */
  try {
    __pyx_v_vec.assign(__pyx_v_vec_c, (__pyx_v_vec_c + __pyx_v_size));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 47, __pyx_L1_error)
  }

  /* "cython_utils.pxd":44
 *     vec.assign(vec_c,vec_c+size)
 * 
 * cdef inline void npy2vec_float(np.ndarray[float,ndim=1,mode='c'] nda, vector[float]& vec):             # <<<<<<<<<<<<<<
 *     cdef int size = nda.size
 *     cdef float* vec_c = &(nda[0])
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_nda.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("cython_utils.npy2vec_float", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_nda.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
}

/* "cython_utils.pxd":49
 *     vec.assign(vec_c,vec_c+size)
 * 
 * cdef inline void npy2vec_double(np.ndarray[double,ndim=1,mode='c'] nda, vector[double]& vec):             # <<<<<<<<<<<<<<
 *     cdef int size = nda.size
 *     cdef double* vec_c = &(nda[0])
 */

static CYTHON_INLINE void __pyx_f_12cython_utils_npy2vec_double(PyArrayObject *__pyx_v_nda, std::vector<double>  &__pyx_v_vec) {
  int __pyx_v_size;
  double *__pyx_v_vec_c;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_nda;
  __Pyx_Buffer __pyx_pybuffer_nda;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  __Pyx_RefNannySetupContext("npy2vec_double", 0);
  __pyx_pybuffer_nda.pybuffer.buf = NULL;
  __pyx_pybuffer_nda.refcount = 0;
  __pyx_pybuffernd_nda.data = NULL;
  __pyx_pybuffernd_nda.rcbuffer = &__pyx_pybuffer_nda;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_nda.rcbuffer->pybuffer, (PyObject*)__pyx_v_nda, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) __PYX_ERR(3, 49, __pyx_L1_error)
  }
  __pyx_pybuffernd_nda.diminfo[0].strides = __pyx_pybuffernd_nda.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_nda.diminfo[0].shape = __pyx_pybuffernd_nda.rcbuffer->pybuffer.shape[0];

  /* "cython_utils.pxd":50
 * 
 * cdef inline void npy2vec_double(np.ndarray[double,ndim=1,mode='c'] nda, vector[double]& vec):
 *     cdef int size = nda.size             # <<<<<<<<<<<<<<
 *     cdef double* vec_c = &(nda[0])
 *     vec.assign(vec_c,vec_c+size)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_nda), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_size = __pyx_t_2;

  /* "cython_utils.pxd":51
 * cdef inline void npy2vec_double(np.ndarray[double,ndim=1,mode='c'] nda, vector[double]& vec):
 *     cdef int size = nda.size
 *     cdef double* vec_c = &(nda[0])             # <<<<<<<<<<<<<<
 *     vec.assign(vec_c,vec_c+size)
 */
  __pyx_t_3 = 0;
  __pyx_t_2 = -1;
  if (__pyx_t_3 < 0) {
    __pyx_t_3 += __pyx_pybuffernd_nda.diminfo[0].shape;
    if (unlikely(__pyx_t_3 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_3 >= __pyx_pybuffernd_nda.diminfo[0].shape)) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(3, 51, __pyx_L1_error)
  }
  __pyx_v_vec_c = (&(*__Pyx_BufPtrCContig1d(double *, __pyx_pybuffernd_nda.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_nda.diminfo[0].strides)));

  /* "cython_utils.pxd":52
 *     cdef int size = nda.size
 *     cdef double* vec_c = &(nda[0])
 *     vec.assign(vec_c,vec_c+size)             # <<<<<<<<<<<<<<
 */
  try {
    __pyx_v_vec.assign(__pyx_v_vec_c, (__pyx_v_vec_c + __pyx_v_size));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 52, __pyx_L1_error)
  }

  /* "cython_utils.pxd":49
 *     vec.assign(vec_c,vec_c+size)
 * 
 * cdef inline void npy2vec_double(np.ndarray[double,ndim=1,mode='c'] nda, vector[double]& vec):             # <<<<<<<<<<<<<<
 *     cdef int size = nda.size
 *     cdef double* vec_c = &(nda[0])
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_nda.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("cython_utils.npy2vec_double", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_nda.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_double", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_int", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_14cython_sampler_Sampler __pyx_vtable_14cython_sampler_Sampler;

static PyObject *__pyx_tp_new_14cython_sampler_Sampler(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_14cython_sampler_Sampler *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_14cython_sampler_Sampler *)o);
  p->__pyx_vtab = __pyx_vtabptr_14cython_sampler_Sampler;
  new((void*)&(p->sample_weights)) std::unordered_map<int,std::vector<double> > ();
  new((void*)&(p->sample_probs)) std::unordered_map<int,std::vector<double> > ();
  new((void*)&(p->sample_index)) std::unordered_map<int,std::unordered_map<int,int> > ();
  new((void*)&(p->sample_set0)) std::unordered_map<int,std::vector<int> > ();
  new((void*)&(p->degree)) std::vector<int> ();
  new((void*)&(p->adj)) std::unordered_map<int,std::vector<int> > ();
  if (unlikely(__pyx_pw_14cython_sampler_7Sampler_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14cython_sampler_Sampler(PyObject *o) {
  struct __pyx_obj_14cython_sampler_Sampler *p = (struct __pyx_obj_14cython_sampler_Sampler *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->sample_weights);
  __Pyx_call_destructor(p->sample_probs);
  __Pyx_call_destructor(p->sample_index);
  __Pyx_call_destructor(p->sample_set0);
  __Pyx_call_destructor(p->degree);
  __Pyx_call_destructor(p->adj);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_14cython_sampler_Sampler[] = {
  {"init", (PyCFunction)__pyx_pw_14cython_sampler_7Sampler_3init, METH_O, 0},
  {"get_degree", (PyCFunction)__pyx_pw_14cython_sampler_7Sampler_5get_degree, METH_O, 0},
  {"get_sample_probs", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14cython_sampler_7Sampler_7get_sample_probs, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_sample_probs_list", (PyCFunction)__pyx_pw_14cython_sampler_7Sampler_9get_sample_probs_list, METH_O, 0},
  {"get_sample_weights", (PyCFunction)__pyx_pw_14cython_sampler_7Sampler_11get_sample_weights, METH_O, 0},
  {"update", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14cython_sampler_7Sampler_13update, METH_VARARGS|METH_KEYWORDS, 0},
  {"sample", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14cython_sampler_7Sampler_15sample, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14cython_sampler_7Sampler_17__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14cython_sampler_7Sampler_19__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14cython_sampler_Sampler = {
  PyVarObject_HEAD_INIT(0, 0)
  "cython_sampler.Sampler", /*tp_name*/
  sizeof(struct __pyx_obj_14cython_sampler_Sampler), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14cython_sampler_Sampler, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14cython_sampler_Sampler, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14cython_sampler_Sampler, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_14cython_sampler_BanditSampler __pyx_vtable_14cython_sampler_BanditSampler;

static PyObject *__pyx_tp_new_14cython_sampler_BanditSampler(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_14cython_sampler_BanditSampler *p;
  PyObject *o = __pyx_tp_new_14cython_sampler_Sampler(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_14cython_sampler_BanditSampler *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_14cython_sampler_Sampler*)__pyx_vtabptr_14cython_sampler_BanditSampler;
  if (unlikely(__pyx_pw_14cython_sampler_13BanditSampler_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_14cython_sampler_BanditSampler[] = {
  {"update", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14cython_sampler_13BanditSampler_3update, METH_VARARGS|METH_KEYWORDS, 0},
  {"sample_graph", (PyCFunction)__pyx_pw_14cython_sampler_13BanditSampler_5sample_graph, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14cython_sampler_13BanditSampler_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14cython_sampler_13BanditSampler_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14cython_sampler_BanditSampler = {
  PyVarObject_HEAD_INIT(0, 0)
  "cython_sampler.BanditSampler", /*tp_name*/
  sizeof(struct __pyx_obj_14cython_sampler_BanditSampler), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14cython_sampler_Sampler, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14cython_sampler_BanditSampler, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14cython_sampler_BanditSampler, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_14cython_sampler_BanditLinearSampler __pyx_vtable_14cython_sampler_BanditLinearSampler;

static PyObject *__pyx_tp_new_14cython_sampler_BanditLinearSampler(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_14cython_sampler_BanditLinearSampler *p;
  PyObject *o = __pyx_tp_new_14cython_sampler_Sampler(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_14cython_sampler_BanditLinearSampler *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_14cython_sampler_Sampler*)__pyx_vtabptr_14cython_sampler_BanditLinearSampler;
  if (unlikely(__pyx_pw_14cython_sampler_19BanditLinearSampler_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_14cython_sampler_BanditLinearSampler[] = {
  {"update", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14cython_sampler_19BanditLinearSampler_3update, METH_VARARGS|METH_KEYWORDS, 0},
  {"sample_graph", (PyCFunction)__pyx_pw_14cython_sampler_19BanditLinearSampler_5sample_graph, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14cython_sampler_19BanditLinearSampler_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14cython_sampler_19BanditLinearSampler_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14cython_sampler_BanditLinearSampler = {
  PyVarObject_HEAD_INIT(0, 0)
  "cython_sampler.BanditLinearSampler", /*tp_name*/
  sizeof(struct __pyx_obj_14cython_sampler_BanditLinearSampler), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14cython_sampler_Sampler, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14cython_sampler_BanditLinearSampler, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14cython_sampler_BanditLinearSampler, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};
static struct __pyx_vtabstruct_14cython_sampler_BanditMPSampler __pyx_vtable_14cython_sampler_BanditMPSampler;

static PyObject *__pyx_tp_new_14cython_sampler_BanditMPSampler(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_14cython_sampler_BanditMPSampler *p;
  PyObject *o = __pyx_tp_new_14cython_sampler_Sampler(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_14cython_sampler_BanditMPSampler *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_14cython_sampler_Sampler*)__pyx_vtabptr_14cython_sampler_BanditMPSampler;
  if (unlikely(__pyx_pw_14cython_sampler_15BanditMPSampler_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_14cython_sampler_BanditMPSampler[] = {
  {"update", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14cython_sampler_15BanditMPSampler_3update, METH_VARARGS|METH_KEYWORDS, 0},
  {"sample_graph", (PyCFunction)__pyx_pw_14cython_sampler_15BanditMPSampler_5sample_graph, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14cython_sampler_15BanditMPSampler_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14cython_sampler_15BanditMPSampler_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14cython_sampler_BanditMPSampler = {
  PyVarObject_HEAD_INIT(0, 0)
  "cython_sampler.BanditMPSampler", /*tp_name*/
  sizeof(struct __pyx_obj_14cython_sampler_BanditMPSampler), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14cython_sampler_Sampler, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14cython_sampler_BanditMPSampler, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14cython_sampler_BanditMPSampler, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_cython_sampler(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_cython_sampler},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "cython_sampler",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_BanditLinearSampler, __pyx_k_BanditLinearSampler, sizeof(__pyx_k_BanditLinearSampler), 0, 0, 1, 1},
  {&__pyx_n_s_BanditMPSampler, __pyx_k_BanditMPSampler, sizeof(__pyx_k_BanditMPSampler), 0, 0, 1, 1},
  {&__pyx_n_s_BanditSampler, __pyx_k_BanditSampler, sizeof(__pyx_k_BanditSampler), 0, 0, 1, 1},
  {&__pyx_n_s_FLAGS, __pyx_k_FLAGS, sizeof(__pyx_k_FLAGS), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_Sampler, __pyx_k_Sampler, sizeof(__pyx_k_Sampler), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_app, __pyx_k_app, sizeof(__pyx_k_app), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_choice, __pyx_k_choice, sizeof(__pyx_k_choice), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_cutils, __pyx_k_cutils, sizeof(__pyx_k_cutils), 0, 0, 1, 1},
  {&__pyx_n_s_cython_sampler, __pyx_k_cython_sampler, sizeof(__pyx_k_cython_sampler), 0, 0, 1, 1},
  {&__pyx_kp_s_cython_sampler_cython_sampler_py, __pyx_k_cython_sampler_cython_sampler_py, sizeof(__pyx_k_cython_sampler_cython_sampler_py), 0, 0, 1, 0},
  {&__pyx_n_s_cython_utils, __pyx_k_cython_utils, sizeof(__pyx_k_cython_utils), 0, 0, 1, 1},
  {&__pyx_n_s_delta, __pyx_k_delta, sizeof(__pyx_k_delta), 0, 0, 1, 1},
  {&__pyx_n_s_depround_test, __pyx_k_depround_test, sizeof(__pyx_k_depround_test), 0, 0, 1, 1},
  {&__pyx_n_s_dst, __pyx_k_dst, sizeof(__pyx_k_dst), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_eta, __pyx_k_eta, sizeof(__pyx_k_eta), 0, 0, 1, 1},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_s_frombuffer, __pyx_k_frombuffer, sizeof(__pyx_k_frombuffer), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_ids, __pyx_k_ids, sizeof(__pyx_k_ids), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
  {&__pyx_n_s_lil_matrix, __pyx_k_lil_matrix, sizeof(__pyx_k_lil_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_math, __pyx_k_math, sizeof(__pyx_k_math), 0, 0, 1, 1},
  {&__pyx_n_s_max_reward, __pyx_k_max_reward, sizeof(__pyx_k_max_reward), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_neighbor_limit, __pyx_k_neighbor_limit, sizeof(__pyx_k_neighbor_limit), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_node, __pyx_k_node, sizeof(__pyx_k_node), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_np_att_list, __pyx_k_np_att_list, sizeof(__pyx_k_np_att_list), 0, 0, 1, 1},
  {&__pyx_n_s_np_dst_list, __pyx_k_np_dst_list, sizeof(__pyx_k_np_dst_list), 0, 0, 1, 1},
  {&__pyx_n_s_np_src_list, __pyx_k_np_src_list, sizeof(__pyx_k_np_src_list), 0, 0, 1, 1},
  {&__pyx_n_s_num_proc, __pyx_k_num_proc, sizeof(__pyx_k_num_proc), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_probs, __pyx_k_probs, sizeof(__pyx_k_probs), 0, 0, 1, 1},
  {&__pyx_n_s_py_ids, __pyx_k_py_ids, sizeof(__pyx_k_py_ids), 0, 0, 1, 1},
  {&__pyx_n_s_py_probs, __pyx_k_py_probs, sizeof(__pyx_k_py_probs), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_random, __pyx_k_random, sizeof(__pyx_k_random), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_replace, __pyx_k_replace, sizeof(__pyx_k_replace), 0, 0, 1, 1},
  {&__pyx_n_s_reshape, __pyx_k_reshape, sizeof(__pyx_k_reshape), 0, 0, 1, 1},
  {&__pyx_n_s_rows, __pyx_k_rows, sizeof(__pyx_k_rows), 0, 0, 1, 1},
  {&__pyx_n_s_sample_size, __pyx_k_sample_size, sizeof(__pyx_k_sample_size), 0, 0, 1, 1},
  {&__pyx_n_s_scipy_sparse, __pyx_k_scipy_sparse, sizeof(__pyx_k_scipy_sparse), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_src, __pyx_k_src, sizeof(__pyx_k_src), 0, 0, 1, 1},
  {&__pyx_n_s_tensorflow, __pyx_k_tensorflow, sizeof(__pyx_k_tensorflow), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_tf, __pyx_k_tf, sizeof(__pyx_k_tf), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 65, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 111, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 120, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(2, 272, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(2, 856, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 1038, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(2, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(2, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":306
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(2, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":856
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(2, 856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":880
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(2, 880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1038
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(2, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1044
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(2, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "cython_sampler.pyx":1321
 * 
 * 
 * def depround_test(py_ids, py_probs, sample_size):             # <<<<<<<<<<<<<<
 *     cdef vector[int] ids
 *     cutils.npy2vec_int(py_ids, ids)
 */
  __pyx_tuple__16 = PyTuple_Pack(5, __pyx_n_s_py_ids, __pyx_n_s_py_probs, __pyx_n_s_sample_size, __pyx_n_s_ids, __pyx_n_s_probs); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 1321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__16, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cython_sampler_cython_sampler_py, __pyx_n_s_depround_test, 1321, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(0, 1321, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  /* InitThreads.init */
  #ifdef WITH_THREAD
PyEval_InitThreads();
#endif

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_14cython_sampler_Sampler = &__pyx_vtable_14cython_sampler_Sampler;
  __pyx_vtable_14cython_sampler_Sampler.c_init = (void (*)(struct __pyx_obj_14cython_sampler_Sampler *, int, PyArrayObject *))__pyx_f_14cython_sampler_7Sampler_c_init;
  if (PyType_Ready(&__pyx_type_14cython_sampler_Sampler) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14cython_sampler_Sampler.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14cython_sampler_Sampler.tp_dictoffset && __pyx_type_14cython_sampler_Sampler.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14cython_sampler_Sampler.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_14cython_sampler_Sampler.tp_dict, __pyx_vtabptr_14cython_sampler_Sampler) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Sampler, (PyObject *)&__pyx_type_14cython_sampler_Sampler) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14cython_sampler_Sampler) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  __pyx_ptype_14cython_sampler_Sampler = &__pyx_type_14cython_sampler_Sampler;
  __pyx_vtabptr_14cython_sampler_BanditSampler = &__pyx_vtable_14cython_sampler_BanditSampler;
  __pyx_vtable_14cython_sampler_BanditSampler.__pyx_base = *__pyx_vtabptr_14cython_sampler_Sampler;
  __pyx_vtable_14cython_sampler_BanditSampler.update_sample_weights = (void (*)(struct __pyx_obj_14cython_sampler_BanditSampler *, std::unordered_map<int,std::unordered_map<int,int> >  &, int, int, std::vector<int>  &, std::vector<int>  &, std::vector<float>  &, int, float))__pyx_f_14cython_sampler_13BanditSampler_update_sample_weights;
  __pyx_vtable_14cython_sampler_BanditSampler.update_sample_probs = (void (*)(struct __pyx_obj_14cython_sampler_BanditSampler *, int, int, std::vector<int> , float))__pyx_f_14cython_sampler_13BanditSampler_update_sample_probs;
  __pyx_vtable_14cython_sampler_BanditSampler.c_sample_graph_v1 = (void (*)(struct __pyx_obj_14cython_sampler_BanditSampler *, int, int, std::vector<int>  &, std::vector<int>  &, std::unordered_set<int>  &))__pyx_f_14cython_sampler_13BanditSampler_c_sample_graph_v1;
  __pyx_vtable_14cython_sampler_BanditSampler.c_sample_graph_v2 = (void (*)(struct __pyx_obj_14cython_sampler_BanditSampler *, int, int, std::vector<int>  &, std::vector<int>  &))__pyx_f_14cython_sampler_13BanditSampler_c_sample_graph_v2;
  __pyx_vtable_14cython_sampler_BanditSampler.sample_neighbors_v1 = (int (*)(struct __pyx_obj_14cython_sampler_BanditSampler *, int, std::vector<int>  &, std::unordered_set<int>  &))__pyx_f_14cython_sampler_13BanditSampler_sample_neighbors_v1;
  __pyx_vtable_14cython_sampler_BanditSampler.sample_neighbors_v2 = (void (*)(struct __pyx_obj_14cython_sampler_BanditSampler *, int, std::vector<int>  &))__pyx_f_14cython_sampler_13BanditSampler_sample_neighbors_v2;
  __pyx_type_14cython_sampler_BanditSampler.tp_base = __pyx_ptype_14cython_sampler_Sampler;
  if (PyType_Ready(&__pyx_type_14cython_sampler_BanditSampler) < 0) __PYX_ERR(0, 125, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14cython_sampler_BanditSampler.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14cython_sampler_BanditSampler.tp_dictoffset && __pyx_type_14cython_sampler_BanditSampler.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14cython_sampler_BanditSampler.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_14cython_sampler_BanditSampler.tp_dict, __pyx_vtabptr_14cython_sampler_BanditSampler) < 0) __PYX_ERR(0, 125, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BanditSampler, (PyObject *)&__pyx_type_14cython_sampler_BanditSampler) < 0) __PYX_ERR(0, 125, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14cython_sampler_BanditSampler) < 0) __PYX_ERR(0, 125, __pyx_L1_error)
  __pyx_ptype_14cython_sampler_BanditSampler = &__pyx_type_14cython_sampler_BanditSampler;
  __pyx_vtabptr_14cython_sampler_BanditLinearSampler = &__pyx_vtable_14cython_sampler_BanditLinearSampler;
  __pyx_vtable_14cython_sampler_BanditLinearSampler.__pyx_base = *__pyx_vtabptr_14cython_sampler_Sampler;
  __pyx_vtable_14cython_sampler_BanditLinearSampler.update_sample_weights = (void (*)(struct __pyx_obj_14cython_sampler_BanditLinearSampler *, std::unordered_map<int,std::unordered_map<int,int> >  &, int, int, std::vector<int>  &, std::vector<int>  &, std::vector<float>  &, int, float))__pyx_f_14cython_sampler_19BanditLinearSampler_update_sample_weights;
  __pyx_vtable_14cython_sampler_BanditLinearSampler.update_sample_probs = (void (*)(struct __pyx_obj_14cython_sampler_BanditLinearSampler *, int, int, std::vector<int> , float))__pyx_f_14cython_sampler_19BanditLinearSampler_update_sample_probs;
  __pyx_vtable_14cython_sampler_BanditLinearSampler.c_sample_graph_v1 = (void (*)(struct __pyx_obj_14cython_sampler_BanditLinearSampler *, int, int, std::vector<int>  &, std::vector<int>  &, std::unordered_set<int>  &))__pyx_f_14cython_sampler_19BanditLinearSampler_c_sample_graph_v1;
  __pyx_vtable_14cython_sampler_BanditLinearSampler.c_sample_graph_v2 = (void (*)(struct __pyx_obj_14cython_sampler_BanditLinearSampler *, int, int, std::vector<int>  &, std::vector<int>  &))__pyx_f_14cython_sampler_19BanditLinearSampler_c_sample_graph_v2;
  __pyx_vtable_14cython_sampler_BanditLinearSampler.sample_neighbors_v1 = (int (*)(struct __pyx_obj_14cython_sampler_BanditLinearSampler *, int, std::vector<int>  &, std::unordered_set<int>  &))__pyx_f_14cython_sampler_19BanditLinearSampler_sample_neighbors_v1;
  __pyx_vtable_14cython_sampler_BanditLinearSampler.sample_neighbors_v2 = (void (*)(struct __pyx_obj_14cython_sampler_BanditLinearSampler *, int, std::vector<int>  &))__pyx_f_14cython_sampler_19BanditLinearSampler_sample_neighbors_v2;
  __pyx_type_14cython_sampler_BanditLinearSampler.tp_base = __pyx_ptype_14cython_sampler_Sampler;
  if (PyType_Ready(&__pyx_type_14cython_sampler_BanditLinearSampler) < 0) __PYX_ERR(0, 414, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14cython_sampler_BanditLinearSampler.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14cython_sampler_BanditLinearSampler.tp_dictoffset && __pyx_type_14cython_sampler_BanditLinearSampler.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14cython_sampler_BanditLinearSampler.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_14cython_sampler_BanditLinearSampler.tp_dict, __pyx_vtabptr_14cython_sampler_BanditLinearSampler) < 0) __PYX_ERR(0, 414, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BanditLinearSampler, (PyObject *)&__pyx_type_14cython_sampler_BanditLinearSampler) < 0) __PYX_ERR(0, 414, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14cython_sampler_BanditLinearSampler) < 0) __PYX_ERR(0, 414, __pyx_L1_error)
  __pyx_ptype_14cython_sampler_BanditLinearSampler = &__pyx_type_14cython_sampler_BanditLinearSampler;
  __pyx_vtabptr_14cython_sampler_BanditMPSampler = &__pyx_vtable_14cython_sampler_BanditMPSampler;
  __pyx_vtable_14cython_sampler_BanditMPSampler.__pyx_base = *__pyx_vtabptr_14cython_sampler_Sampler;
  __pyx_vtable_14cython_sampler_BanditMPSampler.update_sample_weights = (void (*)(struct __pyx_obj_14cython_sampler_BanditMPSampler *, std::unordered_map<int,std::unordered_map<int,int> >  &, std::unordered_map<int,int>  &, std::unordered_map<int,int>  &, int, int, std::vector<int>  &, std::vector<int>  &, std::vector<int>  &, std::vector<float>  &, int, float, float))__pyx_f_14cython_sampler_15BanditMPSampler_update_sample_weights;
  __pyx_vtable_14cython_sampler_BanditMPSampler.c_sample_graph_v1 = (void (*)(struct __pyx_obj_14cython_sampler_BanditMPSampler *, int, int, std::vector<int>  &, std::vector<int>  &, std::unordered_set<int>  &))__pyx_f_14cython_sampler_15BanditMPSampler_c_sample_graph_v1;
  __pyx_vtable_14cython_sampler_BanditMPSampler.c_sample_graph_v2 = (void (*)(struct __pyx_obj_14cython_sampler_BanditMPSampler *, int, int, std::vector<int>  &, std::vector<int>  &))__pyx_f_14cython_sampler_15BanditMPSampler_c_sample_graph_v2;
  __pyx_vtable_14cython_sampler_BanditMPSampler.sample_neighbors_v1 = (int (*)(struct __pyx_obj_14cython_sampler_BanditMPSampler *, int, std::vector<int>  &, std::unordered_set<int>  &))__pyx_f_14cython_sampler_15BanditMPSampler_sample_neighbors_v1;
  __pyx_vtable_14cython_sampler_BanditMPSampler.sample_neighbors_v2 = (void (*)(struct __pyx_obj_14cython_sampler_BanditMPSampler *, int, std::vector<int>  &))__pyx_f_14cython_sampler_15BanditMPSampler_sample_neighbors_v2;
  __pyx_type_14cython_sampler_BanditMPSampler.tp_base = __pyx_ptype_14cython_sampler_Sampler;
  if (PyType_Ready(&__pyx_type_14cython_sampler_BanditMPSampler) < 0) __PYX_ERR(0, 703, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_14cython_sampler_BanditMPSampler.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14cython_sampler_BanditMPSampler.tp_dictoffset && __pyx_type_14cython_sampler_BanditMPSampler.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14cython_sampler_BanditMPSampler.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_14cython_sampler_BanditMPSampler.tp_dict, __pyx_vtabptr_14cython_sampler_BanditMPSampler) < 0) __PYX_ERR(0, 703, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BanditMPSampler, (PyObject *)&__pyx_type_14cython_sampler_BanditMPSampler) < 0) __PYX_ERR(0, 703, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14cython_sampler_BanditMPSampler) < 0) __PYX_ERR(0, 703, __pyx_L1_error)
  __pyx_ptype_14cython_sampler_BanditMPSampler = &__pyx_type_14cython_sampler_BanditMPSampler;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(6, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 206, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 229, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 233, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 242, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 918, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cython_utils"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_12cython_utils_array_wrapper_float = __Pyx_ImportType(__pyx_t_1, "cython_utils", "array_wrapper_float", sizeof(struct __pyx_obj_12cython_utils_array_wrapper_float), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_12cython_utils_array_wrapper_float) __PYX_ERR(3, 16, __pyx_L1_error)
  __pyx_vtabptr_12cython_utils_array_wrapper_float = (struct __pyx_vtabstruct_12cython_utils_array_wrapper_float*)__Pyx_GetVtable(__pyx_ptype_12cython_utils_array_wrapper_float->tp_dict); if (unlikely(!__pyx_vtabptr_12cython_utils_array_wrapper_float)) __PYX_ERR(3, 16, __pyx_L1_error)
  __pyx_ptype_12cython_utils_array_wrapper_int = __Pyx_ImportType(__pyx_t_1, "cython_utils", "array_wrapper_int", sizeof(struct __pyx_obj_12cython_utils_array_wrapper_int), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_12cython_utils_array_wrapper_int) __PYX_ERR(3, 22, __pyx_L1_error)
  __pyx_vtabptr_12cython_utils_array_wrapper_int = (struct __pyx_vtabstruct_12cython_utils_array_wrapper_int*)__Pyx_GetVtable(__pyx_ptype_12cython_utils_array_wrapper_int->tp_dict); if (unlikely(!__pyx_vtabptr_12cython_utils_array_wrapper_int)) __PYX_ERR(3, 22, __pyx_L1_error)
  __pyx_ptype_12cython_utils_array_wrapper_long = __Pyx_ImportType(__pyx_t_1, "cython_utils", "array_wrapper_long", sizeof(struct __pyx_obj_12cython_utils_array_wrapper_long), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_12cython_utils_array_wrapper_long) __PYX_ERR(3, 28, __pyx_L1_error)
  __pyx_vtabptr_12cython_utils_array_wrapper_long = (struct __pyx_vtabstruct_12cython_utils_array_wrapper_long*)__Pyx_GetVtable(__pyx_ptype_12cython_utils_array_wrapper_long->tp_dict); if (unlikely(!__pyx_vtabptr_12cython_utils_array_wrapper_long)) __PYX_ERR(3, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initcython_sampler(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initcython_sampler(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_cython_sampler(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_cython_sampler(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_cython_sampler(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'cython_sampler' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_cython_sampler(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("cython_sampler", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_cython_sampler) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "cython_sampler")) {
      if (unlikely(PyDict_SetItemString(modules, "cython_sampler", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) goto __pyx_L1_error;
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) goto __pyx_L1_error;
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "cython_sampler.pyx":16
 * from libcpp.unordered_set cimport unordered_set
 * from libcpp.utility cimport pair
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * from libc.stdio cimport printf
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython_sampler.pyx":20
 * from libc.stdio cimport printf
 * from libcpp cimport bool
 * import time,math             # <<<<<<<<<<<<<<
 * import random
 * from libc.math cimport exp, sqrt, log
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_time, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_time, __pyx_t_1) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_math, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_math, __pyx_t_1) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython_sampler.pyx":21
 * from libcpp cimport bool
 * import time,math
 * import random             # <<<<<<<<<<<<<<
 * from libc.math cimport exp, sqrt, log
 * from libc.stdlib cimport rand, malloc, free
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_random, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_random, __pyx_t_1) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython_sampler.pyx":30
 * cdef extern from "<utility>" namespace "std" nogil:
 *     T move[T](T)
 * from scipy.sparse import lil_matrix             # <<<<<<<<<<<<<<
 * 
 * cimport cython_utils as cutils
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_lil_matrix);
  __Pyx_GIVEREF(__pyx_n_s_lil_matrix);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_lil_matrix);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_scipy_sparse, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_lil_matrix); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_lil_matrix, __pyx_t_1) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython_sampler.pyx":33
 * 
 * cimport cython_utils as cutils
 * import cython_utils as cutils             # <<<<<<<<<<<<<<
 * 
 * import tensorflow as tf
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_cython_utils, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cutils, __pyx_t_2) < 0) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython_sampler.pyx":35
 * import cython_utils as cutils
 * 
 * import tensorflow as tf             # <<<<<<<<<<<<<<
 * 
 * flags = tf.app.flags
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_tensorflow, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_tf, __pyx_t_2) < 0) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython_sampler.pyx":37
 * import tensorflow as tf
 * 
 * flags = tf.app.flags             # <<<<<<<<<<<<<<
 * FLAGS = flags.FLAGS
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_tf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_app); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_flags, __pyx_t_2) < 0) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cython_sampler.pyx":38
 * 
 * flags = tf.app.flags
 * FLAGS = flags.FLAGS             # <<<<<<<<<<<<<<
 * 
 * #srand48(123)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_FLAGS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FLAGS, __pyx_t_1) < 0) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython_sampler.pyx":1321
 * 
 * 
 * def depround_test(py_ids, py_probs, sample_size):             # <<<<<<<<<<<<<<
 *     cdef vector[int] ids
 *     cutils.npy2vec_int(py_ids, ids)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_14cython_sampler_1depround_test, NULL, __pyx_n_s_cython_sampler); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_depround_test, __pyx_t_1) < 0) __PYX_ERR(0, 1321, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cython_sampler.pyx":1
 * # cython: language_level=3             # <<<<<<<<<<<<<<
 * # distutils: language=c++
 * # distutils: extra_compile_args = -fopenmp -std=c++11
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init cython_sampler", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cython_sampler");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* BufferGetAndValidate */
  static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (unlikely(info->buf == NULL)) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}
static void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static int __Pyx__GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  buf->buf = NULL;
  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
    __Pyx_ZeroBuffer(buf);
    return -1;
  }
  if (unlikely(buf->ndim != nd)) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if (unlikely((size_t)buf->itemsize != dtype->size)) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_SafeReleaseBuffer(buf);
  return -1;
}

/* PyErrFetchRestore */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
  static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* RaiseDoubleKeywords */
  static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
  static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
  static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* RaiseException */
  #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* SliceObject */
  static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* PyCFunctionFastCall */
  #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
  #if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCall2Args */
  static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* None */
  static CYTHON_INLINE int __Pyx_mod_int(int a, int b) {
    int r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

/* PyObjectCallNoArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* None */
  static CYTHON_INLINE long __Pyx_mod_long(long a, long b) {
    long r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

/* DictGetItem */
  #if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* RaiseTooManyValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
  static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* GetTopmostException */
  #if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
  #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
  #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* BufferIndexError */
  static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

/* PyObject_GenericGetAttrNoDict */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
  static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
  static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
  #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
  static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* Import */
  static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
  static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
        else if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view);
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


  /* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* None */
  static CYTHON_INLINE long __Pyx_pow_long(long b, long e) {
    long t = b;
    switch (e) {
        case 3:
            t *= b;
        CYTHON_FALLTHROUGH;
        case 2:
            t *= b;
        CYTHON_FALLTHROUGH;
        case 1:
            return t;
        case 0:
            return 1;
    }
    #if 1
    if (unlikely(e<0)) return 0;
    #endif
    t = 1;
    while (likely(e)) {
        t *= (b * (e&1)) | ((~e)&1);
        b *= b;
        e >>= 1;
    }
    return t;
}

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) ((enum NPY_TYPES) 0 - (enum NPY_TYPES) 1), const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
  #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
